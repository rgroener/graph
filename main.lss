
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00004182  00004216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  0080017e  0080017e  00004294  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000042b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ba8  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000132a  00000000  00000000  00009f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a02  00000000  00000000  0000b272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c64  00000000  00000000  0000fc74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2d  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005336  00000000  00000000  00011405  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0001673b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__ctors_end>
       4:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
       8:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
       c:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      10:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      14:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      18:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      1c:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      20:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      24:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      28:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      2c:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_11>
      30:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      34:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      38:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      3c:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      40:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      44:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      48:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      4c:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      50:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      54:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      58:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      5c:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      60:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      64:	0c 94 10 03 	jmp	0x620	; 0x620 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <graph+0x24c>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 3e       	cpi	r16, 0xE0	; 224
      f0:	5b 4f       	sbci	r21, 0xFB	; 251
      f2:	5b 3e       	cpi	r21, 0xEB	; 235
      f4:	3e 6b       	ori	r19, 0xBE	; 190
      f6:	4f 6b       	ori	r20, 0xBF	; 191
      f8:	3e 1c       	adc	r3, r14
      fa:	3e 7c       	andi	r19, 0xCE	; 206
      fc:	3e 1c       	adc	r3, r14
      fe:	18 3c       	cpi	r17, 0xC8	; 200
     100:	7e 3c       	cpi	r23, 0xCE	; 206
     102:	18 1c       	adc	r1, r8
     104:	57 7d       	andi	r21, 0xD7	; 215
     106:	57 1c       	adc	r5, r7
     108:	1c 5e       	subi	r17, 0xEC	; 236
     10a:	7f 5e       	subi	r23, 0xEF	; 239
     10c:	1c 00       	.word	0x001c	; ????
     10e:	18 3c       	cpi	r17, 0xC8	; 200
     110:	18 00       	.word	0x0018	; ????
     112:	ff e7       	ldi	r31, 0x7F	; 127
     114:	c3 e7       	ldi	r28, 0x73	; 115
     116:	ff 00       	.word	0x00ff	; ????
     118:	18 24       	eor	r1, r8
     11a:	18 00       	.word	0x0018	; ????
     11c:	ff e7       	ldi	r31, 0x7F	; 127
     11e:	db e7       	ldi	r29, 0x7B	; 123
     120:	ff 30       	cpi	r31, 0x0F	; 15
     122:	48 3a       	cpi	r20, 0xA8	; 168
     124:	06 0e       	add	r0, r22
     126:	26 29       	or	r18, r6
     128:	79 29       	or	r23, r9
     12a:	26 40       	sbci	r18, 0x06	; 6
     12c:	7f 05       	cpc	r23, r15
     12e:	05 07       	cpc	r16, r21
     130:	40 7f       	andi	r20, 0xF0	; 240
     132:	05 25       	eor	r16, r5
     134:	3f 5a       	subi	r19, 0xAF	; 175
     136:	3c e7       	ldi	r19, 0x7C	; 124
     138:	3c 5a       	subi	r19, 0xAC	; 172
     13a:	7f 3e       	cpi	r23, 0xEF	; 239
     13c:	1c 1c       	adc	r1, r12
     13e:	08 08       	sbc	r0, r8
     140:	1c 1c       	adc	r1, r12
     142:	3e 7f       	andi	r19, 0xFE	; 254
     144:	14 22       	and	r1, r20
     146:	7f 22       	and	r7, r31
     148:	14 5f       	subi	r17, 0xF4	; 244
     14a:	5f 00       	.word	0x005f	; ????
     14c:	5f 5f       	subi	r21, 0xFF	; 255
     14e:	06 09       	sbc	r16, r6
     150:	7f 01       	movw	r14, r30
     152:	7f 00       	.word	0x007f	; ????
     154:	66 89       	ldd	r22, Z+22	; 0x16
     156:	95 6a       	ori	r25, 0xA5	; 165
     158:	60 60       	ori	r22, 0x00	; 0
     15a:	60 60       	ori	r22, 0x00	; 0
     15c:	60 94       	com	r6
     15e:	a2 ff       	sbrs	r26, 2
     160:	a2 94       	swap	r10
     162:	08 04       	cpc	r0, r8
     164:	7e 04       	cpc	r7, r14
     166:	08 10       	cpse	r0, r8
     168:	20 7e       	andi	r18, 0xE0	; 224
     16a:	20 10       	cpse	r2, r0
     16c:	08 08       	sbc	r0, r8
     16e:	2a 1c       	adc	r2, r10
     170:	08 08       	sbc	r0, r8
     172:	1c 2a       	or	r1, r28
     174:	08 08       	sbc	r0, r8
     176:	1e 10       	cpse	r1, r14
     178:	10 10       	cpse	r1, r0
     17a:	10 0c       	add	r1, r0
     17c:	1e 0c       	add	r1, r14
     17e:	1e 0c       	add	r1, r14
     180:	30 38       	cpi	r19, 0x80	; 128
     182:	3e 38       	cpi	r19, 0x8E	; 142
     184:	30 06       	cpc	r3, r16
     186:	0e 3e       	cpi	r16, 0xEE	; 238
     188:	0e 06       	cpc	r0, r30
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	00 5f       	subi	r16, 0xF0	; 240
     192:	00 00       	nop
     194:	00 07       	cpc	r16, r16
     196:	00 07       	cpc	r16, r16
     198:	00 14       	cp	r0, r0
     19a:	7f 14       	cp	r7, r15
     19c:	7f 14       	cp	r7, r15
     19e:	24 2a       	or	r2, r20
     1a0:	7f 2a       	or	r7, r31
     1a2:	12 23       	and	r17, r18
     1a4:	13 08       	sbc	r1, r3
     1a6:	64 62       	ori	r22, 0x24	; 36
     1a8:	36 49       	sbci	r19, 0x96	; 150
     1aa:	56 20       	and	r5, r6
     1ac:	50 00       	.word	0x0050	; ????
     1ae:	08 07       	cpc	r16, r24
     1b0:	03 00       	.word	0x0003	; ????
     1b2:	00 1c       	adc	r0, r0
     1b4:	22 41       	sbci	r18, 0x12	; 18
     1b6:	00 00       	nop
     1b8:	41 22       	and	r4, r17
     1ba:	1c 00       	.word	0x001c	; ????
     1bc:	2a 1c       	adc	r2, r10
     1be:	7f 1c       	adc	r7, r15
     1c0:	2a 08       	sbc	r2, r10
     1c2:	08 3e       	cpi	r16, 0xE8	; 232
     1c4:	08 08       	sbc	r0, r8
     1c6:	00 80       	ld	r0, Z
     1c8:	70 30       	cpi	r23, 0x00	; 0
     1ca:	00 08       	sbc	r0, r0
     1cc:	08 08       	sbc	r0, r8
     1ce:	08 08       	sbc	r0, r8
     1d0:	00 00       	nop
     1d2:	60 60       	ori	r22, 0x00	; 0
     1d4:	00 20       	and	r0, r0
     1d6:	10 08       	sbc	r1, r0
     1d8:	04 02       	muls	r16, r20
     1da:	3e 51       	subi	r19, 0x1E	; 30
     1dc:	49 45       	sbci	r20, 0x59	; 89
     1de:	3e 00       	.word	0x003e	; ????
     1e0:	42 7f       	andi	r20, 0xF2	; 242
     1e2:	40 00       	.word	0x0040	; ????
     1e4:	72 49       	sbci	r23, 0x92	; 146
     1e6:	49 49       	sbci	r20, 0x99	; 153
     1e8:	46 21       	and	r20, r6
     1ea:	41 49       	sbci	r20, 0x91	; 145
     1ec:	4d 33       	cpi	r20, 0x3D	; 61
     1ee:	18 14       	cp	r1, r8
     1f0:	12 7f       	andi	r17, 0xF2	; 242
     1f2:	10 27       	eor	r17, r16
     1f4:	45 45       	sbci	r20, 0x55	; 85
     1f6:	45 39       	cpi	r20, 0x95	; 149
     1f8:	3c 4a       	sbci	r19, 0xAC	; 172
     1fa:	49 49       	sbci	r20, 0x99	; 153
     1fc:	31 41       	sbci	r19, 0x11	; 17
     1fe:	21 11       	cpse	r18, r1
     200:	09 07       	cpc	r16, r25
     202:	36 49       	sbci	r19, 0x96	; 150
     204:	49 49       	sbci	r20, 0x99	; 153
     206:	36 46       	sbci	r19, 0x66	; 102
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	29 1e       	adc	r2, r25
     20c:	00 00       	nop
     20e:	14 00       	.word	0x0014	; ????
     210:	00 00       	nop
     212:	40 34       	cpi	r20, 0x40	; 64
     214:	00 00       	nop
     216:	00 08       	sbc	r0, r0
     218:	14 22       	and	r1, r20
     21a:	41 14       	cp	r4, r1
     21c:	14 14       	cp	r1, r4
     21e:	14 14       	cp	r1, r4
     220:	00 41       	sbci	r16, 0x10	; 16
     222:	22 14       	cp	r2, r2
     224:	08 02       	muls	r16, r24
     226:	01 59       	subi	r16, 0x91	; 145
     228:	09 06       	cpc	r0, r25
     22a:	3e 41       	sbci	r19, 0x1E	; 30
     22c:	5d 59       	subi	r21, 0x9D	; 157
     22e:	4e 7c       	andi	r20, 0xCE	; 206
     230:	12 11       	cpse	r17, r2
     232:	12 7c       	andi	r17, 0xC2	; 194
     234:	7f 49       	sbci	r23, 0x9F	; 159
     236:	49 49       	sbci	r20, 0x99	; 153
     238:	36 3e       	cpi	r19, 0xE6	; 230
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 22       	and	r4, r17
     23e:	7f 41       	sbci	r23, 0x1F	; 31
     240:	41 41       	sbci	r20, 0x11	; 17
     242:	3e 7f       	andi	r19, 0xFE	; 254
     244:	49 49       	sbci	r20, 0x99	; 153
     246:	49 41       	sbci	r20, 0x19	; 25
     248:	7f 09       	sbc	r23, r15
     24a:	09 09       	sbc	r16, r9
     24c:	01 3e       	cpi	r16, 0xE1	; 225
     24e:	41 41       	sbci	r20, 0x11	; 17
     250:	51 73       	andi	r21, 0x31	; 49
     252:	7f 08       	sbc	r7, r15
     254:	08 08       	sbc	r0, r8
     256:	7f 00       	.word	0x007f	; ????
     258:	41 7f       	andi	r20, 0xF1	; 241
     25a:	41 00       	.word	0x0041	; ????
     25c:	20 40       	sbci	r18, 0x00	; 0
     25e:	41 3f       	cpi	r20, 0xF1	; 241
     260:	01 7f       	andi	r16, 0xF1	; 241
     262:	08 14       	cp	r0, r8
     264:	22 41       	sbci	r18, 0x12	; 18
     266:	7f 40       	sbci	r23, 0x0F	; 15
     268:	40 40       	sbci	r20, 0x00	; 0
     26a:	40 7f       	andi	r20, 0xF0	; 240
     26c:	02 1c       	adc	r0, r2
     26e:	02 7f       	andi	r16, 0xF2	; 242
     270:	7f 04       	cpc	r7, r15
     272:	08 10       	cpse	r0, r8
     274:	7f 3e       	cpi	r23, 0xEF	; 239
     276:	41 41       	sbci	r20, 0x11	; 17
     278:	41 3e       	cpi	r20, 0xE1	; 225
     27a:	7f 09       	sbc	r23, r15
     27c:	09 09       	sbc	r16, r9
     27e:	06 3e       	cpi	r16, 0xE6	; 230
     280:	41 51       	subi	r20, 0x11	; 17
     282:	21 5e       	subi	r18, 0xE1	; 225
     284:	7f 09       	sbc	r23, r15
     286:	19 29       	or	r17, r9
     288:	46 26       	eor	r4, r22
     28a:	49 49       	sbci	r20, 0x99	; 153
     28c:	49 32       	cpi	r20, 0x29	; 41
     28e:	03 01       	movw	r0, r6
     290:	7f 01       	movw	r14, r30
     292:	03 3f       	cpi	r16, 0xF3	; 243
     294:	40 40       	sbci	r20, 0x00	; 0
     296:	40 3f       	cpi	r20, 0xF0	; 240
     298:	1f 20       	and	r1, r15
     29a:	40 20       	and	r4, r0
     29c:	1f 3f       	cpi	r17, 0xFF	; 255
     29e:	40 38       	cpi	r20, 0x80	; 128
     2a0:	40 3f       	cpi	r20, 0xF0	; 240
     2a2:	63 14       	cp	r6, r3
     2a4:	08 14       	cp	r0, r8
     2a6:	63 03       	mulsu	r22, r19
     2a8:	04 78       	andi	r16, 0x84	; 132
     2aa:	04 03       	mulsu	r16, r20
     2ac:	61 59       	subi	r22, 0x91	; 145
     2ae:	49 4d       	sbci	r20, 0xD9	; 217
     2b0:	43 00       	.word	0x0043	; ????
     2b2:	7f 41       	sbci	r23, 0x1F	; 31
     2b4:	41 41       	sbci	r20, 0x11	; 17
     2b6:	02 04       	cpc	r0, r2
     2b8:	08 10       	cpse	r0, r8
     2ba:	20 00       	.word	0x0020	; ????
     2bc:	41 41       	sbci	r20, 0x11	; 17
     2be:	41 7f       	andi	r20, 0xF1	; 241
     2c0:	04 02       	muls	r16, r20
     2c2:	01 02       	muls	r16, r17
     2c4:	04 40       	sbci	r16, 0x04	; 4
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	40 40       	sbci	r20, 0x00	; 0
     2ca:	00 03       	mulsu	r16, r16
     2cc:	07 08       	sbc	r0, r7
     2ce:	00 20       	and	r0, r0
     2d0:	54 54       	subi	r21, 0x44	; 68
     2d2:	78 40       	sbci	r23, 0x08	; 8
     2d4:	7f 28       	or	r7, r15
     2d6:	44 44       	sbci	r20, 0x44	; 68
     2d8:	38 38       	cpi	r19, 0x88	; 136
     2da:	44 44       	sbci	r20, 0x44	; 68
     2dc:	44 28       	or	r4, r4
     2de:	38 44       	sbci	r19, 0x48	; 72
     2e0:	44 28       	or	r4, r4
     2e2:	7f 38       	cpi	r23, 0x8F	; 143
     2e4:	54 54       	subi	r21, 0x44	; 68
     2e6:	54 18       	sub	r5, r4
     2e8:	00 08       	sbc	r0, r0
     2ea:	7e 09       	sbc	r23, r14
     2ec:	02 18       	sub	r0, r2
     2ee:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2f0:	9c 78       	andi	r25, 0x8C	; 140
     2f2:	7f 08       	sbc	r7, r15
     2f4:	04 04       	cpc	r0, r4
     2f6:	78 00       	.word	0x0078	; ????
     2f8:	44 7d       	andi	r20, 0xD4	; 212
     2fa:	40 00       	.word	0x0040	; ????
     2fc:	20 40       	sbci	r18, 0x00	; 0
     2fe:	40 3d       	cpi	r20, 0xD0	; 208
     300:	00 7f       	andi	r16, 0xF0	; 240
     302:	10 28       	or	r1, r0
     304:	44 00       	.word	0x0044	; ????
     306:	00 41       	sbci	r16, 0x10	; 16
     308:	7f 40       	sbci	r23, 0x0F	; 15
     30a:	00 7c       	andi	r16, 0xC0	; 192
     30c:	04 78       	andi	r16, 0x84	; 132
     30e:	04 78       	andi	r16, 0x84	; 132
     310:	7c 08       	sbc	r7, r12
     312:	04 04       	cpc	r0, r4
     314:	78 38       	cpi	r23, 0x88	; 136
     316:	44 44       	sbci	r20, 0x44	; 68
     318:	44 38       	cpi	r20, 0x84	; 132
     31a:	fc 18       	sub	r15, r12
     31c:	24 24       	eor	r2, r4
     31e:	18 18       	sub	r1, r8
     320:	24 24       	eor	r2, r4
     322:	18 fc       	.word	0xfc18	; ????
     324:	7c 08       	sbc	r7, r12
     326:	04 04       	cpc	r0, r4
     328:	08 48       	sbci	r16, 0x88	; 136
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	54 24       	eor	r5, r4
     32e:	04 04       	cpc	r0, r4
     330:	3f 44       	sbci	r19, 0x4F	; 79
     332:	24 3c       	cpi	r18, 0xC4	; 196
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	20 7c       	andi	r18, 0xC0	; 192
     338:	1c 20       	and	r1, r12
     33a:	40 20       	and	r4, r0
     33c:	1c 3c       	cpi	r17, 0xCC	; 204
     33e:	40 30       	cpi	r20, 0x00	; 0
     340:	40 3c       	cpi	r20, 0xC0	; 192
     342:	44 28       	or	r4, r4
     344:	10 28       	or	r1, r0
     346:	44 4c       	sbci	r20, 0xC4	; 196
     348:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7a76>
     34c:	44 64       	ori	r20, 0x44	; 68
     34e:	54 4c       	sbci	r21, 0xC4	; 196
     350:	44 00       	.word	0x0044	; ????
     352:	08 36       	cpi	r16, 0x68	; 104
     354:	41 00       	.word	0x0041	; ????
     356:	00 00       	nop
     358:	77 00       	.word	0x0077	; ????
     35a:	00 00       	nop
     35c:	41 36       	cpi	r20, 0x61	; 97
     35e:	08 00       	.word	0x0008	; ????
     360:	02 01       	movw	r0, r4
     362:	02 04       	cpc	r0, r2
     364:	02 3c       	cpi	r16, 0xC2	; 194
     366:	26 23       	and	r18, r22
     368:	26 3c       	cpi	r18, 0xC6	; 198
     36a:	1e a1       	ldd	r17, Y+38	; 0x26
     36c:	a1 61       	ori	r26, 0x11	; 17
     36e:	12 3a       	cpi	r17, 0xA2	; 162
     370:	40 40       	sbci	r20, 0x00	; 0
     372:	20 7a       	andi	r18, 0xA0	; 160
     374:	38 54       	subi	r19, 0x48	; 72
     376:	54 55       	subi	r21, 0x54	; 84
     378:	59 21       	and	r21, r9
     37a:	55 55       	subi	r21, 0x55	; 85
     37c:	79 41       	sbci	r23, 0x19	; 25
     37e:	22 54       	subi	r18, 0x42	; 66
     380:	54 78       	andi	r21, 0x84	; 132
     382:	42 21       	and	r20, r2
     384:	55 54       	subi	r21, 0x45	; 69
     386:	78 40       	sbci	r23, 0x08	; 8
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	55 79       	andi	r21, 0x95	; 149
     38c:	40 0c       	add	r4, r0
     38e:	1e 52       	subi	r17, 0x2E	; 46
     390:	72 12       	cpse	r7, r18
     392:	39 55       	subi	r19, 0x59	; 89
     394:	55 55       	subi	r21, 0x55	; 85
     396:	59 39       	cpi	r21, 0x99	; 153
     398:	54 54       	subi	r21, 0x44	; 68
     39a:	54 59       	subi	r21, 0x94	; 148
     39c:	39 55       	subi	r19, 0x59	; 89
     39e:	54 54       	subi	r21, 0x44	; 68
     3a0:	58 00       	.word	0x0058	; ????
     3a2:	00 45       	sbci	r16, 0x50	; 80
     3a4:	7c 41       	sbci	r23, 0x1C	; 28
     3a6:	00 02       	muls	r16, r16
     3a8:	45 7d       	andi	r20, 0xD5	; 213
     3aa:	42 00       	.word	0x0042	; ????
     3ac:	01 45       	sbci	r16, 0x51	; 81
     3ae:	7c 40       	sbci	r23, 0x0C	; 12
     3b0:	7d 12       	cpse	r7, r29
     3b2:	11 12       	cpse	r1, r17
     3b4:	7d f0       	brhs	.+30     	; 0x3d4 <__trampolines_end+0x2ea>
     3b6:	28 25       	eor	r18, r8
     3b8:	28 f0       	brcs	.+10     	; 0x3c4 <__trampolines_end+0x2da>
     3ba:	7c 54       	subi	r23, 0x4C	; 76
     3bc:	55 45       	sbci	r21, 0x55	; 85
     3be:	00 20       	and	r0, r0
     3c0:	54 54       	subi	r21, 0x44	; 68
     3c2:	7c 54       	subi	r23, 0x4C	; 76
     3c4:	7c 0a       	sbc	r7, r28
     3c6:	09 7f       	andi	r16, 0xF9	; 249
     3c8:	49 32       	cpi	r20, 0x29	; 41
     3ca:	49 49       	sbci	r20, 0x99	; 153
     3cc:	49 32       	cpi	r20, 0x29	; 41
     3ce:	3a 44       	sbci	r19, 0x4A	; 74
     3d0:	44 44       	sbci	r20, 0x44	; 68
     3d2:	3a 32       	cpi	r19, 0x2A	; 42
     3d4:	4a 48       	sbci	r20, 0x8A	; 138
     3d6:	48 30       	cpi	r20, 0x08	; 8
     3d8:	3a 41       	sbci	r19, 0x1A	; 26
     3da:	41 21       	and	r20, r1
     3dc:	7a 3a       	cpi	r23, 0xAA	; 170
     3de:	42 40       	sbci	r20, 0x02	; 2
     3e0:	20 78       	andi	r18, 0x80	; 128
     3e2:	00 9d       	mul	r16, r0
     3e4:	a0 a0       	ldd	r10, Z+32	; 0x20
     3e6:	7d 3d       	cpi	r23, 0xDD	; 221
     3e8:	42 42       	sbci	r20, 0x22	; 34
     3ea:	42 3d       	cpi	r20, 0xD2	; 210
     3ec:	3d 40       	sbci	r19, 0x0D	; 13
     3ee:	40 40       	sbci	r20, 0x00	; 0
     3f0:	3d 3c       	cpi	r19, 0xCD	; 205
     3f2:	24 ff       	sbrs	r18, 4
     3f4:	24 24       	eor	r2, r4
     3f6:	48 7e       	andi	r20, 0xE8	; 232
     3f8:	49 43       	sbci	r20, 0x39	; 57
     3fa:	66 2b       	or	r22, r22
     3fc:	2f fc       	.word	0xfc2f	; ????
     3fe:	2f 2b       	or	r18, r31
     400:	ff 09       	sbc	r31, r15
     402:	29 f6       	brne	.-118    	; 0x38e <__trampolines_end+0x2a4>
     404:	20 c0       	rjmp	.+64     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     406:	88 7e       	andi	r24, 0xE8	; 232
     408:	09 03       	fmul	r16, r17
     40a:	20 54       	subi	r18, 0x40	; 64
     40c:	54 79       	andi	r21, 0x94	; 148
     40e:	41 00       	.word	0x0041	; ????
     410:	00 44       	sbci	r16, 0x40	; 64
     412:	7d 41       	sbci	r23, 0x1D	; 29
     414:	30 48       	sbci	r19, 0x80	; 128
     416:	48 4a       	sbci	r20, 0xA8	; 168
     418:	32 38       	cpi	r19, 0x82	; 130
     41a:	40 40       	sbci	r20, 0x00	; 0
     41c:	22 7a       	andi	r18, 0xA2	; 162
     41e:	00 7a       	andi	r16, 0xA0	; 160
     420:	0a 0a       	sbc	r0, r26
     422:	72 7d       	andi	r23, 0xD2	; 210
     424:	0d 19       	sub	r16, r13
     426:	31 7d       	andi	r19, 0xD1	; 209
     428:	26 29       	or	r18, r6
     42a:	29 2f       	mov	r18, r25
     42c:	28 26       	eor	r2, r24
     42e:	29 29       	or	r18, r9
     430:	29 26       	eor	r2, r25
     432:	30 48       	sbci	r19, 0x80	; 128
     434:	4d 40       	sbci	r20, 0x0D	; 13
     436:	20 38       	cpi	r18, 0x80	; 128
     438:	08 08       	sbc	r0, r8
     43a:	08 08       	sbc	r0, r8
     43c:	08 08       	sbc	r0, r8
     43e:	08 08       	sbc	r0, r8
     440:	38 2f       	mov	r19, r24
     442:	10 c8       	rjmp	.-4064   	; 0xfffff464 <__eeprom_end+0xff7ef464>
     444:	ac ba       	out	0x1c, r10	; 28
     446:	2f 10       	cpse	r2, r15
     448:	28 34       	cpi	r18, 0x48	; 72
     44a:	fa 00       	.word	0x00fa	; ????
     44c:	00 7b       	andi	r16, 0xB0	; 176
     44e:	00 00       	nop
     450:	08 14       	cp	r0, r8
     452:	2a 14       	cp	r2, r10
     454:	22 22       	and	r2, r18
     456:	14 2a       	or	r1, r20
     458:	14 08       	sbc	r1, r4
     45a:	aa 00       	.word	0x00aa	; ????
     45c:	55 00       	.word	0x0055	; ????
     45e:	aa aa       	std	Y+50, r10	; 0x32
     460:	55 aa       	std	Z+53, r5	; 0x35
     462:	55 aa       	std	Z+53, r5	; 0x35
     464:	00 00       	nop
     466:	00 ff       	sbrs	r16, 0
     468:	00 10       	cpse	r0, r0
     46a:	10 10       	cpse	r1, r0
     46c:	ff 00       	.word	0x00ff	; ????
     46e:	14 14       	cp	r1, r4
     470:	14 ff       	sbrs	r17, 4
     472:	00 10       	cpse	r0, r0
     474:	10 ff       	sbrs	r17, 0
     476:	00 ff       	sbrs	r16, 0
     478:	10 10       	cpse	r1, r0
     47a:	f0 10       	cpse	r15, r0
     47c:	f0 14       	cp	r15, r0
     47e:	14 14       	cp	r1, r4
     480:	fc 00       	.word	0x00fc	; ????
     482:	14 14       	cp	r1, r4
     484:	f7 00       	.word	0x00f7	; ????
     486:	ff 00       	.word	0x00ff	; ????
     488:	00 ff       	sbrs	r16, 0
     48a:	00 ff       	sbrs	r16, 0
     48c:	14 14       	cp	r1, r4
     48e:	f4 04       	cpc	r15, r4
     490:	fc 14       	cp	r15, r12
     492:	14 17       	cp	r17, r20
     494:	10 1f       	adc	r17, r16
     496:	10 10       	cpse	r1, r0
     498:	1f 10       	cpse	r1, r15
     49a:	1f 14       	cp	r1, r15
     49c:	14 14       	cp	r1, r4
     49e:	1f 00       	.word	0x001f	; ????
     4a0:	10 10       	cpse	r1, r0
     4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	1f 10       	cpse	r1, r15
     4aa:	10 10       	cpse	r1, r0
     4ac:	10 1f       	adc	r17, r16
     4ae:	10 10       	cpse	r1, r0
     4b0:	10 10       	cpse	r1, r0
     4b2:	f0 10       	cpse	r15, r0
     4b4:	00 00       	nop
     4b6:	00 ff       	sbrs	r16, 0
     4b8:	10 10       	cpse	r1, r0
     4ba:	10 10       	cpse	r1, r0
     4bc:	10 10       	cpse	r1, r0
     4be:	10 10       	cpse	r1, r0
     4c0:	10 ff       	sbrs	r17, 0
     4c2:	10 00       	.word	0x0010	; ????
     4c4:	00 00       	nop
     4c6:	ff 14       	cp	r15, r15
     4c8:	00 00       	nop
     4ca:	ff 00       	.word	0x00ff	; ????
     4cc:	ff 00       	.word	0x00ff	; ????
     4ce:	00 1f       	adc	r16, r16
     4d0:	10 17       	cp	r17, r16
     4d2:	00 00       	nop
     4d4:	fc 04       	cpc	r15, r12
     4d6:	f4 14       	cp	r15, r4
     4d8:	14 17       	cp	r17, r20
     4da:	10 17       	cp	r17, r16
     4dc:	14 14       	cp	r1, r4
     4de:	f4 04       	cpc	r15, r4
     4e0:	f4 00       	.word	0x00f4	; ????
     4e2:	00 ff       	sbrs	r16, 0
     4e4:	00 f7       	brcc	.-64     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     4e6:	14 14       	cp	r1, r4
     4e8:	14 14       	cp	r1, r4
     4ea:	14 14       	cp	r1, r4
     4ec:	14 f7       	brge	.-60     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4ee:	00 f7       	brcc	.-64     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
     4f0:	14 14       	cp	r1, r4
     4f2:	14 17       	cp	r17, r20
     4f4:	14 10       	cpse	r1, r4
     4f6:	10 1f       	adc	r17, r16
     4f8:	10 1f       	adc	r17, r16
     4fa:	14 14       	cp	r1, r4
     4fc:	14 f4       	brge	.+4      	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
     4fe:	14 10       	cpse	r1, r4
     500:	10 f0       	brcs	.+4      	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
     502:	10 f0       	brcs	.+4      	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
     504:	00 00       	nop
     506:	1f 10       	cpse	r1, r15
     508:	1f 00       	.word	0x001f	; ????
     50a:	00 00       	nop
     50c:	1f 14       	cp	r1, r15
     50e:	00 00       	nop
     510:	00 fc       	sbrc	r0, 0
     512:	14 00       	.word	0x0014	; ????
     514:	00 f0       	brcs	.+0      	; 0x516 <__FUSE_REGION_LENGTH__+0x116>
     516:	10 f0       	brcs	.+4      	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
     518:	10 10       	cpse	r1, r0
     51a:	ff 10       	cpse	r15, r15
     51c:	ff 14       	cp	r15, r15
     51e:	14 14       	cp	r1, r4
     520:	ff 14       	cp	r15, r15
     522:	10 10       	cpse	r1, r0
     524:	10 1f       	adc	r17, r16
     526:	00 00       	nop
     528:	00 00       	nop
     52a:	f0 10       	cpse	r15, r0
     52c:	ff ff       	.word	0xffff	; ????
     52e:	ff ff       	.word	0xffff	; ????
     530:	ff f0       	brie	.+62     	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
     532:	f0 f0       	brcs	.+60     	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
     534:	f0 f0       	brcs	.+60     	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
     536:	ff ff       	.word	0xffff	; ????
     538:	ff 00       	.word	0x00ff	; ????
     53a:	00 00       	nop
     53c:	00 00       	nop
     53e:	ff ff       	.word	0xffff	; ????
     540:	0f 0f       	add	r16, r31
     542:	0f 0f       	add	r16, r31
     544:	0f 38       	cpi	r16, 0x8F	; 143
     546:	44 44       	sbci	r20, 0x44	; 68
     548:	38 44       	sbci	r19, 0x48	; 72
     54a:	fc 4a       	sbci	r31, 0xAC	; 172
     54c:	4a 4a       	sbci	r20, 0xAA	; 170
     54e:	34 7e       	andi	r19, 0xE4	; 228
     550:	02 02       	muls	r16, r18
     552:	06 06       	cpc	r0, r22
     554:	02 7e       	andi	r16, 0xE2	; 226
     556:	02 7e       	andi	r16, 0xE2	; 226
     558:	02 63       	ori	r16, 0x32	; 50
     55a:	55 49       	sbci	r21, 0x95	; 149
     55c:	41 63       	ori	r20, 0x31	; 49
     55e:	38 44       	sbci	r19, 0x48	; 72
     560:	44 3c       	cpi	r20, 0xC4	; 196
     562:	04 40       	sbci	r16, 0x04	; 4
     564:	7e 20       	and	r7, r14
     566:	1e 20       	and	r1, r14
     568:	06 02       	muls	r16, r22
     56a:	7e 02       	muls	r23, r30
     56c:	02 99       	sbic	0x00, 2	; 0
     56e:	a5 e7       	ldi	r26, 0x75	; 117
     570:	a5 99       	sbic	0x14, 5	; 20
     572:	1c 2a       	or	r1, r28
     574:	49 2a       	or	r4, r25
     576:	1c 4c       	sbci	r17, 0xCC	; 204
     578:	72 01       	movw	r14, r4
     57a:	72 4c       	sbci	r23, 0xC2	; 194
     57c:	30 4a       	sbci	r19, 0xA0	; 160
     57e:	4d 4d       	sbci	r20, 0xDD	; 221
     580:	30 30       	cpi	r19, 0x00	; 0
     582:	48 78       	andi	r20, 0x88	; 136
     584:	48 30       	cpi	r20, 0x08	; 8
     586:	bc 62       	ori	r27, 0x2C	; 44
     588:	5a 46       	sbci	r21, 0x6A	; 106
     58a:	3d 3e       	cpi	r19, 0xED	; 237
     58c:	49 49       	sbci	r20, 0x99	; 153
     58e:	49 00       	.word	0x0049	; ????
     590:	7e 01       	movw	r14, r28
     592:	01 01       	movw	r0, r2
     594:	7e 2a       	or	r7, r30
     596:	2a 2a       	or	r2, r26
     598:	2a 2a       	or	r2, r26
     59a:	44 44       	sbci	r20, 0x44	; 68
     59c:	5f 44       	sbci	r21, 0x4F	; 79
     59e:	44 40       	sbci	r20, 0x04	; 4
     5a0:	51 4a       	sbci	r21, 0xA1	; 161
     5a2:	44 40       	sbci	r20, 0x04	; 4
     5a4:	40 44       	sbci	r20, 0x40	; 64
     5a6:	4a 51       	subi	r20, 0x1A	; 26
     5a8:	40 00       	.word	0x0040	; ????
     5aa:	00 ff       	sbrs	r16, 0
     5ac:	01 03       	mulsu	r16, r17
     5ae:	e0 80       	ld	r14, Z
     5b0:	ff 00       	.word	0x00ff	; ????
     5b2:	00 08       	sbc	r0, r0
     5b4:	08 6b       	ori	r16, 0xB8	; 184
     5b6:	6b 08       	sbc	r6, r11
     5b8:	36 12       	cpse	r3, r22
     5ba:	36 24       	eor	r3, r6
     5bc:	36 06       	cpc	r3, r22
     5be:	0f 09       	sbc	r16, r15
     5c0:	0f 06       	cpc	r0, r31
     5c2:	00 00       	nop
     5c4:	18 18       	sub	r1, r8
     5c6:	00 00       	nop
     5c8:	00 10       	cpse	r0, r0
     5ca:	10 00       	.word	0x0010	; ????
     5cc:	30 40       	sbci	r19, 0x00	; 0
     5ce:	ff 01       	movw	r30, r30
     5d0:	01 00       	.word	0x0001	; ????
     5d2:	1f 01       	movw	r2, r30
     5d4:	01 1e       	adc	r0, r17
     5d6:	00 19       	sub	r16, r0
     5d8:	1d 17       	cp	r17, r29
     5da:	12 00       	.word	0x0012	; ????
     5dc:	3c 3c       	cpi	r19, 0xCC	; 204
     5de:	3c 3c       	cpi	r19, 0xCC	; 204
     5e0:	00 00       	nop
     5e2:	00 00       	nop
	...

000005e6 <__ctors_end>:
     5e6:	11 24       	eor	r1, r1
     5e8:	1f be       	out	0x3f, r1	; 63
     5ea:	cf ef       	ldi	r28, 0xFF	; 255
     5ec:	d8 e0       	ldi	r29, 0x08	; 8
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	cd bf       	out	0x3d, r28	; 61

000005f2 <__do_copy_data>:
     5f2:	11 e0       	ldi	r17, 0x01	; 1
     5f4:	a0 e0       	ldi	r26, 0x00	; 0
     5f6:	b1 e0       	ldi	r27, 0x01	; 1
     5f8:	e2 e8       	ldi	r30, 0x82	; 130
     5fa:	f1 e4       	ldi	r31, 0x41	; 65
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <__do_copy_data+0x10>
     5fe:	05 90       	lpm	r0, Z+
     600:	0d 92       	st	X+, r0
     602:	ae 37       	cpi	r26, 0x7E	; 126
     604:	b1 07       	cpc	r27, r17
     606:	d9 f7       	brne	.-10     	; 0x5fe <__do_copy_data+0xc>

00000608 <__do_clear_bss>:
     608:	22 e0       	ldi	r18, 0x02	; 2
     60a:	ae e7       	ldi	r26, 0x7E	; 126
     60c:	b1 e0       	ldi	r27, 0x01	; 1
     60e:	01 c0       	rjmp	.+2      	; 0x612 <.do_clear_bss_start>

00000610 <.do_clear_bss_loop>:
     610:	1d 92       	st	X+, r1

00000612 <.do_clear_bss_start>:
     612:	aa 31       	cpi	r26, 0x1A	; 26
     614:	b2 07       	cpc	r27, r18
     616:	e1 f7       	brne	.-8      	; 0x610 <.do_clear_bss_loop>
     618:	0e 94 4a 19 	call	0x3294	; 0x3294 <main>
     61c:	0c 94 bf 20 	jmp	0x417e	; 0x417e <_exit>

00000620 <__bad_interrupt>:
     620:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000624 <__vector_11>:
void DPS310_init(uint8_t acc);
uint32_t DPS310_get_sc_temp(uint8_t oversampling);
long DPS310_get_temp(uint8_t oversampling);
double DPS310_get_pres(uint8_t t_ovrs, uint8_t p_ovrs);
ISR (TIMER1_COMPA_vect)
{
     624:	1f 92       	push	r1
     626:	1f b6       	in	r1, 0x3f	; 63
     628:	1f 92       	push	r1
     62a:	11 24       	eor	r1, r1
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
	ms10++;
     630:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ms10>
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ms10>
	if(entprell != 0)entprell--;
     63a:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <entprell>
     63e:	99 23       	and	r25, r25
     640:	19 f0       	breq	.+6      	; 0x648 <__vector_11+0x24>
     642:	91 50       	subi	r25, 0x01	; 1
     644:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <entprell>
	if(ms10==10)	//10ms
     648:	8a 30       	cpi	r24, 0x0A	; 10
     64a:	39 f4       	brne	.+14     	; 0x65a <__vector_11+0x36>
     64c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ms100>
	{
		ms10=0;
     650:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <ms10>
		ms100++;
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ms100>
		
	}
    if(ms100==10)	//100ms
     65a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ms100>
     65e:	8a 30       	cpi	r24, 0x0A	; 10
     660:	51 f4       	brne	.+20     	; 0x676 <__vector_11+0x52>
     662:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <sec>
	{
		ms100=0;
     666:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <ms100>
		sec++;
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <sec>
		messung=1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <messung>
	}
	if(sec==60)	//Minute
     676:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <sec>
     67a:	8c 33       	cpi	r24, 0x3C	; 60
     67c:	39 f4       	brne	.+14     	; 0x68c <__vector_11+0x68>
	{
		sec=0;
     67e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <sec>
		min++;
     682:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <min>
		
	}
}
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	1f 90       	pop	r1
     692:	1f be       	out	0x3f, r1	; 63
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <graph>:
long calcalt(double press, uint32_t pressealevel);

uint16_t vor_komma(uint32_t value);
uint8_t nach_komma(uint32_t value);
long graph(uint16_t value)
{
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	cc 55       	subi	r28, 0x5C	; 92
     6aa:	d2 40       	sbci	r29, 0x02	; 2
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	7c 01       	movw	r14, r24
	static uint16_t val_max_old=1;		//Position of last max in array
	static uint16_t val_min_old=1;		//Position of last min in array
	static uint8_t label_offset_x=20; //horiz offset to min/max label
	static uint8_t label_offset_y=20; //vertical offset to min/max label
	
	ili9341_drawLine(1, posy_min, 300, posy_min,GREEN);
     6b8:	00 ee       	ldi	r16, 0xE0	; 224
     6ba:	17 e0       	ldi	r17, 0x07	; 7
     6bc:	24 e6       	ldi	r18, 0x64	; 100
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4c e2       	ldi	r20, 0x2C	; 44
     6c2:	51 e0       	ldi	r21, 0x01	; 1
     6c4:	64 e6       	ldi	r22, 0x64	; 100
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	ili9341_drawLine(1, posy_max, 300, posy_max,GREEN);
     6d0:	28 ec       	ldi	r18, 0xC8	; 200
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	4c e2       	ldi	r20, 0x2C	; 44
     6d6:	51 e0       	ldi	r21, 0x01	; 1
     6d8:	68 ec       	ldi	r22, 0xC8	; 200
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	posy_start=(((posy_max-posy_min)/2)+posy_min);

	
	if(posx != posx_max)	//graph still growing to the right
     6e4:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <posx.2239>
     6e8:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <posx.2239+0x1>
     6ec:	26 3e       	cpi	r18, 0xE6	; 230
     6ee:	31 05       	cpc	r19, r1
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <graph+0x5c>
     6f2:	22 c2       	rjmp	.+1092   	; 0xb38 <__stack+0x239>
	{
		posx++;
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	30 93 b4 01 	sts	0x01B4, r19	; 0x8001b4 <posx.2239+0x1>
     6fc:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <posx.2239>
		if(posx==1)
     700:	21 30       	cpi	r18, 0x01	; 1
     702:	31 05       	cpc	r19, r1
     704:	79 f5       	brne	.+94     	; 0x764 <graph+0xcc>
     706:	40 91 af 01 	lds	r20, 0x01AF	; 0x8001af <corr.2240>
     70a:	50 91 b0 01 	lds	r21, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     70e:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <corr.2240+0x2>
     712:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <corr.2240+0x3>
     716:	c7 01       	movw	r24, r14
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	84 1b       	sub	r24, r20
     71e:	95 0b       	sbc	r25, r21
     720:	a6 0b       	sbc	r26, r22
     722:	b7 0b       	sbc	r27, r23
     724:	85 39       	cpi	r24, 0x95	; 149
     726:	91 05       	cpc	r25, r1
     728:	a1 05       	cpc	r26, r1
     72a:	b1 05       	cpc	r27, r1
     72c:	0c f4       	brge	.+2      	; 0x730 <graph+0x98>
     72e:	b8 c1       	rjmp	.+880    	; 0xaa0 <__stack+0x1a1>
     730:	85 59       	subi	r24, 0x95	; 149
     732:	91 09       	sbc	r25, r1
     734:	a1 09       	sbc	r26, r1
     736:	b1 09       	sbc	r27, r1
     738:	84 0f       	add	r24, r20
     73a:	95 1f       	adc	r25, r21
     73c:	a6 1f       	adc	r26, r22
     73e:	b7 1f       	adc	r27, r23
     740:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <corr.2240>
     744:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <corr.2240+0x1>
     748:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <corr.2240+0x2>
     74c:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <corr.2240+0x3>
		{
			while((value-corr) >= posy_start)corr++;//move 1.point of graph to start position
			val_min=1;//set first min in array
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <val_min.2247+0x1>
     758:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <val_min.2247>
			val_max=1;//set first max in array
     75c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <val_max.2248+0x1>
     760:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <val_max.2248>
		}
		store[posx]= value;	//store value in array
     764:	f9 01       	movw	r30, r18
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	4c 0f       	add	r20, r28
     770:	5d 1f       	adc	r21, r29
     772:	e4 0f       	add	r30, r20
     774:	f5 1f       	adc	r31, r21
     776:	f1 82       	std	Z+1, r15	; 0x01
     778:	e0 82       	st	Z, r14
		
		if(store[val_max] > value)
     77a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <val_max.2248>
     77e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <val_max.2248+0x1>
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	e4 0f       	add	r30, r20
     788:	f5 1f       	adc	r31, r21
     78a:	80 81       	ld	r24, Z
     78c:	91 81       	ldd	r25, Z+1	; 0x01
     78e:	e8 16       	cp	r14, r24
     790:	f9 06       	cpc	r15, r25
     792:	08 f0       	brcs	.+2      	; 0x796 <graph+0xfe>
     794:	89 c1       	rjmp	.+786    	; 0xaa8 <__stack+0x1a9>
		{
			val_max=posx;//set position of new max
     796:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <val_max.2248+0x1>
     79a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <val_max.2248>
		}else if(store[val_min] < value)val_min=posx;//set position of new min
		
		for(xx=1;xx<posx+1;xx++)	//print used part of array
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <xx.2245+0x1>
     7a6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <xx.2245>
     7aa:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <xx.2245>
     7ae:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <xx.2245+0x1>
     7b2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <posx.2239>
     7b6:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <posx.2239+0x1>
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	48 17       	cp	r20, r24
     7be:	59 07       	cpc	r21, r25
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <graph+0x12c>
     7c2:	89 c1       	rjmp	.+786    	; 0xad6 <__stack+0x1d7>
			if(xx!=posx_max)ili9341_drawLine(xx, store[xx+1]-corr, xx+1, store[xx+2]-corr, YELLOW);	//dras new graph
		}
		
		
	}
if((val_min_old != val_min)||(val_max_old != val_max))
     7c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     7cc:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <val_min_old.2250>
     7d0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <val_min_old.2250+0x1>
     7d4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <val_min.2247>
     7d8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <val_min.2247+0x1>
     7dc:	42 17       	cp	r20, r18
     7de:	53 07       	cpc	r21, r19
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <graph+0x14c>
     7e2:	63 c2       	rjmp	.+1222   	; 0xcaa <__stack+0x3ab>
{
	//clear old pointer 
	ili9341_drawLine(val_max_old+3, store[val_max_old]-corr-3, val_max_old+label_offset_x, store[val_max_old]-corr-label_offset_y, BLACK);// draw pointer to val_max
     7e4:	fc 01       	movw	r30, r24
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	a1 e0       	ldi	r26, 0x01	; 1
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	ac 0f       	add	r26, r28
     7f0:	bd 1f       	adc	r27, r29
     7f2:	ea 0f       	add	r30, r26
     7f4:	fb 1f       	adc	r31, r27
     7f6:	60 81       	ld	r22, Z
     7f8:	71 81       	ldd	r23, Z+1	; 0x01
     7fa:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     7fe:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     802:	62 1b       	sub	r22, r18
     804:	73 0b       	sbc	r23, r19
     806:	9b 01       	movw	r18, r22
     808:	24 51       	subi	r18, 0x14	; 20
     80a:	31 09       	sbc	r19, r1
     80c:	ac 01       	movw	r20, r24
     80e:	4c 5e       	subi	r20, 0xEC	; 236
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	63 50       	subi	r22, 0x03	; 3
     814:	71 09       	sbc	r23, r1
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	00 e0       	ldi	r16, 0x00	; 0
     81a:	03 96       	adiw	r24, 0x03	; 3
     81c:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	ili9341_drawLine(val_min_old+3, store[val_min_old]-corr+3, val_min_old+label_offset_x, store[val_min_old]-corr+label_offset_y, BLACK);// draw pointer to val_min
     820:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val_min_old.2250>
     824:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val_min_old.2250+0x1>
     828:	fc 01       	movw	r30, r24
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	21 e0       	ldi	r18, 0x01	; 1
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	2c 0f       	add	r18, r28
     834:	3d 1f       	adc	r19, r29
     836:	e2 0f       	add	r30, r18
     838:	f3 1f       	adc	r31, r19
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     842:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     846:	62 1b       	sub	r22, r18
     848:	73 0b       	sbc	r23, r19
     84a:	9b 01       	movw	r18, r22
     84c:	2c 5e       	subi	r18, 0xEC	; 236
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	ac 01       	movw	r20, r24
     852:	4c 5e       	subi	r20, 0xEC	; 236
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	6d 5f       	subi	r22, 0xFD	; 253
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	03 96       	adiw	r24, 0x03	; 3
     85c:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	//clear old min/max label
	ili9341_settextcolour(BLACK,BLACK);
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <ili9341_settextcolour>
	ili9341_setcursor(val_min_old+label_offset_x, store[val_min_old]-corr+label_offset_y);
     86c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val_min_old.2250>
     870:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val_min_old.2250+0x1>
     874:	fc 01       	movw	r30, r24
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	4c 0f       	add	r20, r28
     880:	5d 1f       	adc	r21, r29
     882:	e4 0f       	add	r30, r20
     884:	f5 1f       	adc	r31, r21
     886:	60 81       	ld	r22, Z
     888:	71 81       	ldd	r23, Z+1	; 0x01
     88a:	6c 5e       	subi	r22, 0xEC	; 236
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     892:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     896:	62 1b       	sub	r22, r18
     898:	73 0b       	sbc	r23, r19
     89a:	44 96       	adiw	r24, 0x14	; 20
     89c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("%d", store[val_min_old]);
     8a0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <val_min_old.2250>
     8a4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <val_min_old.2250+0x1>
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	6c 0f       	add	r22, r28
     8b2:	7d 1f       	adc	r23, r29
     8b4:	e6 0f       	add	r30, r22
     8b6:	f7 1f       	adc	r31, r23
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	8f 93       	push	r24
     8bc:	80 81       	ld	r24, Z
     8be:	8f 93       	push	r24
     8c0:	6a e3       	ldi	r22, 0x3A	; 58
     8c2:	e6 2e       	mov	r14, r22
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	f6 2e       	mov	r15, r22
     8c8:	ff 92       	push	r15
     8ca:	ef 92       	push	r14
     8cc:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
	ili9341_setcursor(val_max_old+label_offset_x, store[val_max_old]-corr-label_offset_y);
     8d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     8d8:	fc 01       	movw	r30, r24
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	a1 e0       	ldi	r26, 0x01	; 1
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	ac 0f       	add	r26, r28
     8e4:	bd 1f       	adc	r27, r29
     8e6:	ea 0f       	add	r30, r26
     8e8:	fb 1f       	adc	r31, r27
     8ea:	60 81       	ld	r22, Z
     8ec:	71 81       	ldd	r23, Z+1	; 0x01
     8ee:	64 51       	subi	r22, 0x14	; 20
     8f0:	71 09       	sbc	r23, r1
     8f2:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     8f6:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     8fa:	62 1b       	sub	r22, r18
     8fc:	73 0b       	sbc	r23, r19
     8fe:	44 96       	adiw	r24, 0x14	; 20
     900:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("%d", store[val_max_old]);
     904:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     908:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	2c 0f       	add	r18, r28
     916:	3d 1f       	adc	r19, r29
     918:	e2 0f       	add	r30, r18
     91a:	f3 1f       	adc	r31, r19
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	8f 93       	push	r24
     920:	80 81       	ld	r24, Z
     922:	8f 93       	push	r24
     924:	ff 92       	push	r15
     926:	ef 92       	push	r14
     928:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
	//draw new pointer
	ili9341_drawLine(val_max+3, store[val_max]-corr-3, val_max+label_offset_x, store[val_max]-corr-label_offset_y, YELLOW);// draw pointer to val_max
     92c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <val_max.2248>
     930:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <val_max.2248+0x1>
     934:	fc 01       	movw	r30, r24
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	4c 0f       	add	r20, r28
     940:	5d 1f       	adc	r21, r29
     942:	e4 0f       	add	r30, r20
     944:	f5 1f       	adc	r31, r21
     946:	60 81       	ld	r22, Z
     948:	71 81       	ldd	r23, Z+1	; 0x01
     94a:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     94e:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     952:	62 1b       	sub	r22, r18
     954:	73 0b       	sbc	r23, r19
     956:	9b 01       	movw	r18, r22
     958:	24 51       	subi	r18, 0x14	; 20
     95a:	31 09       	sbc	r19, r1
     95c:	ac 01       	movw	r20, r24
     95e:	4c 5e       	subi	r20, 0xEC	; 236
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	63 50       	subi	r22, 0x03	; 3
     964:	71 09       	sbc	r23, r1
     966:	00 ee       	ldi	r16, 0xE0	; 224
     968:	1f ef       	ldi	r17, 0xFF	; 255
     96a:	03 96       	adiw	r24, 0x03	; 3
     96c:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	ili9341_drawLine(val_min+3, store[val_min]-corr+3, val_min+label_offset_x, store[val_min]-corr+label_offset_y, YELLOW);// draw pointer to val_min
     970:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <val_min.2247>
     974:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <val_min.2247+0x1>
     978:	fc 01       	movw	r30, r24
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	6c 0f       	add	r22, r28
     984:	7d 1f       	adc	r23, r29
     986:	e6 0f       	add	r30, r22
     988:	f7 1f       	adc	r31, r23
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     992:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     996:	62 1b       	sub	r22, r18
     998:	73 0b       	sbc	r23, r19
     99a:	9b 01       	movw	r18, r22
     99c:	2c 5e       	subi	r18, 0xEC	; 236
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	ac 01       	movw	r20, r24
     9a2:	4c 5e       	subi	r20, 0xEC	; 236
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	6d 5f       	subi	r22, 0xFD	; 253
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	03 96       	adiw	r24, 0x03	; 3
     9ac:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
	//draw new min/max label
	ili9341_settextcolour(YELLOW,BLACK);
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 ee       	ldi	r24, 0xE0	; 224
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <ili9341_settextcolour>
	ili9341_setcursor(val_min+label_offset_x, store[val_min]-corr+label_offset_y);
     9bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <val_min.2247>
     9c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <val_min.2247+0x1>
     9c4:	fc 01       	movw	r30, r24
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	a1 e0       	ldi	r26, 0x01	; 1
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	ac 0f       	add	r26, r28
     9d0:	bd 1f       	adc	r27, r29
     9d2:	ea 0f       	add	r30, r26
     9d4:	fb 1f       	adc	r31, r27
     9d6:	60 81       	ld	r22, Z
     9d8:	71 81       	ldd	r23, Z+1	; 0x01
     9da:	6c 5e       	subi	r22, 0xEC	; 236
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     9e2:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     9e6:	62 1b       	sub	r22, r18
     9e8:	73 0b       	sbc	r23, r19
     9ea:	44 96       	adiw	r24, 0x14	; 20
     9ec:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("%d", store[val_min]);
     9f0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <val_min.2247>
     9f4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <val_min.2247+0x1>
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	2c 0f       	add	r18, r28
     a02:	3d 1f       	adc	r19, r29
     a04:	e2 0f       	add	r30, r18
     a06:	f3 1f       	adc	r31, r19
     a08:	81 81       	ldd	r24, Z+1	; 0x01
     a0a:	8f 93       	push	r24
     a0c:	80 81       	ld	r24, Z
     a0e:	8f 93       	push	r24
     a10:	ff 92       	push	r15
     a12:	ef 92       	push	r14
     a14:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
	ili9341_setcursor(val_max+label_offset_x, store[val_max]-corr-label_offset_y);
     a18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <val_max.2248>
     a1c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <val_max.2248+0x1>
     a20:	fc 01       	movw	r30, r24
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	41 e0       	ldi	r20, 0x01	; 1
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	4c 0f       	add	r20, r28
     a2c:	5d 1f       	adc	r21, r29
     a2e:	e4 0f       	add	r30, r20
     a30:	f5 1f       	adc	r31, r21
     a32:	60 81       	ld	r22, Z
     a34:	71 81       	ldd	r23, Z+1	; 0x01
     a36:	64 51       	subi	r22, 0x14	; 20
     a38:	71 09       	sbc	r23, r1
     a3a:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     a3e:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     a42:	62 1b       	sub	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	44 96       	adiw	r24, 0x14	; 20
     a48:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("%d", store[val_max]);
     a4c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <val_max.2248>
     a50:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <val_max.2248+0x1>
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	6c 0f       	add	r22, r28
     a5e:	7d 1f       	adc	r23, r29
     a60:	e6 0f       	add	r30, r22
     a62:	f7 1f       	adc	r31, r23
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	8f 93       	push	r24
     a68:	80 81       	ld	r24, Z
     a6a:	8f 93       	push	r24
     a6c:	ff 92       	push	r15
     a6e:	ef 92       	push	r14
     a70:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
	val_max_old=val_max;
     a74:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <val_max.2248>
     a78:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <val_max.2248+0x1>
     a7c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     a80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	val_min_old=val_min;
     a84:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <val_min.2247>
     a88:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <val_min.2247+0x1>
     a8c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val_min_old.2250+0x1>
     a90:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val_min_old.2250>
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	0d c1       	rjmp	.+538    	; 0xcba <__stack+0x3bb>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	dc 01       	movw	r26, r24
     aa6:	48 ce       	rjmp	.-880    	; 0x738 <graph+0xa0>
		}else if(store[val_min] < value)val_min=posx;//set position of new min
     aa8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <val_min.2247>
     aac:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <val_min.2247+0x1>
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	6c 0f       	add	r22, r28
     aba:	7d 1f       	adc	r23, r29
     abc:	e6 0f       	add	r30, r22
     abe:	f7 1f       	adc	r31, r23
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	8e 15       	cp	r24, r14
     ac6:	9f 05       	cpc	r25, r15
     ac8:	08 f0       	brcs	.+2      	; 0xacc <__stack+0x1cd>
     aca:	69 ce       	rjmp	.-814    	; 0x79e <graph+0x106>
     acc:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <val_min.2247+0x1>
     ad0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <val_min.2247>
     ad4:	64 ce       	rjmp	.-824    	; 0x79e <graph+0x106>
			if(xx==1)store[0]=store[1];//brings starting point close to first value
     ad6:	41 30       	cpi	r20, 0x01	; 1
     ad8:	51 05       	cpc	r21, r1
     ada:	21 f4       	brne	.+8      	; 0xae4 <__stack+0x1e5>
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	9a 83       	std	Y+2, r25	; 0x02
     ae2:	89 83       	std	Y+1, r24	; 0x01
			ili9341_drawLine(xx-1, store[xx-1]-corr, xx, store[xx]-corr, YELLOW);// draw graph
     ae4:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <corr.2240>
     ae8:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     aec:	ca 01       	movw	r24, r20
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	fa 01       	movw	r30, r20
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	2c 0f       	add	r18, r28
     afc:	3d 1f       	adc	r19, r29
     afe:	e2 0f       	add	r30, r18
     b00:	f3 1f       	adc	r31, r19
     b02:	20 81       	ld	r18, Z
     b04:	31 81       	ldd	r19, Z+1	; 0x01
     b06:	2a 1b       	sub	r18, r26
     b08:	3b 0b       	sbc	r19, r27
     b0a:	fc 01       	movw	r30, r24
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	6c 0f       	add	r22, r28
     b16:	7d 1f       	adc	r23, r29
     b18:	e6 0f       	add	r30, r22
     b1a:	f7 1f       	adc	r31, r23
     b1c:	60 81       	ld	r22, Z
     b1e:	71 81       	ldd	r23, Z+1	; 0x01
     b20:	6a 1b       	sub	r22, r26
     b22:	7b 0b       	sbc	r23, r27
     b24:	00 ee       	ldi	r16, 0xE0	; 224
     b26:	1f ef       	ldi	r17, 0xFF	; 255
     b28:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
		for(xx=1;xx<posx+1;xx++)	//print used part of array
     b2c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <xx.2245>
     b30:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <xx.2245+0x1>
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	35 ce       	rjmp	.-918    	; 0x7a2 <graph+0x10a>
		for(xx=0;xx<posx_max+1;xx++)//clear last graph
     b38:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <xx.2245+0x1>
     b3c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <xx.2245>
     b40:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <xx.2245>
     b44:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <xx.2245+0x1>
     b48:	87 3e       	cpi	r24, 0xE7	; 231
     b4a:	91 05       	cpc	r25, r1
     b4c:	08 f0       	brcs	.+2      	; 0xb50 <__stack+0x251>
     b4e:	3a ce       	rjmp	.-908    	; 0x7c4 <graph+0x12c>
			ili9341_drawLine(xx, store[xx]-corr, xx+1, store[xx+1]-corr, BLACK);
     b50:	ac 01       	movw	r20, r24
     b52:	4f 5f       	subi	r20, 0xFF	; 255
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <corr.2240>
     b5a:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     b5e:	fa 01       	movw	r30, r20
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	21 e0       	ldi	r18, 0x01	; 1
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	2c 0f       	add	r18, r28
     b6a:	3d 1f       	adc	r19, r29
     b6c:	e2 0f       	add	r30, r18
     b6e:	f3 1f       	adc	r31, r19
     b70:	20 81       	ld	r18, Z
     b72:	31 81       	ldd	r19, Z+1	; 0x01
     b74:	2a 1b       	sub	r18, r26
     b76:	3b 0b       	sbc	r19, r27
     b78:	fc 01       	movw	r30, r24
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	6c 0f       	add	r22, r28
     b84:	7d 1f       	adc	r23, r29
     b86:	e6 0f       	add	r30, r22
     b88:	f7 1f       	adc	r31, r23
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	6a 1b       	sub	r22, r26
     b90:	7b 0b       	sbc	r23, r27
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
			if(xx!=posx_max)store[xx]=store[xx+1];	//move values in array to the left
     b9a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <xx.2245>
     b9e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <xx.2245+0x1>
     ba2:	86 3e       	cpi	r24, 0xE6	; 230
     ba4:	91 05       	cpc	r25, r1
     ba6:	99 f0       	breq	.+38     	; 0xbce <__stack+0x2cf>
     ba8:	fc 01       	movw	r30, r24
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	a1 e0       	ldi	r26, 0x01	; 1
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ac 0f       	add	r26, r28
     bb6:	bd 1f       	adc	r27, r29
     bb8:	ea 0f       	add	r30, r26
     bba:	fb 1f       	adc	r31, r27
     bbc:	20 81       	ld	r18, Z
     bbe:	31 81       	ldd	r19, Z+1	; 0x01
     bc0:	fc 01       	movw	r30, r24
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	ea 0f       	add	r30, r26
     bc8:	fb 1f       	adc	r31, r27
     bca:	31 83       	std	Z+1, r19	; 0x01
     bcc:	20 83       	st	Z, r18
			store[posx_max]= value;	//store new value at last position in arrray
     bce:	c3 53       	subi	r28, 0x33	; 51
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	f9 82       	std	Y+1, r15	; 0x01
     bd4:	e8 82       	st	Y, r14
     bd6:	cd 5c       	subi	r28, 0xCD	; 205
     bd8:	d1 40       	sbci	r29, 0x01	; 1
			if(store[val_max] > value)
     bda:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <val_max.2248>
     bde:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <val_max.2248+0x1>
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	2c 0f       	add	r18, r28
     bec:	3d 1f       	adc	r19, r29
     bee:	e2 0f       	add	r30, r18
     bf0:	f3 1f       	adc	r31, r19
     bf2:	20 81       	ld	r18, Z
     bf4:	31 81       	ldd	r19, Z+1	; 0x01
     bf6:	e2 16       	cp	r14, r18
     bf8:	f3 06       	cpc	r15, r19
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <__stack+0x2ff>
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <__stack+0x37d>
				val_max=xx;//set position of new max
     bfe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <val_max.2248+0x1>
     c02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <val_max.2248>
			store[posx_max+1]=value;
     c06:	c1 53       	subi	r28, 0x31	; 49
     c08:	de 4f       	sbci	r29, 0xFE	; 254
     c0a:	f9 82       	std	Y+1, r15	; 0x01
     c0c:	e8 82       	st	Y, r14
     c0e:	cf 5c       	subi	r28, 0xCF	; 207
     c10:	d1 40       	sbci	r29, 0x01	; 1
			store[posx_max+2]=value;
     c12:	cf 52       	subi	r28, 0x2F	; 47
     c14:	de 4f       	sbci	r29, 0xFE	; 254
     c16:	f9 82       	std	Y+1, r15	; 0x01
     c18:	e8 82       	st	Y, r14
     c1a:	c1 5d       	subi	r28, 0xD1	; 209
     c1c:	d1 40       	sbci	r29, 0x01	; 1
			if(xx!=posx_max)ili9341_drawLine(xx, store[xx+1]-corr, xx+1, store[xx+2]-corr, YELLOW);	//dras new graph
     c1e:	86 3e       	cpi	r24, 0xE6	; 230
     c20:	91 05       	cpc	r25, r1
     c22:	11 f1       	breq	.+68     	; 0xc68 <__stack+0x369>
     c24:	ac 01       	movw	r20, r24
     c26:	4f 5f       	subi	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <corr.2240>
     c2e:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     c32:	fc 01       	movw	r30, r24
     c34:	32 96       	adiw	r30, 0x02	; 2
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	6c 0f       	add	r22, r28
     c40:	7d 1f       	adc	r23, r29
     c42:	e6 0f       	add	r30, r22
     c44:	f7 1f       	adc	r31, r23
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	2a 1b       	sub	r18, r26
     c4c:	3b 0b       	sbc	r19, r27
     c4e:	fa 01       	movw	r30, r20
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e6 0f       	add	r30, r22
     c56:	f7 1f       	adc	r31, r23
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	6a 1b       	sub	r22, r26
     c5e:	7b 0b       	sbc	r23, r27
     c60:	00 ee       	ldi	r16, 0xE0	; 224
     c62:	1f ef       	ldi	r17, 0xFF	; 255
     c64:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
		for(xx=0;xx<posx_max+1;xx++)//clear last graph
     c68:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <xx.2245>
     c6c:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <xx.2245+0x1>
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <xx.2245+0x1>
     c76:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <xx.2245>
     c7a:	62 cf       	rjmp	.-316    	; 0xb40 <__stack+0x241>
			}else if(store[val_min] < value)val_min=xx;//set position of new min
     c7c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <val_min.2247>
     c80:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <val_min.2247+0x1>
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	4c 0f       	add	r20, r28
     c8e:	5d 1f       	adc	r21, r29
     c90:	e4 0f       	add	r30, r20
     c92:	f5 1f       	adc	r31, r21
     c94:	20 81       	ld	r18, Z
     c96:	31 81       	ldd	r19, Z+1	; 0x01
     c98:	2e 15       	cp	r18, r14
     c9a:	3f 05       	cpc	r19, r15
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <__stack+0x3a1>
     c9e:	b3 cf       	rjmp	.-154    	; 0xc06 <__stack+0x307>
     ca0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <val_min.2247+0x1>
     ca4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <val_min.2247>
     ca8:	ae cf       	rjmp	.-164    	; 0xc06 <__stack+0x307>
if((val_min_old != val_min)||(val_max_old != val_max))
     caa:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <val_max.2248>
     cae:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <val_max.2248+0x1>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	09 f0       	breq	.+2      	; 0xcba <__stack+0x3bb>
     cb8:	95 cd       	rjmp	.-1238   	; 0x7e4 <graph+0x14c>
	
	
}
		
		ili9341_setcursor(10,50);
     cba:	62 e3       	ldi	r22, 0x32	; 50
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("Pos: %d val: %d", store[val_max], store[posx_max+2]);
     cc6:	ce 52       	subi	r28, 0x2E	; 46
     cc8:	de 4f       	sbci	r29, 0xFE	; 254
     cca:	88 81       	ld	r24, Y
     ccc:	c2 5d       	subi	r28, 0xD2	; 210
     cce:	d1 40       	sbci	r29, 0x01	; 1
     cd0:	8f 93       	push	r24
     cd2:	cf 52       	subi	r28, 0x2F	; 47
     cd4:	de 4f       	sbci	r29, 0xFE	; 254
     cd6:	88 81       	ld	r24, Y
     cd8:	c1 5d       	subi	r28, 0xD1	; 209
     cda:	d1 40       	sbci	r29, 0x01	; 1
     cdc:	8f 93       	push	r24
     cde:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <val_max.2248>
     ce2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <val_max.2248+0x1>
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	a1 e0       	ldi	r26, 0x01	; 1
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ac 0f       	add	r26, r28
     cf0:	bd 1f       	adc	r27, r29
     cf2:	ea 0f       	add	r30, r26
     cf4:	fb 1f       	adc	r31, r27
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	8f 93       	push	r24
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 93       	push	r24
     cfe:	8d e2       	ldi	r24, 0x2D	; 45
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
		ili9341_setcursor(10,20);
     d0a:	64 e1       	ldi	r22, 0x14	; 20
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	8a e0       	ldi	r24, 0x0A	; 10
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	printf("%d", val_max);
     d16:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <val_max.2248+0x1>
     d1a:	8f 93       	push	r24
     d1c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <val_max.2248>
     d20:	8f 93       	push	r24
     d22:	8a e3       	ldi	r24, 0x3A	; 58
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>

	
	
	
	
	return corr;
     d2e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <corr.2240>
     d32:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <corr.2240+0x1>
     d36:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <corr.2240+0x2>
     d3a:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <corr.2240+0x3>
     d3e:	c7 5a       	subi	r28, 0xA7	; 167
     d40:	dd 4f       	sbci	r29, 0xFD	; 253
     d42:	28 83       	st	Y, r18
     d44:	39 83       	std	Y+1, r19	; 0x01
     d46:	4a 83       	std	Y+2, r20	; 0x02
     d48:	5b 83       	std	Y+3, r21	; 0x03
     d4a:	c9 55       	subi	r28, 0x59	; 89
     d4c:	d2 40       	sbci	r29, 0x02	; 2
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
}
     d58:	c7 5a       	subi	r28, 0xA7	; 167
     d5a:	dd 4f       	sbci	r29, 0xFD	; 253
     d5c:	68 81       	ld	r22, Y
     d5e:	79 81       	ldd	r23, Y+1	; 0x01
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	c9 55       	subi	r28, 0x59	; 89
     d66:	d2 40       	sbci	r29, 0x02	; 2
     d68:	c4 5a       	subi	r28, 0xA4	; 164
     d6a:	dd 4f       	sbci	r29, 0xFD	; 253
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	08 95       	ret

00000d84 <DPS310_read>:

}//end of main


uint8_t DPS310_read(uint8_t reg)
{
     d84:	cf 93       	push	r28
     d86:	c8 2f       	mov	r28, r24
		uint8_t result=0;
		
		TWIStart();
     d88:	0e 94 1c 19 	call	0x3238	; 0x3238 <TWIStart>
		if(TWIGetStatus() != 0x08)return 123;
     d8c:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	49 f5       	brne	.+82     	; 0xde6 <DPS310_read+0x62>
		TWIWrite(DPS310_W);
     d94:	8e ee       	ldi	r24, 0xEE	; 238
     d96:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 2;
     d9a:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     d9e:	88 31       	cpi	r24, 0x18	; 24
     da0:	21 f5       	brne	.+72     	; 0xdea <DPS310_read+0x66>
		TWIWrite(reg);
     da2:	8c 2f       	mov	r24, r28
     da4:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 3;
     da8:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     dac:	c3 e0       	ldi	r28, 0x03	; 3
     dae:	88 32       	cpi	r24, 0x28	; 40
     db0:	b9 f4       	brne	.+46     	; 0xde0 <DPS310_read+0x5c>
		TWIStart();
     db2:	0e 94 1c 19 	call	0x3238	; 0x3238 <TWIStart>
		if(TWIGetStatus() != 0x10)return 4; //repetet Start sent?
     db6:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     dba:	c4 e0       	ldi	r28, 0x04	; 4
     dbc:	80 31       	cpi	r24, 0x10	; 16
     dbe:	81 f4       	brne	.+32     	; 0xde0 <DPS310_read+0x5c>
		TWIWrite(DPS310_R);
     dc0:	8f ee       	ldi	r24, 0xEF	; 239
     dc2:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x40)return 5;
     dc6:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     dca:	c5 e0       	ldi	r28, 0x05	; 5
     dcc:	80 34       	cpi	r24, 0x40	; 64
     dce:	41 f4       	brne	.+16     	; 0xde0 <DPS310_read+0x5c>
		result=TWIReadNACK();
     dd0:	0e 94 3c 19 	call	0x3278	; 0x3278 <TWIReadNACK>
     dd4:	c8 2f       	mov	r28, r24
		TWIStop();
     dd6:	0e 94 24 19 	call	0x3248	; 0x3248 <TWIStop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dda:	80 e5       	ldi	r24, 0x50	; 80
     ddc:	8a 95       	dec	r24
     dde:	f1 f7       	brne	.-4      	; 0xddc <DPS310_read+0x58>
		_delay_us(30);
	return result;	
//Daten zurueckgeben
}
     de0:	8c 2f       	mov	r24, r28
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 123;
     de6:	cb e7       	ldi	r28, 0x7B	; 123
     de8:	fb cf       	rjmp	.-10     	; 0xde0 <DPS310_read+0x5c>
		if(TWIGetStatus() != 0x18)return 2;
     dea:	c2 e0       	ldi	r28, 0x02	; 2
     dec:	f9 cf       	rjmp	.-14     	; 0xde0 <DPS310_read+0x5c>

00000dee <DPS310_write>:
uint8_t DPS310_write(uint8_t reg, uint8_t data)
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	d8 2f       	mov	r29, r24
     df4:	c6 2f       	mov	r28, r22
		TWIStart();
     df6:	0e 94 1c 19 	call	0x3238	; 0x3238 <TWIStart>
		if(TWIGetStatus() != 0x08)return 11;
     dfa:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     dfe:	88 30       	cpi	r24, 0x08	; 8
     e00:	f1 f4       	brne	.+60     	; 0xe3e <DPS310_write+0x50>
		TWIWrite(DPS310_W);
     e02:	8e ee       	ldi	r24, 0xEE	; 238
     e04:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 22;
     e08:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     e0c:	88 31       	cpi	r24, 0x18	; 24
     e0e:	c9 f4       	brne	.+50     	; 0xe42 <DPS310_write+0x54>
		TWIWrite(reg);
     e10:	8d 2f       	mov	r24, r29
     e12:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 33;
     e16:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     e1a:	88 32       	cpi	r24, 0x28	; 40
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DPS310_write+0x58>
		TWIWrite(data);
     e1e:	8c 2f       	mov	r24, r28
     e20:	0e 94 28 19 	call	0x3250	; 0x3250 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 44;
     e24:	0e 94 46 19 	call	0x328c	; 0x328c <TWIGetStatus>
     e28:	88 32       	cpi	r24, 0x28	; 40
     e2a:	79 f4       	brne	.+30     	; 0xe4a <DPS310_write+0x5c>
		TWIStop();
     e2c:	0e 94 24 19 	call	0x3248	; 0x3248 <TWIStop>
     e30:	80 e5       	ldi	r24, 0x50	; 80
     e32:	8a 95       	dec	r24
     e34:	f1 f7       	brne	.-4      	; 0xe32 <DPS310_write+0x44>
		
		_delay_us(30);
	return 0;	
     e36:	80 e0       	ldi	r24, 0x00	; 0
	
	//Daten zurueckgeben
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 11;
     e3e:	8b e0       	ldi	r24, 0x0B	; 11
     e40:	fb cf       	rjmp	.-10     	; 0xe38 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x18)return 22;
     e42:	86 e1       	ldi	r24, 0x16	; 22
     e44:	f9 cf       	rjmp	.-14     	; 0xe38 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x28)return 33;
     e46:	81 e2       	ldi	r24, 0x21	; 33
     e48:	f7 cf       	rjmp	.-18     	; 0xe38 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x28)return 44;
     e4a:	8c e2       	ldi	r24, 0x2C	; 44
     e4c:	f5 cf       	rjmp	.-22     	; 0xe38 <DPS310_write+0x4a>

00000e4e <DPS310_readCoeffs>:

int16_t DPS310_readCoeffs(void)
{
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	a6 97       	sbiw	r28, 0x26	; 38
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
	uint8_t coeff_start;
	coeff_start=0x10;
	
	//coeffizienten einlesen und in buffer-Array speichern
	//Addressen 0x10 - 0x21
	for(x=0;x<18;x++)
     e66:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <x>
	coeff_start=0x10;
     e6a:	10 e1       	ldi	r17, 0x10	; 16
	{
		buffer[x]=DPS310_read(coeff_start);
     e6c:	81 2f       	mov	r24, r17
     e6e:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
     e72:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <x>
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	2c 0f       	add	r18, r28
     e82:	3d 1f       	adc	r19, r29
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
	__builtin_avr_delay_cycles(__ticks_dc);
     e8e:	8f e1       	ldi	r24, 0x1F	; 31
     e90:	9e e4       	ldi	r25, 0x4E	; 78
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <DPS310_readCoeffs+0x44>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <DPS310_readCoeffs+0x4a>
     e98:	00 00       	nop
		_delay_ms(10);
		coeff_start++;
     e9a:	1f 5f       	subi	r17, 0xFF	; 255
	for(x=0;x<18;x++)
     e9c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <x>
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <x>
     ea6:	82 31       	cpi	r24, 0x12	; 18
     ea8:	08 f3       	brcs	.-62     	; 0xe6c <DPS310_readCoeffs+0x1e>
	}
	 
    m_C0=(((int)buffer[0]<<8)|buffer[1])>>4;
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	39 81       	ldd	r19, Y+1	; 0x01
     eb2:	28 2b       	or	r18, r24
     eb4:	39 2b       	or	r19, r25
    m_C0=m_C0/2;
     eb6:	45 e0       	ldi	r20, 0x05	; 5
     eb8:	36 95       	lsr	r19
     eba:	27 95       	ror	r18
     ebc:	4a 95       	dec	r20
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <DPS310_readCoeffs+0x6a>
     ec0:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <m_C0+0x1>
     ec4:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <m_C0>
      
    m_C1 = (((uint32_t)buffer[1] & 0x0F) << 8) | (uint32_t)buffer[2];
     ec8:	98 2f       	mov	r25, r24
     eca:	88 27       	eor	r24, r24
     ecc:	88 27       	eor	r24, r24
     ece:	9f 70       	andi	r25, 0x0F	; 15
     ed0:	2d 81       	ldd	r18, Y+5	; 0x05
     ed2:	3e 81       	ldd	r19, Y+6	; 0x06
     ed4:	82 2b       	or	r24, r18
     ed6:	93 2b       	or	r25, r19
	if(m_C1 & ((uint32_t)1 << 11))
     ed8:	93 fd       	sbrc	r25, 3
     eda:	a0 c0       	rjmp	.+320    	; 0x101c <DPS310_readCoeffs+0x1ce>
	{
		m_C1 -= (uint32_t)1 << 12;
     edc:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <m_C1+0x1>
     ee0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <m_C1>
	}
      
    m_C00= ((((long)buffer[3]<<8)|buffer[4])<<8)|buffer[5];
     ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	4f 81       	ldd	r20, Y+7	; 0x07
     eee:	58 85       	ldd	r21, Y+8	; 0x08
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	76 2f       	mov	r23, r22
     ef6:	65 2f       	mov	r22, r21
     ef8:	54 2f       	mov	r21, r20
     efa:	44 27       	eor	r20, r20
     efc:	09 85       	ldd	r16, Y+9	; 0x09
     efe:	1a 85       	ldd	r17, Y+10	; 0x0a
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	40 2b       	or	r20, r16
     f06:	51 2b       	or	r21, r17
     f08:	62 2b       	or	r22, r18
     f0a:	73 2b       	or	r23, r19
     f0c:	76 2f       	mov	r23, r22
     f0e:	65 2f       	mov	r22, r21
     f10:	54 2f       	mov	r21, r20
     f12:	44 27       	eor	r20, r20
     f14:	48 2b       	or	r20, r24
     f16:	59 2b       	or	r21, r25
     f18:	6a 2b       	or	r22, r26
     f1a:	7b 2b       	or	r23, r27
    m_C00=(m_C00<<8)>>12;
     f1c:	76 2f       	mov	r23, r22
     f1e:	65 2f       	mov	r22, r21
     f20:	54 2f       	mov	r21, r20
     f22:	44 27       	eor	r20, r20
     f24:	fc e0       	ldi	r31, 0x0C	; 12
     f26:	75 95       	asr	r23
     f28:	67 95       	ror	r22
     f2a:	57 95       	ror	r21
     f2c:	47 95       	ror	r20
     f2e:	fa 95       	dec	r31
     f30:	d1 f7       	brne	.-12     	; 0xf26 <DPS310_readCoeffs+0xd8>
     f32:	40 93 da 01 	sts	0x01DA, r20	; 0x8001da <m_C00>
     f36:	50 93 db 01 	sts	0x01DB, r21	; 0x8001db <m_C00+0x1>
     f3a:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <m_C00+0x2>
     f3e:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <m_C00+0x3>

    m_C10=((((long)buffer[5]<<8)|buffer[6])<<8)|buffer[7];
     f42:	ba 2f       	mov	r27, r26
     f44:	a9 2f       	mov	r26, r25
     f46:	98 2f       	mov	r25, r24
     f48:	88 27       	eor	r24, r24
     f4a:	4d 85       	ldd	r20, Y+13	; 0x0d
     f4c:	5e 85       	ldd	r21, Y+14	; 0x0e
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	84 2b       	or	r24, r20
     f54:	95 2b       	or	r25, r21
     f56:	a6 2b       	or	r26, r22
     f58:	b7 2b       	or	r27, r23
     f5a:	ba 2f       	mov	r27, r26
     f5c:	a9 2f       	mov	r26, r25
     f5e:	98 2f       	mov	r25, r24
     f60:	88 27       	eor	r24, r24
     f62:	4f 85       	ldd	r20, Y+15	; 0x0f
     f64:	58 89       	ldd	r21, Y+16	; 0x10
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	84 2b       	or	r24, r20
     f6c:	95 2b       	or	r25, r21
     f6e:	a6 2b       	or	r26, r22
     f70:	b7 2b       	or	r27, r23
    m_C10=(m_C10<<12)>>12;
     f72:	2c e0       	ldi	r18, 0x0C	; 12
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	aa 1f       	adc	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	2a 95       	dec	r18
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <DPS310_readCoeffs+0x126>
     f80:	3c e0       	ldi	r19, 0x0C	; 12
     f82:	b5 95       	asr	r27
     f84:	a7 95       	ror	r26
     f86:	97 95       	ror	r25
     f88:	87 95       	ror	r24
     f8a:	3a 95       	dec	r19
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <DPS310_readCoeffs+0x134>
     f8e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <m_C10>
     f92:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <m_C10+0x1>
     f96:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <m_C10+0x2>
     f9a:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <m_C10+0x3>

    m_C01=((int)buffer[8]<<8)|buffer[9];
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	99 89       	ldd	r25, Y+17	; 0x11
     fa2:	2b 89       	ldd	r18, Y+19	; 0x13
     fa4:	3c 89       	ldd	r19, Y+20	; 0x14
     fa6:	82 2b       	or	r24, r18
     fa8:	93 2b       	or	r25, r19
     faa:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <m_C01+0x1>
     fae:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <m_C01>

    m_C11=((int)buffer[10]<<8)|buffer[11];
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	9d 89       	ldd	r25, Y+21	; 0x15
     fb6:	2f 89       	ldd	r18, Y+23	; 0x17
     fb8:	38 8d       	ldd	r19, Y+24	; 0x18
     fba:	82 2b       	or	r24, r18
     fbc:	93 2b       	or	r25, r19
     fbe:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <m_C11+0x1>
     fc2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <m_C11>

    m_C20=((int)buffer[12]<<8)|buffer[13];
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	99 8d       	ldd	r25, Y+25	; 0x19
     fca:	2b 8d       	ldd	r18, Y+27	; 0x1b
     fcc:	3c 8d       	ldd	r19, Y+28	; 0x1c
     fce:	82 2b       	or	r24, r18
     fd0:	93 2b       	or	r25, r19
     fd2:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <m_C20+0x1>
     fd6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <m_C20>

    m_C21=((int)buffer[14]<<8)|buffer[15];
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fde:	2f 8d       	ldd	r18, Y+31	; 0x1f
     fe0:	38 a1       	ldd	r19, Y+32	; 0x20
     fe2:	82 2b       	or	r24, r18
     fe4:	93 2b       	or	r25, r19
     fe6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <m_C21+0x1>
     fea:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <m_C21>

    m_C30=((int)buffer[16]<<8)|buffer[17];
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	99 a1       	ldd	r25, Y+33	; 0x21
     ff2:	2b a1       	ldd	r18, Y+35	; 0x23
     ff4:	3c a1       	ldd	r19, Y+36	; 0x24
     ff6:	82 2b       	or	r24, r18
     ff8:	93 2b       	or	r25, r19
     ffa:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <m_C30+0x1>
     ffe:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <m_C30>
       
    return 0;
}
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	a6 96       	adiw	r28, 0x26	; 38
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret
		m_C1 -= (uint32_t)1 << 12;
    101c:	90 51       	subi	r25, 0x10	; 16
    101e:	5e cf       	rjmp	.-324    	; 0xedc <DPS310_readCoeffs+0x8e>

00001020 <DPS310_sreset>:


void DPS310_sreset(void)
{
	// softreset of DPS310 sensor
	DPS310_write(0x0c, 0x99);
    1020:	69 e9       	ldi	r22, 0x99	; 153
    1022:	8c e0       	ldi	r24, 0x0C	; 12
    1024:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
    1028:	2f e7       	ldi	r18, 0x7F	; 127
    102a:	88 e3       	ldi	r24, 0x38	; 56
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	80 40       	sbci	r24, 0x00	; 0
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <DPS310_sreset+0xe>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <DPS310_sreset+0x18>
    1038:	00 00       	nop
	_delay_ms(50);
}
    103a:	08 95       	ret

0000103c <init_ili9341>:

void init_ili9341(void)
{
	stdout = & mydata;
    103c:	89 e0       	ldi	r24, 0x09	; 9
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__iob+0x3>
    1044:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__iob+0x2>
	ili9341_init();//initial driver setup to drive ili9341
    1048:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <ili9341_init>
	ili9341_clear(BLACK);//fill screen with black colour
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <ili9341_clear>
    1054:	2f ef       	ldi	r18, 0xFF	; 255
    1056:	80 e7       	ldi	r24, 0x70	; 112
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	80 40       	sbci	r24, 0x00	; 0
    105e:	90 40       	sbci	r25, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <init_ili9341+0x1e>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <init_ili9341+0x28>
    1064:	00 00       	nop
	_delay_ms(100);
	ili9341_setRotation(3);//rotate screen
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <ili9341_setRotation>
    106c:	8f e9       	ldi	r24, 0x9F	; 159
    106e:	9f e0       	ldi	r25, 0x0F	; 15
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <init_ili9341+0x34>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <init_ili9341+0x3a>
    1076:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(YELLOW,BLACK);
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	80 ee       	ldi	r24, 0xE0	; 224
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <ili9341_settextcolour>
	ili9341_setcursor(0,0);
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <ili9341_setcursor>
	ili9341_settextsize(2);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <ili9341_settextsize>

00001096 <DPS310_init>:
}
void DPS310_init(uint8_t acc)
{
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	c8 2f       	mov	r28, r24
						break;
			case HIGH: 	DPS310_write(PRS_CFG, 0x26);//4 messungen / sek   64 fach ovs
						DPS310_write(TMP_CFG, 0xA0);//externer sens  4 messung / sek  single ovs
						DPS310_write(CFG_REG, 0x04);//p bit shift on 
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
						temp_ovs = 1;
    10a4:	11 e0       	ldi	r17, 0x01	; 1
						pres_ovs = 64;
    10a6:	80 e4       	ldi	r24, 0x40	; 64
    10a8:	f8 2e       	mov	r15, r24
						break;
			case ULTRA:	DPS310_write(PRS_CFG, 0xF7);//4 messungen / sek   64 fach ovs
						DPS310_write(TMP_CFG, 0xD7);//externer sens  4 messung / sek  single ovs
						DPS310_write(CFG_REG, 0x0C);//p bit shift on 
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
						temp_ovs = 128;
    10aa:	00 e8       	ldi	r16, 0x80	; 128
						pres_ovs = 16;
    10ac:	90 e1       	ldi	r25, 0x10	; 16
    10ae:	e9 2e       	mov	r14, r25
		if(COEFF_READY_CHECK)bit=1;
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    10b6:	d8 2f       	mov	r29, r24
		DPS310_readCoeffs();
    10b8:	0e 94 27 07 	call	0xe4e	; 0xe4e <DPS310_readCoeffs>
		switch(acc)
    10bc:	c3 30       	cpi	r28, 0x03	; 3
    10be:	09 f4       	brne	.+2      	; 0x10c2 <DPS310_init+0x2c>
    10c0:	64 c0       	rjmp	.+200    	; 0x118a <DPS310_init+0xf4>
    10c2:	10 f5       	brcc	.+68     	; 0x1108 <DPS310_init+0x72>
    10c4:	c1 30       	cpi	r28, 0x01	; 1
    10c6:	b9 f1       	breq	.+110    	; 0x1136 <DPS310_init+0xa0>
    10c8:	c2 30       	cpi	r28, 0x02	; 2
    10ca:	09 f4       	brne	.+2      	; 0x10ce <DPS310_init+0x38>
    10cc:	49 c0       	rjmp	.+146    	; 0x1160 <DPS310_init+0xca>
			
		}
		//Korrekturwerte für falsche Temperaturwerte (2-fach normaler Temp Wert)
		// Quelle: https://github.com/Infineon/DPS310-Pressure-Sensor
		
		DPS310_write(0x0E, 0xA5);
    10ce:	65 ea       	ldi	r22, 0xA5	; 165
    10d0:	8e e0       	ldi	r24, 0x0E	; 14
    10d2:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
		DPS310_write(0x0F, 0x96);
    10d6:	66 e9       	ldi	r22, 0x96	; 150
    10d8:	8f e0       	ldi	r24, 0x0F	; 15
    10da:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
		DPS310_write(0x62, 0x02);
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	82 e6       	ldi	r24, 0x62	; 98
    10e2:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
		DPS310_write(0x0E, 0x00);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	8e e0       	ldi	r24, 0x0E	; 14
    10ea:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
		DPS310_write(0x0F, 0x00);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	8f e0       	ldi	r24, 0x0F	; 15
    10f2:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
	while(bit==0)// go on if Sensor ready flag is set
    10f6:	d7 ff       	sbrs	r29, 7
    10f8:	db cf       	rjmp	.-74     	; 0x10b0 <DPS310_init+0x1a>
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	08 95       	ret
		switch(acc)
    1108:	c4 30       	cpi	r28, 0x04	; 4
    110a:	09 f7       	brne	.-62     	; 0x10ce <DPS310_init+0x38>
			case ULTRA:	DPS310_write(PRS_CFG, 0xF7);//4 messungen / sek   64 fach ovs
    110c:	67 ef       	ldi	r22, 0xF7	; 247
    110e:	86 e0       	ldi	r24, 0x06	; 6
    1110:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(TMP_CFG, 0xD7);//externer sens  4 messung / sek  single ovs
    1114:	67 ed       	ldi	r22, 0xD7	; 215
    1116:	87 e0       	ldi	r24, 0x07	; 7
    1118:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(CFG_REG, 0x0C);//p bit shift on 
    111c:	6c e0       	ldi	r22, 0x0C	; 12
    111e:	89 e0       	ldi	r24, 0x09	; 9
    1120:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	88 e0       	ldi	r24, 0x08	; 8
    1128:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						temp_ovs = 128;
    112c:	00 93 d9 01 	sts	0x01D9, r16	; 0x8001d9 <temp_ovs>
						pres_ovs = 128;
    1130:	00 93 b5 01 	sts	0x01B5, r16	; 0x8001b5 <pres_ovs>
						break;
    1134:	cc cf       	rjmp	.-104    	; 0x10ce <DPS310_init+0x38>
			case LOW: 	DPS310_write(PRS_CFG, 0x00);//eight times low power
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(TMP_CFG, 0x80);// 1 measurement
    113e:	60 e8       	ldi	r22, 0x80	; 128
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(CFG_REG, 0x00);//p bit shift off
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	89 e0       	ldi	r24, 0x09	; 9
    114a:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						temp_ovs = 1;
    1156:	c0 93 d9 01 	sts	0x01D9, r28	; 0x8001d9 <temp_ovs>
						pres_ovs = 1;
    115a:	c0 93 b5 01 	sts	0x01B5, r28	; 0x8001b5 <pres_ovs>
						break;
    115e:	b7 cf       	rjmp	.-146    	; 0x10ce <DPS310_init+0x38>
			case MID: 	DPS310_write(PRS_CFG, 0x14);//2 messungen / sek   16 fach ovs
    1160:	64 e1       	ldi	r22, 0x14	; 20
    1162:	86 e0       	ldi	r24, 0x06	; 6
    1164:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(TMP_CFG, 0x90);//externer sens  2 messung / sek  single ovs
    1168:	60 e9       	ldi	r22, 0x90	; 144
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(CFG_REG, 0x04);//p bit shift on
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	89 e0       	ldi	r24, 0x09	; 9
    1174:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
    1178:	67 e0       	ldi	r22, 0x07	; 7
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						temp_ovs = 1;
    1180:	10 93 d9 01 	sts	0x01D9, r17	; 0x8001d9 <temp_ovs>
						pres_ovs = 16;
    1184:	e0 92 b5 01 	sts	0x01B5, r14	; 0x8001b5 <pres_ovs>
						break;
    1188:	a2 cf       	rjmp	.-188    	; 0x10ce <DPS310_init+0x38>
			case HIGH: 	DPS310_write(PRS_CFG, 0x26);//4 messungen / sek   64 fach ovs
    118a:	66 e2       	ldi	r22, 0x26	; 38
    118c:	86 e0       	ldi	r24, 0x06	; 6
    118e:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(TMP_CFG, 0xA0);//externer sens  4 messung / sek  single ovs
    1192:	60 ea       	ldi	r22, 0xA0	; 160
    1194:	87 e0       	ldi	r24, 0x07	; 7
    1196:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(CFG_REG, 0x04);//p bit shift on 
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	89 e0       	ldi	r24, 0x09	; 9
    119e:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
    11a2:	67 e0       	ldi	r22, 0x07	; 7
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	0e 94 f7 06 	call	0xdee	; 0xdee <DPS310_write>
						temp_ovs = 1;
    11aa:	10 93 d9 01 	sts	0x01D9, r17	; 0x8001d9 <temp_ovs>
						pres_ovs = 64;
    11ae:	f0 92 b5 01 	sts	0x01B5, r15	; 0x8001b5 <pres_ovs>
						break;
    11b2:	8d cf       	rjmp	.-230    	; 0x10ce <DPS310_init+0x38>

000011b4 <DPS310_get_sc_temp>:
uint32_t DPS310_get_sc_temp(uint8_t oversampling)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DPS310_get_sc_temp+0x6>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <DPS310_get_sc_temp+0x8>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	long temp_raw=0;

	buff[0] = DPS310_read(TMP_B2);
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    11c6:	ec e9       	ldi	r30, 0x9C	; 156
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	80 83       	st	Z, r24
	buff[1] = DPS310_read(TMP_B1);
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    11d2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <buff+0x1>
	buff[2] = DPS310_read(TMP_B0);
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    11dc:	28 2f       	mov	r18, r24
    11de:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <buff+0x2>
			
	temp_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
    11e2:	ec e9       	ldi	r30, 0x9C	; 156
    11e4:	f1 e0       	ldi	r31, 0x01	; 1
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	98 27       	eor	r25, r24
    11ec:	89 27       	eor	r24, r25
    11ee:	98 27       	eor	r25, r24
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	ba 2f       	mov	r27, r26
    11f6:	a9 2f       	mov	r26, r25
    11f8:	98 2f       	mov	r25, r24
    11fa:	88 27       	eor	r24, r24
    11fc:	82 2b       	or	r24, r18
	temp_raw=(temp_raw<<8)>>8;
    11fe:	ba 2f       	mov	r27, r26
    1200:	a9 2f       	mov	r26, r25
    1202:	98 2f       	mov	r25, r24
    1204:	88 27       	eor	r24, r24
    1206:	29 2f       	mov	r18, r25
    1208:	3a 2f       	mov	r19, r26
    120a:	4b 2f       	mov	r20, r27
    120c:	55 27       	eor	r21, r21
    120e:	47 fd       	sbrc	r20, 7
    1210:	5a 95       	dec	r21
				
	return temp_raw; 
}
    1212:	ca 01       	movw	r24, r20
    1214:	b9 01       	movw	r22, r18
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <DPS310_get_temp>:

long DPS310_get_temp(uint8_t oversampling)
{
    1224:	cf 92       	push	r12
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DPS310_get_temp+0x12>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DPS310_get_temp+0x14>
    1238:	00 d0       	rcall	.+0      	; 0x123a <DPS310_get_temp+0x16>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	long temp_raw=0;
	double temp_sc=0;
	double temp_comp=0;
	long scalfactor=0;

			buff[0] = DPS310_read(TMP_B2);
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1246:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <buff>
			buff[1] = DPS310_read(TMP_B1);
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1250:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <buff+0x1>
			buff[2] = DPS310_read(TMP_B0);
    1254:	85 e0       	ldi	r24, 0x05	; 5
    1256:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    125a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <buff+0x2>
			
			temp_raw=DPS310_get_sc_temp(oversampling);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DPS310_get_sc_temp>
			
			switch(oversampling)
    1264:	29 81       	ldd	r18, Y+1	; 0x01
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
				case 4:	scalfactor = 3670016;break;
				case 8:	scalfactor = 7864320;break;
				case 16:	scalfactor = 253952;break;
    1266:	c1 2c       	mov	r12, r1
    1268:	e0 ee       	ldi	r30, 0xE0	; 224
    126a:	de 2e       	mov	r13, r30
    126c:	e3 e0       	ldi	r30, 0x03	; 3
    126e:	ee 2e       	mov	r14, r30
    1270:	f1 2c       	mov	r15, r1
			switch(oversampling)
    1272:	20 31       	cpi	r18, 0x10	; 16
    1274:	21 f1       	breq	.+72     	; 0x12be <DPS310_get_temp+0x9a>
    1276:	08 f0       	brcs	.+2      	; 0x127a <DPS310_get_temp+0x56>
    1278:	a2 c0       	rjmp	.+324    	; 0x13be <DPS310_get_temp+0x19a>
				case 4:	scalfactor = 3670016;break;
    127a:	c1 2c       	mov	r12, r1
    127c:	d1 2c       	mov	r13, r1
    127e:	58 e3       	ldi	r21, 0x38	; 56
    1280:	e5 2e       	mov	r14, r21
    1282:	f1 2c       	mov	r15, r1
			switch(oversampling)
    1284:	24 30       	cpi	r18, 0x04	; 4
    1286:	d9 f0       	breq	.+54     	; 0x12be <DPS310_get_temp+0x9a>
    1288:	90 f4       	brcc	.+36     	; 0x12ae <DPS310_get_temp+0x8a>
    128a:	c1 2c       	mov	r12, r1
    128c:	d1 2c       	mov	r13, r1
    128e:	48 e0       	ldi	r20, 0x08	; 8
    1290:	e4 2e       	mov	r14, r20
    1292:	f1 2c       	mov	r15, r1
    1294:	21 30       	cpi	r18, 0x01	; 1
    1296:	99 f0       	breq	.+38     	; 0x12be <DPS310_get_temp+0x9a>
				case 2:	scalfactor = 1572864;break;
    1298:	c1 2c       	mov	r12, r1
    129a:	d1 2c       	mov	r13, r1
    129c:	b8 e1       	ldi	r27, 0x18	; 24
    129e:	eb 2e       	mov	r14, r27
    12a0:	f1 2c       	mov	r15, r1
			switch(oversampling)
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	61 f0       	breq	.+24     	; 0x12be <DPS310_get_temp+0x9a>
	long scalfactor=0;
    12a6:	c1 2c       	mov	r12, r1
    12a8:	d1 2c       	mov	r13, r1
    12aa:	76 01       	movw	r14, r12
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <DPS310_get_temp+0x9a>
			switch(oversampling)
    12ae:	39 81       	ldd	r19, Y+1	; 0x01
				case 8:	scalfactor = 7864320;break;
    12b0:	c1 2c       	mov	r12, r1
    12b2:	d1 2c       	mov	r13, r1
    12b4:	a8 e7       	ldi	r26, 0x78	; 120
    12b6:	ea 2e       	mov	r14, r26
    12b8:	f1 2c       	mov	r15, r1
			switch(oversampling)
    12ba:	38 30       	cpi	r19, 0x08	; 8
    12bc:	a1 f7       	brne	.-24     	; 0x12a6 <DPS310_get_temp+0x82>
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
			temp_sc = (float)temp_raw/scalfactor;
    12be:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    12c2:	8b 01       	movw	r16, r22
    12c4:	8e 83       	std	Y+6, r24	; 0x06
    12c6:	9d 83       	std	Y+5, r25	; 0x05
    12c8:	c7 01       	movw	r24, r14
    12ca:	b6 01       	movw	r22, r12
    12cc:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	09 83       	std	Y+1, r16	; 0x01
    12d6:	1a 83       	std	Y+2, r17	; 0x02
    12d8:	8e 81       	ldd	r24, Y+6	; 0x06
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	8c 83       	std	Y+4, r24	; 0x04
    12e0:	69 81       	ldd	r22, Y+1	; 0x01
    12e2:	7a 81       	ldd	r23, Y+2	; 0x02
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__divsf3>
    12ec:	d6 2e       	mov	r13, r22
    12ee:	e7 2e       	mov	r14, r23
    12f0:	f8 2e       	mov	r15, r24
    12f2:	9d 83       	std	Y+5, r25	; 0x05
			temp_comp=m_C0+m_C1*temp_sc;
    12f4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <m_C1>
    12f8:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <m_C1+0x1>
    12fc:	9c 01       	movw	r18, r24
    12fe:	99 0f       	add	r25, r25
    1300:	44 0b       	sbc	r20, r20
    1302:	55 0b       	sbc	r21, r21
    1304:	29 83       	std	Y+1, r18	; 0x01
    1306:	3a 83       	std	Y+2, r19	; 0x02
    1308:	4b 83       	std	Y+3, r20	; 0x03
    130a:	5c 83       	std	Y+4, r21	; 0x04
    130c:	ca 01       	movw	r24, r20
    130e:	b9 01       	movw	r22, r18
    1310:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	d9 82       	std	Y+1, r13	; 0x01
    131a:	ea 82       	std	Y+2, r14	; 0x02
    131c:	fb 82       	std	Y+3, r15	; 0x03
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	8c 83       	std	Y+4, r24	; 0x04
    1322:	69 81       	ldd	r22, Y+1	; 0x01
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    132e:	d6 2e       	mov	r13, r22
    1330:	e7 2e       	mov	r14, r23
    1332:	f8 2e       	mov	r15, r24
    1334:	9d 83       	std	Y+5, r25	; 0x05
    1336:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <m_C0>
    133a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <m_C0+0x1>
    133e:	9c 01       	movw	r18, r24
    1340:	99 0f       	add	r25, r25
    1342:	44 0b       	sbc	r20, r20
    1344:	55 0b       	sbc	r21, r21
    1346:	29 83       	std	Y+1, r18	; 0x01
    1348:	3a 83       	std	Y+2, r19	; 0x02
    134a:	4b 83       	std	Y+3, r20	; 0x03
    134c:	5c 83       	std	Y+4, r21	; 0x04
    134e:	ca 01       	movw	r24, r20
    1350:	b9 01       	movw	r22, r18
    1352:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	d9 82       	std	Y+1, r13	; 0x01
    135c:	ea 82       	std	Y+2, r14	; 0x02
    135e:	fb 82       	std	Y+3, r15	; 0x03
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	8c 83       	std	Y+4, r24	; 0x04
    1364:	69 81       	ldd	r22, Y+1	; 0x01
    1366:	7a 81       	ldd	r23, Y+2	; 0x02
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
			
			
			return temp_comp*100; //2505 entspricht 25,5 Grad
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	48 ec       	ldi	r20, 0xC8	; 200
    1376:	52 e4       	ldi	r21, 0x42	; 66
    1378:	69 83       	std	Y+1, r22	; 0x01
    137a:	7a 83       	std	Y+2, r23	; 0x02
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	69 81       	ldd	r22, Y+1	; 0x01
    1382:	7a 81       	ldd	r23, Y+2	; 0x02
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    138c:	69 83       	std	Y+1, r22	; 0x01
    138e:	7a 83       	std	Y+2, r23	; 0x02
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	9c 83       	std	Y+4, r25	; 0x04
    1394:	69 81       	ldd	r22, Y+1	; 0x01
    1396:	7a 81       	ldd	r23, Y+2	; 0x02
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fixsfsi>
}
    13a0:	26 96       	adiw	r28, 0x06	; 6
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret
			switch(oversampling)
    13be:	49 81       	ldd	r20, Y+1	; 0x01
				case 64:	scalfactor = 1040384;break;
    13c0:	c1 2c       	mov	r12, r1
    13c2:	30 ee       	ldi	r19, 0xE0	; 224
    13c4:	d3 2e       	mov	r13, r19
    13c6:	3f e0       	ldi	r19, 0x0F	; 15
    13c8:	e3 2e       	mov	r14, r19
    13ca:	f1 2c       	mov	r15, r1
			switch(oversampling)
    13cc:	40 34       	cpi	r20, 0x40	; 64
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <DPS310_get_temp+0x1ae>
    13d0:	76 cf       	rjmp	.-276    	; 0x12be <DPS310_get_temp+0x9a>
				case 128:	scalfactor = 2088960;break;
    13d2:	c1 2c       	mov	r12, r1
    13d4:	20 ee       	ldi	r18, 0xE0	; 224
    13d6:	d2 2e       	mov	r13, r18
    13d8:	2f e1       	ldi	r18, 0x1F	; 31
    13da:	e2 2e       	mov	r14, r18
    13dc:	f1 2c       	mov	r15, r1
			switch(oversampling)
    13de:	40 38       	cpi	r20, 0x80	; 128
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DPS310_get_temp+0x1c0>
    13e2:	6d cf       	rjmp	.-294    	; 0x12be <DPS310_get_temp+0x9a>
				case 32:	scalfactor = 516096;break;
    13e4:	c1 2c       	mov	r12, r1
    13e6:	f0 ee       	ldi	r31, 0xE0	; 224
    13e8:	df 2e       	mov	r13, r31
    13ea:	f7 e0       	ldi	r31, 0x07	; 7
    13ec:	ef 2e       	mov	r14, r31
    13ee:	f1 2c       	mov	r15, r1
			switch(oversampling)
    13f0:	40 32       	cpi	r20, 0x20	; 32
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <DPS310_get_temp+0x1d2>
    13f4:	64 cf       	rjmp	.-312    	; 0x12be <DPS310_get_temp+0x9a>
    13f6:	57 cf       	rjmp	.-338    	; 0x12a6 <DPS310_get_temp+0x82>

000013f8 <DPS310_get_pres>:

double DPS310_get_pres(uint8_t t_ovrs, uint8_t p_ovrs)
{
    13f8:	4f 92       	push	r4
    13fa:	5f 92       	push	r5
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <DPS310_get_pres+0x22>
    141a:	00 d0       	rcall	.+0      	; 0x141c <DPS310_get_pres+0x24>
    141c:	00 d0       	rcall	.+0      	; 0x141e <DPS310_get_pres+0x26>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8e 83       	std	Y+6, r24	; 0x06
    1424:	6d 83       	std	Y+5, r22	; 0x05
	long prs_raw;
	double prs_sc;
	double prs_comp;
	long scalfactor=0;
	
		buff[0] = DPS310_read(TMP_B2);
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    142c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <buff>
		buff[1] = DPS310_read(TMP_B1);
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1436:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <buff+0x1>
		buff[2] = DPS310_read(TMP_B0);
    143a:	85 e0       	ldi	r24, 0x05	; 5
    143c:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1440:	28 2f       	mov	r18, r24
    1442:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <buff+0x2>
		
		temp_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
    1446:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <buff>
    144a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <buff+0x1>
    144e:	98 27       	eor	r25, r24
    1450:	89 27       	eor	r24, r25
    1452:	98 27       	eor	r25, r24
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	ba 2f       	mov	r27, r26
    145a:	a9 2f       	mov	r26, r25
    145c:	98 2f       	mov	r25, r24
    145e:	88 27       	eor	r24, r24
    1460:	82 2b       	or	r24, r18
		temp_raw=(temp_raw<<8)>>8;
    1462:	ba 2f       	mov	r27, r26
    1464:	a9 2f       	mov	r26, r25
    1466:	98 2f       	mov	r25, r24
    1468:	88 27       	eor	r24, r24
    146a:	29 2f       	mov	r18, r25
    146c:	3a 2f       	mov	r19, r26
    146e:	4b 2f       	mov	r20, r27
    1470:	55 27       	eor	r21, r21
    1472:	47 fd       	sbrc	r20, 7
    1474:	5a 95       	dec	r21
    1476:	29 83       	std	Y+1, r18	; 0x01
    1478:	3a 83       	std	Y+2, r19	; 0x02
    147a:	4b 83       	std	Y+3, r20	; 0x03
    147c:	5c 83       	std	Y+4, r21	; 0x04
		
		switch(t_ovrs)
    147e:	3e 81       	ldd	r19, Y+6	; 0x06
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
				case 4:	scalfactor = 3670016;break;
				case 8:	scalfactor = 7864320;break;
				case 16:	scalfactor = 253952;break;
    1480:	c1 2c       	mov	r12, r1
    1482:	90 ee       	ldi	r25, 0xE0	; 224
    1484:	d9 2e       	mov	r13, r25
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	e9 2e       	mov	r14, r25
    148a:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    148c:	30 31       	cpi	r19, 0x10	; 16
    148e:	21 f1       	breq	.+72     	; 0x14d8 <DPS310_get_pres+0xe0>
    1490:	08 f0       	brcs	.+2      	; 0x1494 <DPS310_get_pres+0x9c>
    1492:	de c1       	rjmp	.+956    	; 0x1850 <DPS310_get_pres+0x458>
				case 4:	scalfactor = 3670016;break;
    1494:	c1 2c       	mov	r12, r1
    1496:	d1 2c       	mov	r13, r1
    1498:	88 e3       	ldi	r24, 0x38	; 56
    149a:	e8 2e       	mov	r14, r24
    149c:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    149e:	34 30       	cpi	r19, 0x04	; 4
    14a0:	d9 f0       	breq	.+54     	; 0x14d8 <DPS310_get_pres+0xe0>
    14a2:	90 f4       	brcc	.+36     	; 0x14c8 <DPS310_get_pres+0xd0>
    14a4:	c1 2c       	mov	r12, r1
    14a6:	d1 2c       	mov	r13, r1
    14a8:	08 e0       	ldi	r16, 0x08	; 8
    14aa:	e0 2e       	mov	r14, r16
    14ac:	f1 2c       	mov	r15, r1
    14ae:	31 30       	cpi	r19, 0x01	; 1
    14b0:	99 f0       	breq	.+38     	; 0x14d8 <DPS310_get_pres+0xe0>
				case 2:	scalfactor = 1572864;break;
    14b2:	c1 2c       	mov	r12, r1
    14b4:	d1 2c       	mov	r13, r1
    14b6:	48 e1       	ldi	r20, 0x18	; 24
    14b8:	e4 2e       	mov	r14, r20
    14ba:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    14bc:	32 30       	cpi	r19, 0x02	; 2
    14be:	61 f0       	breq	.+24     	; 0x14d8 <DPS310_get_pres+0xe0>
	long scalfactor=0;
    14c0:	c1 2c       	mov	r12, r1
    14c2:	d1 2c       	mov	r13, r1
    14c4:	76 01       	movw	r14, r12
    14c6:	08 c0       	rjmp	.+16     	; 0x14d8 <DPS310_get_pres+0xe0>
		switch(t_ovrs)
    14c8:	4e 81       	ldd	r20, Y+6	; 0x06
				case 8:	scalfactor = 7864320;break;
    14ca:	c1 2c       	mov	r12, r1
    14cc:	d1 2c       	mov	r13, r1
    14ce:	38 e7       	ldi	r19, 0x78	; 120
    14d0:	e3 2e       	mov	r14, r19
    14d2:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    14d4:	48 30       	cpi	r20, 0x08	; 8
    14d6:	a1 f7       	brne	.-24     	; 0x14c0 <DPS310_get_pres+0xc8>
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
			temp_sc = (float)temp_raw/scalfactor;
    14d8:	69 81       	ldd	r22, Y+1	; 0x01
    14da:	7a 81       	ldd	r23, Y+2	; 0x02
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    14e4:	b6 2e       	mov	r11, r22
    14e6:	07 2f       	mov	r16, r23
    14e8:	18 2f       	mov	r17, r24
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	c7 01       	movw	r24, r14
    14ee:	b6 01       	movw	r22, r12
    14f0:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	b9 82       	std	Y+1, r11	; 0x01
    14fa:	0a 83       	std	Y+2, r16	; 0x02
    14fc:	1b 83       	std	Y+3, r17	; 0x03
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	69 81       	ldd	r22, Y+1	; 0x01
    1504:	7a 81       	ldd	r23, Y+2	; 0x02
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__divsf3>
    150e:	b6 2e       	mov	r11, r22
    1510:	07 2f       	mov	r16, r23
    1512:	18 2f       	mov	r17, r24
    1514:	9e 83       	std	Y+6, r25	; 0x06
		
		buff[0] = DPS310_read(PRS_B2);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    151c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <buff>
		buff[1] = DPS310_read(PRS_B1);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1526:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <buff+0x1>
		buff[2] = DPS310_read(PRS_B0);
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    1530:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <buff+0x2>
		
		prs_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
    1534:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <buff>
    1538:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <buff+0x1>
    153c:	54 27       	eor	r21, r20
    153e:	45 27       	eor	r20, r21
    1540:	54 27       	eor	r21, r20
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	76 2f       	mov	r23, r22
    1548:	65 2f       	mov	r22, r21
    154a:	54 2f       	mov	r21, r20
    154c:	44 27       	eor	r20, r20
    154e:	48 2b       	or	r20, r24
		prs_raw=(prs_raw<<8)>>8;
    1550:	76 2f       	mov	r23, r22
    1552:	65 2f       	mov	r22, r21
    1554:	54 2f       	mov	r21, r20
    1556:	44 27       	eor	r20, r20
    1558:	bb 27       	eor	r27, r27
    155a:	77 fd       	sbrc	r23, 7
    155c:	ba 95       	dec	r27
    155e:	a7 2f       	mov	r26, r23
    1560:	96 2f       	mov	r25, r22
    1562:	85 2f       	mov	r24, r21
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	ab 83       	std	Y+3, r26	; 0x03
    156a:	bc 83       	std	Y+4, r27	; 0x04
		
		switch(p_ovrs)
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	90 31       	cpi	r25, 0x10	; 16
    1570:	09 f4       	brne	.+2      	; 0x1574 <DPS310_get_pres+0x17c>
    1572:	a4 c1       	rjmp	.+840    	; 0x18bc <DPS310_get_pres+0x4c4>
    1574:	08 f0       	brcs	.+2      	; 0x1578 <DPS310_get_pres+0x180>
    1576:	93 c1       	rjmp	.+806    	; 0x189e <DPS310_get_pres+0x4a6>
    1578:	94 30       	cpi	r25, 0x04	; 4
    157a:	09 f4       	brne	.+2      	; 0x157e <DPS310_get_pres+0x186>
    157c:	a6 c1       	rjmp	.+844    	; 0x18ca <DPS310_get_pres+0x4d2>
    157e:	08 f0       	brcs	.+2      	; 0x1582 <DPS310_get_pres+0x18a>
    1580:	84 c1       	rjmp	.+776    	; 0x188a <DPS310_get_pres+0x492>
    1582:	91 30       	cpi	r25, 0x01	; 1
    1584:	09 f4       	brne	.+2      	; 0x1588 <DPS310_get_pres+0x190>
    1586:	a7 c1       	rjmp	.+846    	; 0x18d6 <DPS310_get_pres+0x4de>
    1588:	92 30       	cpi	r25, 0x02	; 2
    158a:	29 f4       	brne	.+10     	; 0x1596 <DPS310_get_pres+0x19e>
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
    158c:	c1 2c       	mov	r12, r1
    158e:	d1 2c       	mov	r13, r1
    1590:	78 e1       	ldi	r23, 0x18	; 24
    1592:	e7 2e       	mov	r14, r23
    1594:	f1 2c       	mov	r15, r1
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
		prs_sc = (float)prs_raw/scalfactor;
    1596:	69 81       	ldd	r22, Y+1	; 0x01
    1598:	7a 81       	ldd	r23, Y+2	; 0x02
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    15a2:	4b 01       	movw	r8, r22
    15a4:	a8 2e       	mov	r10, r24
    15a6:	9d 83       	std	Y+5, r25	; 0x05
    15a8:	c7 01       	movw	r24, r14
    15aa:	b6 01       	movw	r22, r12
    15ac:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	89 82       	std	Y+1, r8	; 0x01
    15b6:	9a 82       	std	Y+2, r9	; 0x02
    15b8:	ab 82       	std	Y+3, r10	; 0x03
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	8c 83       	std	Y+4, r24	; 0x04
    15be:	69 81       	ldd	r22, Y+1	; 0x01
    15c0:	7a 81       	ldd	r23, Y+2	; 0x02
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__divsf3>
    15ca:	d6 2e       	mov	r13, r22
    15cc:	e7 2e       	mov	r14, r23
    15ce:	f8 2e       	mov	r15, r24
    15d0:	9d 83       	std	Y+5, r25	; 0x05
		prs_comp=m_C00+prs_sc*(m_C10+prs_sc*(m_C20+(prs_sc*m_C30)))+temp_sc*m_C01+temp_sc*prs_sc*(m_C11+(prs_sc*m_C21));
    15d2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <m_C30>
    15d6:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <m_C30+0x1>
    15da:	9c 01       	movw	r18, r24
    15dc:	99 0f       	add	r25, r25
    15de:	44 0b       	sbc	r20, r20
    15e0:	55 0b       	sbc	r21, r21
    15e2:	29 83       	std	Y+1, r18	; 0x01
    15e4:	3a 83       	std	Y+2, r19	; 0x02
    15e6:	4b 83       	std	Y+3, r20	; 0x03
    15e8:	5c 83       	std	Y+4, r21	; 0x04
    15ea:	ca 01       	movw	r24, r20
    15ec:	b9 01       	movw	r22, r18
    15ee:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    15f2:	2d 2d       	mov	r18, r13
    15f4:	3e 2d       	mov	r19, r14
    15f6:	4f 2d       	mov	r20, r15
    15f8:	5d 81       	ldd	r21, Y+5	; 0x05
    15fa:	69 83       	std	Y+1, r22	; 0x01
    15fc:	7a 83       	std	Y+2, r23	; 0x02
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	69 81       	ldd	r22, Y+1	; 0x01
    1604:	7a 81       	ldd	r23, Y+2	; 0x02
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    160e:	4b 01       	movw	r8, r22
    1610:	a8 2e       	mov	r10, r24
    1612:	c9 2e       	mov	r12, r25
    1614:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <m_C20>
    1618:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <m_C20+0x1>
    161c:	9c 01       	movw	r18, r24
    161e:	99 0f       	add	r25, r25
    1620:	44 0b       	sbc	r20, r20
    1622:	55 0b       	sbc	r21, r21
    1624:	29 83       	std	Y+1, r18	; 0x01
    1626:	3a 83       	std	Y+2, r19	; 0x02
    1628:	4b 83       	std	Y+3, r20	; 0x03
    162a:	5c 83       	std	Y+4, r21	; 0x04
    162c:	ca 01       	movw	r24, r20
    162e:	b9 01       	movw	r22, r18
    1630:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	89 82       	std	Y+1, r8	; 0x01
    163a:	9a 82       	std	Y+2, r9	; 0x02
    163c:	ab 82       	std	Y+3, r10	; 0x03
    163e:	cc 82       	std	Y+4, r12	; 0x04
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	7a 81       	ldd	r23, Y+2	; 0x02
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    164c:	2d 2d       	mov	r18, r13
    164e:	3e 2d       	mov	r19, r14
    1650:	4f 2d       	mov	r20, r15
    1652:	5d 81       	ldd	r21, Y+5	; 0x05
    1654:	69 83       	std	Y+1, r22	; 0x01
    1656:	7a 83       	std	Y+2, r23	; 0x02
    1658:	8b 83       	std	Y+3, r24	; 0x03
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	69 81       	ldd	r22, Y+1	; 0x01
    165e:	7a 81       	ldd	r23, Y+2	; 0x02
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    1668:	4b 01       	movw	r8, r22
    166a:	a8 2e       	mov	r10, r24
    166c:	c9 2e       	mov	r12, r25
    166e:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <m_C10>
    1672:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <m_C10+0x1>
    1676:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <m_C10+0x2>
    167a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <m_C10+0x3>
    167e:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    1682:	9b 01       	movw	r18, r22
    1684:	ac 01       	movw	r20, r24
    1686:	89 82       	std	Y+1, r8	; 0x01
    1688:	9a 82       	std	Y+2, r9	; 0x02
    168a:	ab 82       	std	Y+3, r10	; 0x03
    168c:	cc 82       	std	Y+4, r12	; 0x04
    168e:	69 81       	ldd	r22, Y+1	; 0x01
    1690:	7a 81       	ldd	r23, Y+2	; 0x02
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    169a:	2d 2d       	mov	r18, r13
    169c:	3e 2d       	mov	r19, r14
    169e:	4f 2d       	mov	r20, r15
    16a0:	5d 81       	ldd	r21, Y+5	; 0x05
    16a2:	69 83       	std	Y+1, r22	; 0x01
    16a4:	7a 83       	std	Y+2, r23	; 0x02
    16a6:	8b 83       	std	Y+3, r24	; 0x03
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	69 81       	ldd	r22, Y+1	; 0x01
    16ac:	7a 81       	ldd	r23, Y+2	; 0x02
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    16b6:	4b 01       	movw	r8, r22
    16b8:	a8 2e       	mov	r10, r24
    16ba:	c9 2e       	mov	r12, r25
    16bc:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <m_C00>
    16c0:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <m_C00+0x1>
    16c4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <m_C00+0x2>
    16c8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <m_C00+0x3>
    16cc:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
    16d4:	89 82       	std	Y+1, r8	; 0x01
    16d6:	9a 82       	std	Y+2, r9	; 0x02
    16d8:	ab 82       	std	Y+3, r10	; 0x03
    16da:	cc 82       	std	Y+4, r12	; 0x04
    16dc:	69 81       	ldd	r22, Y+1	; 0x01
    16de:	7a 81       	ldd	r23, Y+2	; 0x02
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    16e8:	4b 01       	movw	r8, r22
    16ea:	a8 2e       	mov	r10, r24
    16ec:	c9 2e       	mov	r12, r25
    16ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <m_C01>
    16f2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <m_C01+0x1>
    16f6:	9c 01       	movw	r18, r24
    16f8:	99 0f       	add	r25, r25
    16fa:	44 0b       	sbc	r20, r20
    16fc:	55 0b       	sbc	r21, r21
    16fe:	29 83       	std	Y+1, r18	; 0x01
    1700:	3a 83       	std	Y+2, r19	; 0x02
    1702:	4b 83       	std	Y+3, r20	; 0x03
    1704:	5c 83       	std	Y+4, r21	; 0x04
    1706:	ca 01       	movw	r24, r20
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    170e:	2b 2d       	mov	r18, r11
    1710:	30 2f       	mov	r19, r16
    1712:	41 2f       	mov	r20, r17
    1714:	5e 81       	ldd	r21, Y+6	; 0x06
    1716:	69 83       	std	Y+1, r22	; 0x01
    1718:	7a 83       	std	Y+2, r23	; 0x02
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	69 81       	ldd	r22, Y+1	; 0x01
    1720:	7a 81       	ldd	r23, Y+2	; 0x02
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	89 82       	std	Y+1, r8	; 0x01
    1730:	9a 82       	std	Y+2, r9	; 0x02
    1732:	ab 82       	std	Y+3, r10	; 0x03
    1734:	cc 82       	std	Y+4, r12	; 0x04
    1736:	69 81       	ldd	r22, Y+1	; 0x01
    1738:	7a 81       	ldd	r23, Y+2	; 0x02
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    1742:	4b 01       	movw	r8, r22
    1744:	a8 2e       	mov	r10, r24
    1746:	c9 2e       	mov	r12, r25
    1748:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <m_C21>
    174c:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <m_C21+0x1>
    1750:	9c 01       	movw	r18, r24
    1752:	99 0f       	add	r25, r25
    1754:	44 0b       	sbc	r20, r20
    1756:	55 0b       	sbc	r21, r21
    1758:	29 83       	std	Y+1, r18	; 0x01
    175a:	3a 83       	std	Y+2, r19	; 0x02
    175c:	4b 83       	std	Y+3, r20	; 0x03
    175e:	5c 83       	std	Y+4, r21	; 0x04
    1760:	ca 01       	movw	r24, r20
    1762:	b9 01       	movw	r22, r18
    1764:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    1768:	2d 2d       	mov	r18, r13
    176a:	3e 2d       	mov	r19, r14
    176c:	4f 2d       	mov	r20, r15
    176e:	5d 81       	ldd	r21, Y+5	; 0x05
    1770:	69 83       	std	Y+1, r22	; 0x01
    1772:	7a 83       	std	Y+2, r23	; 0x02
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	69 81       	ldd	r22, Y+1	; 0x01
    177a:	7a 81       	ldd	r23, Y+2	; 0x02
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    1784:	2b 01       	movw	r4, r22
    1786:	3c 01       	movw	r6, r24
    1788:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <m_C11>
    178c:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <m_C11+0x1>
    1790:	9c 01       	movw	r18, r24
    1792:	99 0f       	add	r25, r25
    1794:	44 0b       	sbc	r20, r20
    1796:	55 0b       	sbc	r21, r21
    1798:	29 83       	std	Y+1, r18	; 0x01
    179a:	3a 83       	std	Y+2, r19	; 0x02
    179c:	4b 83       	std	Y+3, r20	; 0x03
    179e:	5c 83       	std	Y+4, r21	; 0x04
    17a0:	ca 01       	movw	r24, r20
    17a2:	b9 01       	movw	r22, r18
    17a4:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	49 82       	std	Y+1, r4	; 0x01
    17ae:	5a 82       	std	Y+2, r5	; 0x02
    17b0:	6b 82       	std	Y+3, r6	; 0x03
    17b2:	7c 82       	std	Y+4, r7	; 0x04
    17b4:	69 81       	ldd	r22, Y+1	; 0x01
    17b6:	7a 81       	ldd	r23, Y+2	; 0x02
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    17c0:	2b 01       	movw	r4, r22
    17c2:	3c 01       	movw	r6, r24
    17c4:	2d 2d       	mov	r18, r13
    17c6:	3e 2d       	mov	r19, r14
    17c8:	4f 2d       	mov	r20, r15
    17ca:	5d 81       	ldd	r21, Y+5	; 0x05
    17cc:	b9 82       	std	Y+1, r11	; 0x01
    17ce:	0a 83       	std	Y+2, r16	; 0x02
    17d0:	1b 83       	std	Y+3, r17	; 0x03
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	8c 83       	std	Y+4, r24	; 0x04
    17d6:	69 81       	ldd	r22, Y+1	; 0x01
    17d8:	7a 81       	ldd	r23, Y+2	; 0x02
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	49 82       	std	Y+1, r4	; 0x01
    17e8:	5a 82       	std	Y+2, r5	; 0x02
    17ea:	6b 82       	std	Y+3, r6	; 0x03
    17ec:	7c 82       	std	Y+4, r7	; 0x04
    17ee:	69 81       	ldd	r22, Y+1	; 0x01
    17f0:	7a 81       	ldd	r23, Y+2	; 0x02
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	89 82       	std	Y+1, r8	; 0x01
    1800:	9a 82       	std	Y+2, r9	; 0x02
    1802:	ab 82       	std	Y+3, r10	; 0x03
    1804:	cc 82       	std	Y+4, r12	; 0x04
    1806:	69 81       	ldd	r22, Y+1	; 0x01
    1808:	7a 81       	ldd	r23, Y+2	; 0x02
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
		return prs_comp; //2505 entspricht 25,5 Grad
}
    1812:	69 83       	std	Y+1, r22	; 0x01
    1814:	7a 83       	std	Y+2, r23	; 0x02
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	69 81       	ldd	r22, Y+1	; 0x01
    181c:	7a 81       	ldd	r23, Y+2	; 0x02
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	26 96       	adiw	r28, 0x06	; 6
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	bf 90       	pop	r11
    1840:	af 90       	pop	r10
    1842:	9f 90       	pop	r9
    1844:	8f 90       	pop	r8
    1846:	7f 90       	pop	r7
    1848:	6f 90       	pop	r6
    184a:	5f 90       	pop	r5
    184c:	4f 90       	pop	r4
    184e:	08 95       	ret
		switch(t_ovrs)
    1850:	5e 81       	ldd	r21, Y+6	; 0x06
				case 64:	scalfactor = 1040384;break;
    1852:	c1 2c       	mov	r12, r1
    1854:	10 ee       	ldi	r17, 0xE0	; 224
    1856:	d1 2e       	mov	r13, r17
    1858:	1f e0       	ldi	r17, 0x0F	; 15
    185a:	e1 2e       	mov	r14, r17
    185c:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    185e:	50 34       	cpi	r21, 0x40	; 64
    1860:	09 f4       	brne	.+2      	; 0x1864 <DPS310_get_pres+0x46c>
    1862:	3a ce       	rjmp	.-908    	; 0x14d8 <DPS310_get_pres+0xe0>
				case 128:	scalfactor = 2088960;break;
    1864:	c1 2c       	mov	r12, r1
    1866:	b0 ee       	ldi	r27, 0xE0	; 224
    1868:	db 2e       	mov	r13, r27
    186a:	bf e1       	ldi	r27, 0x1F	; 31
    186c:	eb 2e       	mov	r14, r27
    186e:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    1870:	50 38       	cpi	r21, 0x80	; 128
    1872:	09 f4       	brne	.+2      	; 0x1876 <DPS310_get_pres+0x47e>
    1874:	31 ce       	rjmp	.-926    	; 0x14d8 <DPS310_get_pres+0xe0>
				case 32:	scalfactor = 516096;break;
    1876:	c1 2c       	mov	r12, r1
    1878:	20 ee       	ldi	r18, 0xE0	; 224
    187a:	d2 2e       	mov	r13, r18
    187c:	27 e0       	ldi	r18, 0x07	; 7
    187e:	e2 2e       	mov	r14, r18
    1880:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    1882:	50 32       	cpi	r21, 0x20	; 32
    1884:	09 f4       	brne	.+2      	; 0x1888 <DPS310_get_pres+0x490>
    1886:	28 ce       	rjmp	.-944    	; 0x14d8 <DPS310_get_pres+0xe0>
    1888:	1b ce       	rjmp	.-970    	; 0x14c0 <DPS310_get_pres+0xc8>
		switch(p_ovrs)
    188a:	ad 81       	ldd	r26, Y+5	; 0x05
    188c:	a8 30       	cpi	r26, 0x08	; 8
    188e:	09 f0       	breq	.+2      	; 0x1892 <DPS310_get_pres+0x49a>
    1890:	82 ce       	rjmp	.-764    	; 0x1596 <DPS310_get_pres+0x19e>
				case 8:	scalfactor = 7864320;break;
    1892:	c1 2c       	mov	r12, r1
    1894:	d1 2c       	mov	r13, r1
    1896:	68 e7       	ldi	r22, 0x78	; 120
    1898:	e6 2e       	mov	r14, r22
    189a:	f1 2c       	mov	r15, r1
    189c:	7c ce       	rjmp	.-776    	; 0x1596 <DPS310_get_pres+0x19e>
		switch(p_ovrs)
    189e:	bd 81       	ldd	r27, Y+5	; 0x05
    18a0:	b0 34       	cpi	r27, 0x40	; 64
    18a2:	f9 f0       	breq	.+62     	; 0x18e2 <DPS310_get_pres+0x4ea>
    18a4:	b0 38       	cpi	r27, 0x80	; 128
    18a6:	21 f1       	breq	.+72     	; 0x18f0 <DPS310_get_pres+0x4f8>
    18a8:	b0 32       	cpi	r27, 0x20	; 32
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DPS310_get_pres+0x4b6>
    18ac:	74 ce       	rjmp	.-792    	; 0x1596 <DPS310_get_pres+0x19e>
				case 32:	scalfactor = 516096;break;
    18ae:	c1 2c       	mov	r12, r1
    18b0:	50 ee       	ldi	r21, 0xE0	; 224
    18b2:	d5 2e       	mov	r13, r21
    18b4:	57 e0       	ldi	r21, 0x07	; 7
    18b6:	e5 2e       	mov	r14, r21
    18b8:	f1 2c       	mov	r15, r1
    18ba:	6d ce       	rjmp	.-806    	; 0x1596 <DPS310_get_pres+0x19e>
				case 16:	scalfactor = 253952;break;
    18bc:	c1 2c       	mov	r12, r1
    18be:	40 ee       	ldi	r20, 0xE0	; 224
    18c0:	d4 2e       	mov	r13, r20
    18c2:	43 e0       	ldi	r20, 0x03	; 3
    18c4:	e4 2e       	mov	r14, r20
    18c6:	f1 2c       	mov	r15, r1
    18c8:	66 ce       	rjmp	.-820    	; 0x1596 <DPS310_get_pres+0x19e>
				case 4:	scalfactor = 3670016;break;
    18ca:	c1 2c       	mov	r12, r1
    18cc:	d1 2c       	mov	r13, r1
    18ce:	38 e3       	ldi	r19, 0x38	; 56
    18d0:	e3 2e       	mov	r14, r19
    18d2:	f1 2c       	mov	r15, r1
    18d4:	60 ce       	rjmp	.-832    	; 0x1596 <DPS310_get_pres+0x19e>
		switch(p_ovrs)
    18d6:	c1 2c       	mov	r12, r1
    18d8:	d1 2c       	mov	r13, r1
    18da:	28 e0       	ldi	r18, 0x08	; 8
    18dc:	e2 2e       	mov	r14, r18
    18de:	f1 2c       	mov	r15, r1
    18e0:	5a ce       	rjmp	.-844    	; 0x1596 <DPS310_get_pres+0x19e>
				case 64:	scalfactor = 1040384;break;
    18e2:	c1 2c       	mov	r12, r1
    18e4:	90 ee       	ldi	r25, 0xE0	; 224
    18e6:	d9 2e       	mov	r13, r25
    18e8:	9f e0       	ldi	r25, 0x0F	; 15
    18ea:	e9 2e       	mov	r14, r25
    18ec:	f1 2c       	mov	r15, r1
    18ee:	53 ce       	rjmp	.-858    	; 0x1596 <DPS310_get_pres+0x19e>
				case 128:	scalfactor = 2088960;break;
    18f0:	c1 2c       	mov	r12, r1
    18f2:	80 ee       	ldi	r24, 0xE0	; 224
    18f4:	d8 2e       	mov	r13, r24
    18f6:	8f e1       	ldi	r24, 0x1F	; 31
    18f8:	e8 2e       	mov	r14, r24
    18fa:	f1 2c       	mov	r15, r1
    18fc:	4c ce       	rjmp	.-872    	; 0x1596 <DPS310_get_pres+0x19e>

000018fe <calcalt>:

long calcalt(double press, uint32_t pressealevel)
{
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	00 d0       	rcall	.+0      	; 0x1908 <calcalt+0xa>
    1908:	00 d0       	rcall	.+0      	; 0x190a <calcalt+0xc>
    190a:	00 d0       	rcall	.+0      	; 0x190c <calcalt+0xe>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	8b 01       	movw	r16, r22
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	9d 83       	std	Y+5, r25	; 0x05
    1916:	b9 01       	movw	r22, r18
    1918:	ca 01       	movw	r24, r20
   return 100*(44330 * (1 - pow((double) press / pressealevel, 0.1902226)));
    191a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__floatunsisf>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	09 83       	std	Y+1, r16	; 0x01
    1924:	1a 83       	std	Y+2, r17	; 0x02
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	8c 83       	std	Y+4, r24	; 0x04
    192e:	69 81       	ldd	r22, Y+1	; 0x01
    1930:	7a 81       	ldd	r23, Y+2	; 0x02
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__divsf3>
    193a:	27 eb       	ldi	r18, 0xB7	; 183
    193c:	39 ec       	ldi	r19, 0xC9	; 201
    193e:	42 e4       	ldi	r20, 0x42	; 66
    1940:	5e e3       	ldi	r21, 0x3E	; 62
    1942:	69 83       	std	Y+1, r22	; 0x01
    1944:	7a 83       	std	Y+2, r23	; 0x02
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	9c 83       	std	Y+4, r25	; 0x04
    194a:	69 81       	ldd	r22, Y+1	; 0x01
    194c:	7a 81       	ldd	r23, Y+2	; 0x02
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <pow>
    1956:	9b 01       	movw	r18, r22
    1958:	ac 01       	movw	r20, r24
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	9f e3       	ldi	r25, 0x3F	; 63
    1962:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__subsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3a e2       	ldi	r19, 0x2A	; 42
    196a:	4d e2       	ldi	r20, 0x2D	; 45
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	69 83       	std	Y+1, r22	; 0x01
    1970:	7a 83       	std	Y+2, r23	; 0x02
    1972:	8b 83       	std	Y+3, r24	; 0x03
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	69 81       	ldd	r22, Y+1	; 0x01
    1978:	7a 81       	ldd	r23, Y+2	; 0x02
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	48 ec       	ldi	r20, 0xC8	; 200
    1988:	52 e4       	ldi	r21, 0x42	; 66
    198a:	69 83       	std	Y+1, r22	; 0x01
    198c:	7a 83       	std	Y+2, r23	; 0x02
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	69 81       	ldd	r22, Y+1	; 0x01
    1994:	7a 81       	ldd	r23, Y+2	; 0x02
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    199e:	69 83       	std	Y+1, r22	; 0x01
    19a0:	7a 83       	std	Y+2, r23	; 0x02
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	69 81       	ldd	r22, Y+1	; 0x01
    19a8:	7a 81       	ldd	r23, Y+2	; 0x02
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fixsfsi>
	//*100 um stellen von Komma nicht zu verlieren
}
    19b2:	26 96       	adiw	r28, 0x06	; 6
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <vor_komma>:

uint16_t vor_komma(uint32_t value)
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <vor_komma+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <vor_komma+0x8>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	return value/100;
    19d4:	24 e6       	ldi	r18, 0x64	; 100
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__udivmodsi4>
	
}
    19e0:	c9 01       	movw	r24, r18
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <nach_komma>:
uint8_t nach_komma(uint32_t value)
{
    19f0:	cf 93       	push	r28
    19f2:	c6 2f       	mov	r28, r22
	uint8_t temp;
	temp = value/100;
    19f4:	24 e6       	ldi	r18, 0x64	; 100
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <__udivmodsi4>
	return value-(temp*100);
	
	
}
    1a00:	8c 2f       	mov	r24, r28
    1a02:	94 e6       	ldi	r25, 0x64	; 100
    1a04:	29 9f       	mul	r18, r25
    1a06:	80 19       	sub	r24, r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <ili9341_hard_init>:
uint16_t _height = 240;


void ili9341_hard_init(void)//init hardware
{
rstddr=0xFF;//output for reset
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	8a b9       	out	0x0a, r24	; 10
rstport |=(1<<rst);//pull high for normal operation
    1a12:	5f 9a       	sbi	0x0b, 7	; 11
controlddr|=(1<<dc);//D/C as output
    1a14:	20 9a       	sbi	0x04, 0	; 4
}
    1a16:	08 95       	ret

00001a18 <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
    1a18:	84 b1       	in	r24, 0x04	; 4
    1a1a:	8e 62       	ori	r24, 0x2E	; 46
    1a1c:	84 b9       	out	0x04, r24	; 4
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
    1a1e:	80 e5       	ldi	r24, 0x50	; 80
    1a20:	8c bd       	out	0x2c, r24	; 44
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
    1a22:	8d b5       	in	r24, 0x2d	; 45
    1a24:	81 60       	ori	r24, 0x01	; 1
    1a26:	8d bd       	out	0x2d, r24	; 45
PORTB |=(1<<1);//cs off during startup
    1a28:	29 9a       	sbi	0x05, 1	; 5

}
    1a2a:	08 95       	ret

00001a2c <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
    1a2c:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    1a2e:	0d b4       	in	r0, 0x2d	; 45
    1a30:	07 fe       	sbrs	r0, 7
    1a32:	fd cf       	rjmp	.-6      	; 0x1a2e <ili9341_spi_send+0x2>
}
    1a34:	08 95       	ret

00001a36 <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
    1a36:	95 b1       	in	r25, 0x05	; 5
    1a38:	9c 7f       	andi	r25, 0xFC	; 252
    1a3a:	95 b9       	out	0x05, r25	; 5
	__builtin_avr_delay_cycles(__ticks_dc);
    1a3c:	9d e0       	ldi	r25, 0x0D	; 13
    1a3e:	9a 95       	dec	r25
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <ili9341_writecommand8+0x8>
    1a42:	00 00       	nop
_delay_us(5);//little delay
ili9341_spi_send(com);
    1a44:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ili9341_spi_send>
controlport |=(1<<cs);//pull high cs
    1a48:	29 9a       	sbi	0x05, 1	; 5
}
    1a4a:	08 95       	ret

00001a4c <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
controlport |=(1<<dc);//st dc high for data
    1a4c:	28 9a       	sbi	0x05, 0	; 5
    1a4e:	92 e0       	ldi	r25, 0x02	; 2
    1a50:	9a 95       	dec	r25
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <ili9341_writedata8+0x4>
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <ili9341_writedata8+0xa>
_delay_us(1);//delay
controlport &=~(1<<cs);//set cs low for operation
    1a56:	29 98       	cbi	0x05, 1	; 5
ili9341_spi_send(data);
    1a58:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ili9341_spi_send>
controlport |=(1<<cs);
    1a5c:	29 9a       	sbi	0x05, 1	; 5
}
    1a5e:	08 95       	ret

00001a60 <ili9341_setaddress>:


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	e8 2e       	mov	r14, r24
    1a70:	d9 2e       	mov	r13, r25
    1a72:	d6 2f       	mov	r29, r22
    1a74:	17 2f       	mov	r17, r23
    1a76:	04 2f       	mov	r16, r20
    1a78:	f5 2e       	mov	r15, r21
    1a7a:	c2 2f       	mov	r28, r18
ili9341_writecommand8(0x2A);
    1a7c:	8a e2       	ldi	r24, 0x2A	; 42
    1a7e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
    1a82:	8d 2d       	mov	r24, r13
    1a84:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(x1);
    1a88:	8e 2d       	mov	r24, r14
    1a8a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(x2>>8);
    1a8e:	8f 2d       	mov	r24, r15
    1a90:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(x2);
    1a94:	80 2f       	mov	r24, r16
    1a96:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

ili9341_writecommand8(0x2B);
    1a9a:	8b e2       	ldi	r24, 0x2B	; 43
    1a9c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
    1aa0:	81 2f       	mov	r24, r17
    1aa2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(y1);
    1aa6:	8d 2f       	mov	r24, r29
    1aa8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(y2);
    1aac:	8c 2f       	mov	r24, r28
    1aae:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(y2);
    1ab2:	8c 2f       	mov	r24, r28
    1ab4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
    1ab8:	8c e2       	ldi	r24, 0x2C	; 44
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
ili9341_writecommand8(0x2C);//meory write
    1ac8:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <ili9341_writecommand8>

00001acc <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
    1acc:	5f 9a       	sbi	0x0b, 7	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
    1ace:	2f ef       	ldi	r18, 0xFF	; 255
    1ad0:	81 ee       	ldi	r24, 0xE1	; 225
    1ad2:	94 e0       	ldi	r25, 0x04	; 4
    1ad4:	21 50       	subi	r18, 0x01	; 1
    1ad6:	80 40       	sbci	r24, 0x00	; 0
    1ad8:	90 40       	sbci	r25, 0x00	; 0
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <ili9341_hard_reset+0x8>
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <ili9341_hard_reset+0x12>
    1ade:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
    1ae0:	5f 98       	cbi	0x0b, 7	; 11
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	81 ee       	ldi	r24, 0xE1	; 225
    1ae6:	94 e0       	ldi	r25, 0x04	; 4
    1ae8:	21 50       	subi	r18, 0x01	; 1
    1aea:	80 40       	sbci	r24, 0x00	; 0
    1aec:	90 40       	sbci	r25, 0x00	; 0
    1aee:	e1 f7       	brne	.-8      	; 0x1ae8 <ili9341_hard_reset+0x1c>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <ili9341_hard_reset+0x26>
    1af2:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
    1af4:	5f 9a       	sbi	0x0b, 7	; 11
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	81 ee       	ldi	r24, 0xE1	; 225
    1afa:	94 e0       	ldi	r25, 0x04	; 4
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	80 40       	sbci	r24, 0x00	; 0
    1b00:	90 40       	sbci	r25, 0x00	; 0
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <ili9341_hard_reset+0x30>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <ili9341_hard_reset+0x3a>
    1b06:	00 00       	nop
_delay_ms(200);
}
    1b08:	08 95       	ret

00001b0a <ili9341_init>:


void ili9341_init(void)//set up display using predefined command sequence
{
ili9341_hard_init();
    1b0a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <ili9341_hard_init>
ili9341_spi_init();
    1b0e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <ili9341_spi_init>
ili9341_hard_reset();
    1b12:	0e 94 66 0d 	call	0x1acc	; 0x1acc <ili9341_hard_reset>
ili9341_writecommand8(0x01);//soft reset
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
    1b1c:	2f ef       	ldi	r18, 0xFF	; 255
    1b1e:	89 e6       	ldi	r24, 0x69	; 105
    1b20:	98 e1       	ldi	r25, 0x18	; 24
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	80 40       	sbci	r24, 0x00	; 0
    1b26:	90 40       	sbci	r25, 0x00	; 0
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <ili9341_init+0x18>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <ili9341_init+0x22>
    1b2c:	00 00       	nop
_delay_ms(1000);
//power control A
ili9341_writecommand8(0xCB);
    1b2e:	8b ec       	ldi	r24, 0xCB	; 203
    1b30:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x39);
    1b34:	89 e3       	ldi	r24, 0x39	; 57
    1b36:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x2C);
    1b3a:	8c e2       	ldi	r24, 0x2C	; 44
    1b3c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x00);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x34);
    1b46:	84 e3       	ldi	r24, 0x34	; 52
    1b48:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x02);
    1b4c:	82 e0       	ldi	r24, 0x02	; 2
    1b4e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//power control B
ili9341_writecommand8(0xCF);
    1b52:	8f ec       	ldi	r24, 0xCF	; 207
    1b54:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0xC1);
    1b5e:	81 ec       	ldi	r24, 0xC1	; 193
    1b60:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x30);
    1b64:	80 e3       	ldi	r24, 0x30	; 48
    1b66:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//driver timing control A
ili9341_writecommand8(0xE8);
    1b6a:	88 ee       	ldi	r24, 0xE8	; 232
    1b6c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x85);
    1b70:	85 e8       	ldi	r24, 0x85	; 133
    1b72:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x00);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x78);
    1b7c:	88 e7       	ldi	r24, 0x78	; 120
    1b7e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//driver timing control B
ili9341_writecommand8(0xEA);
    1b82:	8a ee       	ldi	r24, 0xEA	; 234
    1b84:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x00);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//power on sequence control
ili9341_writecommand8(0xED);
    1b94:	8d ee       	ldi	r24, 0xED	; 237
    1b96:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x64);
    1b9a:	84 e6       	ldi	r24, 0x64	; 100
    1b9c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x03);
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x12);
    1ba6:	82 e1       	ldi	r24, 0x12	; 18
    1ba8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x81);
    1bac:	81 e8       	ldi	r24, 0x81	; 129
    1bae:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//pump ratio control
ili9341_writecommand8(0xF7);
    1bb2:	87 ef       	ldi	r24, 0xF7	; 247
    1bb4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x20);
    1bb8:	80 e2       	ldi	r24, 0x20	; 32
    1bba:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//power control,VRH[5:0]
ili9341_writecommand8(0xC0);
    1bbe:	80 ec       	ldi	r24, 0xC0	; 192
    1bc0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x23);
    1bc4:	83 e2       	ldi	r24, 0x23	; 35
    1bc6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//Power control,SAP[2:0];BT[3:0]
ili9341_writecommand8(0xC1);
    1bca:	81 ec       	ldi	r24, 0xC1	; 193
    1bcc:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x10);
    1bd0:	80 e1       	ldi	r24, 0x10	; 16
    1bd2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//vcm control
ili9341_writecommand8(0xC5);
    1bd6:	85 ec       	ldi	r24, 0xC5	; 197
    1bd8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x3E);
    1bdc:	8e e3       	ldi	r24, 0x3E	; 62
    1bde:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x28);
    1be2:	88 e2       	ldi	r24, 0x28	; 40
    1be4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//vcm control 2
ili9341_writecommand8(0xC7);
    1be8:	87 ec       	ldi	r24, 0xC7	; 199
    1bea:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x86);
    1bee:	86 e8       	ldi	r24, 0x86	; 134
    1bf0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//memory access control
ili9341_writecommand8(0x36);
    1bf4:	86 e3       	ldi	r24, 0x36	; 54
    1bf6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x48);
    1bfa:	88 e4       	ldi	r24, 0x48	; 72
    1bfc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//pixel format
ili9341_writecommand8(0x3A);
    1c00:	8a e3       	ldi	r24, 0x3A	; 58
    1c02:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x55);
    1c06:	85 e5       	ldi	r24, 0x55	; 85
    1c08:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//frameration control,normal mode full colours
ili9341_writecommand8(0xB1);
    1c0c:	81 eb       	ldi	r24, 0xB1	; 177
    1c0e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x18);
    1c18:	88 e1       	ldi	r24, 0x18	; 24
    1c1a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//display function control
ili9341_writecommand8(0xB6);
    1c1e:	86 eb       	ldi	r24, 0xB6	; 182
    1c20:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x08);
    1c24:	88 e0       	ldi	r24, 0x08	; 8
    1c26:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x82);
    1c2a:	82 e8       	ldi	r24, 0x82	; 130
    1c2c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x27);
    1c30:	87 e2       	ldi	r24, 0x27	; 39
    1c32:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//3gamma function disable
ili9341_writecommand8(0xF2);
    1c36:	82 ef       	ldi	r24, 0xF2	; 242
    1c38:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//gamma curve selected
ili9341_writecommand8(0x26);
    1c42:	86 e2       	ldi	r24, 0x26	; 38
    1c44:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x01);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//set positive gamma correction
ili9341_writecommand8(0xE0);
    1c4e:	80 ee       	ldi	r24, 0xE0	; 224
    1c50:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x0F);
    1c54:	8f e0       	ldi	r24, 0x0F	; 15
    1c56:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x31);
    1c5a:	81 e3       	ldi	r24, 0x31	; 49
    1c5c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x2B);
    1c60:	8b e2       	ldi	r24, 0x2B	; 43
    1c62:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0C);
    1c66:	8c e0       	ldi	r24, 0x0C	; 12
    1c68:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
    1c6c:	8e e0       	ldi	r24, 0x0E	; 14
    1c6e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x08);
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x4E);
    1c78:	8e e4       	ldi	r24, 0x4E	; 78
    1c7a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0xF1);
    1c7e:	81 ef       	ldi	r24, 0xF1	; 241
    1c80:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x37);
    1c84:	87 e3       	ldi	r24, 0x37	; 55
    1c86:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x07);
    1c8a:	87 e0       	ldi	r24, 0x07	; 7
    1c8c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x10);
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x03);
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
    1c9c:	8e e0       	ldi	r24, 0x0E	; 14
    1c9e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x09);
    1ca2:	89 e0       	ldi	r24, 0x09	; 9
    1ca4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x00);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//set negative gamma correction
ili9341_writecommand8(0xE1);
    1cae:	81 ee       	ldi	r24, 0xE1	; 225
    1cb0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0E);
    1cba:	8e e0       	ldi	r24, 0x0E	; 14
    1cbc:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x14);
    1cc0:	84 e1       	ldi	r24, 0x14	; 20
    1cc2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x03);
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x11);
    1ccc:	81 e1       	ldi	r24, 0x11	; 17
    1cce:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x07);
    1cd2:	87 e0       	ldi	r24, 0x07	; 7
    1cd4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x31);
    1cd8:	81 e3       	ldi	r24, 0x31	; 49
    1cda:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0xC1);
    1cde:	81 ec       	ldi	r24, 0xC1	; 193
    1ce0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x48);
    1ce4:	88 e4       	ldi	r24, 0x48	; 72
    1ce6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x08);
    1cea:	88 e0       	ldi	r24, 0x08	; 8
    1cec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0F);
    1cf0:	8f e0       	ldi	r24, 0x0F	; 15
    1cf2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0C);
    1cf6:	8c e0       	ldi	r24, 0x0C	; 12
    1cf8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x31);
    1cfc:	81 e3       	ldi	r24, 0x31	; 49
    1cfe:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x36);
    1d02:	86 e3       	ldi	r24, 0x36	; 54
    1d04:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(0x0F);
    1d08:	8f e0       	ldi	r24, 0x0F	; 15
    1d0a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>

//exit sleep
ili9341_writecommand8(0x11);
    1d0e:	81 e1       	ldi	r24, 0x11	; 17
    1d10:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
    1d14:	2f ef       	ldi	r18, 0xFF	; 255
    1d16:	8d ee       	ldi	r24, 0xED	; 237
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	21 50       	subi	r18, 0x01	; 1
    1d1c:	80 40       	sbci	r24, 0x00	; 0
    1d1e:	90 40       	sbci	r25, 0x00	; 0
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <ili9341_init+0x210>
    1d22:	00 c0       	rjmp	.+0      	; 0x1d24 <ili9341_init+0x21a>
    1d24:	00 00       	nop
_delay_ms(120);
//display on
ili9341_writecommand8(0x29);
    1d26:	89 e2       	ldi	r24, 0x29	; 41
    1d28:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <ili9341_writecommand8>

00001d2c <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
    1d2c:	cf 93       	push	r28
    1d2e:	c8 2f       	mov	r28, r24
    1d30:	89 2f       	mov	r24, r25
ili9341_writedata8(colour>>8);
    1d32:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
ili9341_writedata8(colour);
    1d36:	8c 2f       	mov	r24, r28
}
    1d38:	cf 91       	pop	r28
ili9341_writedata8(colour);
    1d3a:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <ili9341_writedata8>

00001d3e <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	18 2f       	mov	r17, r24
    1d4c:	09 2f       	mov	r16, r25
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
    1d4e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <LCD_H>
    1d52:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <LCD_H+0x1>
    1d56:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <LCD_W>
    1d5a:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <LCD_W+0x1>
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	31 09       	sbc	r19, r1
    1d62:	41 50       	subi	r20, 0x01	; 1
    1d64:	51 09       	sbc	r21, r1
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <ili9341_setaddress>

for(i=0;i<LCD_W;i++)
    1d72:	d0 e0       	ldi	r29, 0x00	; 0
    1d74:	c0 e0       	ldi	r28, 0x00	; 0
    1d76:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    1d7a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    1d7e:	c8 17       	cp	r28, r24
    1d80:	d9 07       	cpc	r29, r25
    1d82:	b8 f0       	brcs	.+46     	; 0x1db2 <ili9341_clear+0x74>
{
ili9341_pushcolour(colour);
}
}

}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	08 95       	ret
ili9341_pushcolour(colour);
    1d92:	81 2f       	mov	r24, r17
    1d94:	90 2f       	mov	r25, r16
    1d96:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ili9341_pushcolour>
for(j=0;j<LCD_H;j++)
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	e8 1a       	sub	r14, r24
    1d9e:	f8 0a       	sbc	r15, r24
    1da0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    1da4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    1da8:	e8 16       	cp	r14, r24
    1daa:	f9 06       	cpc	r15, r25
    1dac:	90 f3       	brcs	.-28     	; 0x1d92 <ili9341_clear+0x54>
for(i=0;i<LCD_W;i++)
    1dae:	21 96       	adiw	r28, 0x01	; 1
    1db0:	e2 cf       	rjmp	.-60     	; 0x1d76 <ili9341_clear+0x38>
for(j=0;j<LCD_H;j++)
    1db2:	f1 2c       	mov	r15, r1
    1db4:	e1 2c       	mov	r14, r1
    1db6:	f4 cf       	rjmp	.-24     	; 0x1da0 <ili9341_clear+0x62>

00001db8 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	d4 2f       	mov	r29, r20
    1dc0:	c5 2f       	mov	r28, r21
if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
    1dc2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    1dc6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    1dca:	e8 17       	cp	r30, r24
    1dcc:	f9 07       	cpc	r31, r25
    1dce:	b0 f4       	brcc	.+44     	; 0x1dfc <ili9341_drawpixel+0x44>
    1dd0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    1dd4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    1dd8:	68 17       	cp	r22, r24
    1dda:	79 07       	cpc	r23, r25
    1ddc:	78 f4       	brcc	.+30     	; 0x1dfc <ili9341_drawpixel+0x44>

ili9341_setaddress(x3,y3,x3+1,y3+1);
    1dde:	9b 01       	movw	r18, r22
    1de0:	2f 5f       	subi	r18, 0xFF	; 255
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	af 01       	movw	r20, r30
    1de6:	4f 5f       	subi	r20, 0xFF	; 255
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	cf 01       	movw	r24, r30
    1dec:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <ili9341_setaddress>

ili9341_pushcolour(colour1);
    1df0:	8d 2f       	mov	r24, r29
    1df2:	9c 2f       	mov	r25, r28
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
ili9341_pushcolour(colour1);
    1df8:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <ili9341_pushcolour>
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	08 95       	ret

00001e02 <ili9341_drawvline>:


//draw vertical line
void ili9341_drawvline(uint16_t x,uint16_t y,uint16_t h,uint16_t colour)//basically we will see this line horizental if we see the display 320*240
{
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	ea 01       	movw	r28, r20
    1e0e:	12 2f       	mov	r17, r18
    1e10:	03 2f       	mov	r16, r19
if((x >=LCD_W) || (y >=LCD_H)) return;
    1e12:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    1e16:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    1e1a:	e8 17       	cp	r30, r24
    1e1c:	f9 07       	cpc	r31, r25
    1e1e:	18 f5       	brcc	.+70     	; 0x1e66 <ili9341_drawvline+0x64>
    1e20:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    1e24:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    1e28:	68 17       	cp	r22, r24
    1e2a:	79 07       	cpc	r23, r25
    1e2c:	e0 f4       	brcc	.+56     	; 0x1e66 <ili9341_drawvline+0x64>
if((y+h-1)>=LCD_H)
    1e2e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <LCD_H>
    1e32:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <LCD_H+0x1>
    1e36:	ca 01       	movw	r24, r20
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	86 0f       	add	r24, r22
    1e3c:	97 1f       	adc	r25, r23
    1e3e:	82 17       	cp	r24, r18
    1e40:	93 07       	cpc	r25, r19
    1e42:	30 f0       	brcs	.+12     	; 0x1e50 <ili9341_drawvline+0x4e>
h=LCD_H-y;
    1e44:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <LCD_H>
    1e48:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <LCD_H+0x1>
    1e4c:	c6 1b       	sub	r28, r22
    1e4e:	d7 0b       	sbc	r29, r23
ili9341_setaddress(x,y,x,y+h-1);
    1e50:	9b 01       	movw	r18, r22
    1e52:	21 50       	subi	r18, 0x01	; 1
    1e54:	31 09       	sbc	r19, r1
    1e56:	2c 0f       	add	r18, r28
    1e58:	3d 1f       	adc	r19, r29
    1e5a:	af 01       	movw	r20, r30
    1e5c:	cf 01       	movw	r24, r30
    1e5e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <ili9341_setaddress>
while(h--)
    1e62:	21 97       	sbiw	r28, 0x01	; 1
    1e64:	28 f4       	brcc	.+10     	; 0x1e70 <ili9341_drawvline+0x6e>
{
ili9341_pushcolour(colour);
}
}
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret
ili9341_pushcolour(colour);
    1e70:	81 2f       	mov	r24, r17
    1e72:	90 2f       	mov	r25, r16
    1e74:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ili9341_pushcolour>
    1e78:	f4 cf       	rjmp	.-24     	; 0x1e62 <ili9341_drawvline+0x60>

00001e7a <ili9341_drawhline>:


//draw horizental line

void ili9341_drawhline(uint16_t x,uint16_t y,uint16_t w,uint16_t colour)
{
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	fc 01       	movw	r30, r24
    1e84:	ea 01       	movw	r28, r20
    1e86:	12 2f       	mov	r17, r18
    1e88:	03 2f       	mov	r16, r19
if((x >=LCD_W) || (y >=LCD_H)) return;
    1e8a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    1e8e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    1e92:	e8 17       	cp	r30, r24
    1e94:	f9 07       	cpc	r31, r25
    1e96:	18 f5       	brcc	.+70     	; 0x1ede <ili9341_drawhline+0x64>
    1e98:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    1e9c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    1ea0:	68 17       	cp	r22, r24
    1ea2:	79 07       	cpc	r23, r25
    1ea4:	e0 f4       	brcc	.+56     	; 0x1ede <ili9341_drawhline+0x64>
if((x+w-1)>=LCD_W)
    1ea6:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <LCD_W>
    1eaa:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <LCD_W+0x1>
    1eae:	ca 01       	movw	r24, r20
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	8e 0f       	add	r24, r30
    1eb4:	9f 1f       	adc	r25, r31
    1eb6:	82 17       	cp	r24, r18
    1eb8:	93 07       	cpc	r25, r19
    1eba:	30 f0       	brcs	.+12     	; 0x1ec8 <ili9341_drawhline+0x4e>
w=LCD_W-x;
    1ebc:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <LCD_W>
    1ec0:	d0 91 1e 01 	lds	r29, 0x011E	; 0x80011e <LCD_W+0x1>
    1ec4:	ce 1b       	sub	r28, r30
    1ec6:	df 0b       	sbc	r29, r31
ili9341_setaddress(x,y,x+w-1,y);
    1ec8:	af 01       	movw	r20, r30
    1eca:	41 50       	subi	r20, 0x01	; 1
    1ecc:	51 09       	sbc	r21, r1
    1ece:	4c 0f       	add	r20, r28
    1ed0:	5d 1f       	adc	r21, r29
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <ili9341_setaddress>
while(w--)
    1eda:	21 97       	sbiw	r28, 0x01	; 1
    1edc:	28 f4       	brcc	.+10     	; 0x1ee8 <ili9341_drawhline+0x6e>
{
ili9341_pushcolour(colour);
}
}
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	08 95       	ret
ili9341_pushcolour(colour);
    1ee8:	81 2f       	mov	r24, r17
    1eea:	90 2f       	mov	r25, r16
    1eec:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ili9341_pushcolour>
    1ef0:	f4 cf       	rjmp	.-24     	; 0x1eda <ili9341_drawhline+0x60>

00001ef2 <ili9341_fillrect>:

//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	fc 01       	movw	r30, r24
    1f04:	7a 01       	movw	r14, r20
    1f06:	e9 01       	movw	r28, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    1f08:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    1f0c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    1f10:	e8 17       	cp	r30, r24
    1f12:	f9 07       	cpc	r31, r25
    1f14:	c0 f5       	brcc	.+112    	; 0x1f86 <ili9341_fillrect+0x94>
    1f16:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    1f1a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    1f1e:	68 17       	cp	r22, r24
    1f20:	79 07       	cpc	r23, r25
    1f22:	88 f5       	brcc	.+98     	; 0x1f86 <ili9341_fillrect+0x94>
if((x+w-1)>=LCD_W)
    1f24:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <LCD_W>
    1f28:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <LCD_W+0x1>
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	8e 0f       	add	r24, r30
    1f32:	9f 1f       	adc	r25, r31
    1f34:	82 17       	cp	r24, r18
    1f36:	93 07       	cpc	r25, r19
    1f38:	30 f0       	brcs	.+12     	; 0x1f46 <ili9341_fillrect+0x54>
w=LCD_W-x;
    1f3a:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <LCD_W>
    1f3e:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <LCD_W+0x1>
    1f42:	ee 1a       	sub	r14, r30
    1f44:	ff 0a       	sbc	r15, r31
if((y+h-1)>=LCD_H)
    1f46:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <LCD_H>
    1f4a:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <LCD_H+0x1>
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	86 0f       	add	r24, r22
    1f54:	97 1f       	adc	r25, r23
    1f56:	82 17       	cp	r24, r18
    1f58:	93 07       	cpc	r25, r19
    1f5a:	30 f0       	brcs	.+12     	; 0x1f68 <ili9341_fillrect+0x76>
h=LCD_H-y;
    1f5c:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <LCD_H>
    1f60:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <LCD_H+0x1>
    1f64:	c6 1b       	sub	r28, r22
    1f66:	d7 0b       	sbc	r29, r23

ili9341_setaddress(x, y, x+w-1, y+h-1);
    1f68:	9b 01       	movw	r18, r22
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	31 09       	sbc	r19, r1
    1f6e:	2c 0f       	add	r18, r28
    1f70:	3d 1f       	adc	r19, r29
    1f72:	af 01       	movw	r20, r30
    1f74:	41 50       	subi	r20, 0x01	; 1
    1f76:	51 09       	sbc	r21, r1
    1f78:	4e 0d       	add	r20, r14
    1f7a:	5f 1d       	adc	r21, r15
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <ili9341_setaddress>

for(y=h; y>0; y--) 
    1f82:	20 97       	sbiw	r28, 0x00	; 0
    1f84:	a1 f4       	brne	.+40     	; 0x1fae <ili9341_fillrect+0xbc>
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
}
}
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	08 95       	ret
ili9341_pushcolour(colour);
    1f98:	c8 01       	movw	r24, r16
    1f9a:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ili9341_pushcolour>
for(x=w; x>0; x--)
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	c8 1a       	sub	r12, r24
    1fa2:	d1 08       	sbc	r13, r1
    1fa4:	c1 14       	cp	r12, r1
    1fa6:	d1 04       	cpc	r13, r1
    1fa8:	b9 f7       	brne	.-18     	; 0x1f98 <ili9341_fillrect+0xa6>
for(y=h; y>0; y--) 
    1faa:	21 97       	sbiw	r28, 0x01	; 1
    1fac:	ea cf       	rjmp	.-44     	; 0x1f82 <ili9341_fillrect+0x90>
for(x=w; x>0; x--)
    1fae:	67 01       	movw	r12, r14
    1fb0:	f9 cf       	rjmp	.-14     	; 0x1fa4 <ili9341_fillrect+0xb2>

00001fb2 <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
    1fb2:	cf 93       	push	r28
    1fb4:	c8 2f       	mov	r28, r24
uint8_t rotation;
ili9341_writecommand8(0x36);
    1fb6:	86 e3       	ldi	r24, 0x36	; 54
    1fb8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <ili9341_writecommand8>
rotation=m%4;
    1fbc:	c3 70       	andi	r28, 0x03	; 3
switch (rotation) 
    1fbe:	c2 30       	cpi	r28, 0x02	; 2
    1fc0:	89 f0       	breq	.+34     	; 0x1fe4 <ili9341_setRotation+0x32>
    1fc2:	c3 30       	cpi	r28, 0x03	; 3
    1fc4:	01 f1       	breq	.+64     	; 0x2006 <ili9341_setRotation+0x54>
{
case 0:
ili9341_writedata8(0x40|0x08);
    1fc6:	88 e4       	ldi	r24, 0x48	; 72
switch (rotation) 
    1fc8:	c1 30       	cpi	r28, 0x01	; 1
    1fca:	69 f4       	brne	.+26     	; 0x1fe6 <ili9341_setRotation+0x34>
LCD_W = 240;
LCD_H = 320;
break;
case 1:
ili9341_writedata8(0x20|0x08);
    1fcc:	88 e2       	ldi	r24, 0x28	; 40
ili9341_writedata8(0x80|0x08);
LCD_W  = 240;
LCD_H = 320;
break;
case 3:
ili9341_writedata8(0x40|0x80|0x20|0x08);
    1fce:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
LCD_W  = 320;
    1fd2:	80 e4       	ldi	r24, 0x40	; 64
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <LCD_W+0x1>
    1fda:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LCD_W>
LCD_H = 240;
    1fde:	80 ef       	ldi	r24, 0xF0	; 240
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <ili9341_setRotation+0x48>
ili9341_writedata8(0x80|0x08);
    1fe4:	88 e8       	ldi	r24, 0x88	; 136
    1fe6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <ili9341_writedata8>
LCD_W  = 240;
    1fea:	80 ef       	ldi	r24, 0xF0	; 240
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <LCD_W+0x1>
    1ff2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <LCD_W>
LCD_H = 320;
    1ff6:	80 e4       	ldi	r24, 0x40	; 64
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
LCD_H = 240;
    1ffa:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <LCD_H+0x1>
    1ffe:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LCD_H>
break;
}
}
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret
ili9341_writedata8(0x40|0x80|0x20|0x08);
    2006:	88 ee       	ldi	r24, 0xE8	; 232
    2008:	e2 cf       	rjmp	.-60     	; 0x1fce <ili9341_setRotation+0x1c>

0000200a <ili9341_drawCircle>:

// Draw a circle outline
void ili9341_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) 
{
    200a:	2f 92       	push	r2
    200c:	3f 92       	push	r3
    200e:	4f 92       	push	r4
    2010:	5f 92       	push	r5
    2012:	6f 92       	push	r6
    2014:	7f 92       	push	r7
    2016:	8f 92       	push	r8
    2018:	9f 92       	push	r9
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	00 d0       	rcall	.+0      	; 0x2030 <ili9341_drawCircle+0x26>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <ili9341_drawCircle+0x28>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	8c 01       	movw	r16, r24
    2038:	7b 01       	movw	r14, r22
    203a:	4b 83       	std	Y+3, r20	; 0x03
    203c:	5c 83       	std	Y+4, r21	; 0x04
    203e:	52 2e       	mov	r5, r18
    2040:	43 2e       	mov	r4, r19
  int16_t f = 1 - r;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	5c 01       	movw	r10, r24
    2048:	2b 81       	ldd	r18, Y+3	; 0x03
    204a:	3c 81       	ldd	r19, Y+4	; 0x04
    204c:	a2 1a       	sub	r10, r18
    204e:	b3 0a       	sbc	r11, r19
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    2050:	c9 01       	movw	r24, r18
    2052:	91 95       	neg	r25
    2054:	81 95       	neg	r24
    2056:	91 09       	sbc	r25, r1
    2058:	9c 01       	movw	r18, r24
    205a:	22 0f       	add	r18, r18
    205c:	33 1f       	adc	r19, r19
    205e:	3a 83       	std	Y+2, r19	; 0x02
    2060:	29 83       	std	Y+1, r18	; 0x01
  int16_t x = 0;
  int16_t y = r;

  ili9341_drawpixel(x0  , y0+r, color);
    2062:	6b 81       	ldd	r22, Y+3	; 0x03
    2064:	7c 81       	ldd	r23, Y+4	; 0x04
    2066:	6e 0d       	add	r22, r14
    2068:	7f 1d       	adc	r23, r15
    206a:	45 2d       	mov	r20, r5
    206c:	54 2d       	mov	r21, r4
    206e:	c8 01       	movw	r24, r16
    2070:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
  ili9341_drawpixel(x0  , y0-r, color);
    2074:	b7 01       	movw	r22, r14
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	68 1b       	sub	r22, r24
    207c:	79 0b       	sbc	r23, r25
    207e:	45 2d       	mov	r20, r5
    2080:	54 2d       	mov	r21, r4
    2082:	c8 01       	movw	r24, r16
    2084:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
  ili9341_drawpixel(x0+r, y0  , color);
    2088:	45 2d       	mov	r20, r5
    208a:	54 2d       	mov	r21, r4
    208c:	b7 01       	movw	r22, r14
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	80 0f       	add	r24, r16
    2094:	91 1f       	adc	r25, r17
    2096:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
  ili9341_drawpixel(x0-r, y0  , color);
    209a:	45 2d       	mov	r20, r5
    209c:	54 2d       	mov	r21, r4
    209e:	b7 01       	movw	r22, r14
    20a0:	c8 01       	movw	r24, r16
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	82 1b       	sub	r24, r18
    20a8:	93 0b       	sbc	r25, r19
    20aa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
  int16_t x = 0;
    20ae:	d1 2c       	mov	r13, r1
    20b0:	c1 2c       	mov	r12, r1

  while (x<y) {
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	c8 16       	cp	r12, r24
    20b8:	d9 06       	cpc	r13, r25
    20ba:	bc f0       	brlt	.+46     	; 0x20ea <ili9341_drawCircle+0xe0>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    ili9341_drawpixel(x0 - y, y0 + x, color);
    ili9341_drawpixel(x0 + y, y0 - x, color);
    ili9341_drawpixel(x0 - y, y0 - x, color);
  }
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	cf 90       	pop	r12
    20d4:	bf 90       	pop	r11
    20d6:	af 90       	pop	r10
    20d8:	9f 90       	pop	r9
    20da:	8f 90       	pop	r8
    20dc:	7f 90       	pop	r7
    20de:	6f 90       	pop	r6
    20e0:	5f 90       	pop	r5
    20e2:	4f 90       	pop	r4
    20e4:	3f 90       	pop	r3
    20e6:	2f 90       	pop	r2
    20e8:	08 95       	ret
    if (f >= 0) {
    20ea:	b7 fc       	sbrc	r11, 7
    20ec:	0d c0       	rjmp	.+26     	; 0x2108 <ili9341_drawCircle+0xfe>
      y--;
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    20f8:	29 81       	ldd	r18, Y+1	; 0x01
    20fa:	3a 81       	ldd	r19, Y+2	; 0x02
    20fc:	2e 5f       	subi	r18, 0xFE	; 254
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	3a 83       	std	Y+2, r19	; 0x02
    2102:	29 83       	std	Y+1, r18	; 0x01
      f += ddF_y;
    2104:	a2 0e       	add	r10, r18
    2106:	b3 1e       	adc	r11, r19
    x++;
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	c3 1a       	sub	r12, r19
    210c:	d3 0a       	sbc	r13, r19
    f += ddF_x;
    210e:	c6 01       	movw	r24, r12
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	a8 0e       	add	r10, r24
    2118:	b9 1e       	adc	r11, r25
    ili9341_drawpixel(x0 + x, y0 + y, color);
    211a:	38 01       	movw	r6, r16
    211c:	6c 0c       	add	r6, r12
    211e:	7d 1c       	adc	r7, r13
    2120:	45 2d       	mov	r20, r5
    2122:	54 2d       	mov	r21, r4
    2124:	8b 80       	ldd	r8, Y+3	; 0x03
    2126:	9c 80       	ldd	r9, Y+4	; 0x04
    2128:	8e 0c       	add	r8, r14
    212a:	9f 1c       	adc	r9, r15
    212c:	b4 01       	movw	r22, r8
    212e:	c3 01       	movw	r24, r6
    2130:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 + y, color);
    2134:	18 01       	movw	r2, r16
    2136:	2c 18       	sub	r2, r12
    2138:	3d 08       	sbc	r3, r13
    213a:	45 2d       	mov	r20, r5
    213c:	54 2d       	mov	r21, r4
    213e:	b4 01       	movw	r22, r8
    2140:	c1 01       	movw	r24, r2
    2142:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + x, y0 - y, color);
    2146:	45 2d       	mov	r20, r5
    2148:	54 2d       	mov	r21, r4
    214a:	47 01       	movw	r8, r14
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	88 1a       	sub	r8, r24
    2152:	99 0a       	sbc	r9, r25
    2154:	b4 01       	movw	r22, r8
    2156:	c3 01       	movw	r24, r6
    2158:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 - y, color);
    215c:	45 2d       	mov	r20, r5
    215e:	54 2d       	mov	r21, r4
    2160:	b4 01       	movw	r22, r8
    2162:	c1 01       	movw	r24, r2
    2164:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    2168:	47 01       	movw	r8, r14
    216a:	8c 0c       	add	r8, r12
    216c:	9d 1c       	adc	r9, r13
    216e:	45 2d       	mov	r20, r5
    2170:	54 2d       	mov	r21, r4
    2172:	b4 01       	movw	r22, r8
    2174:	6b 80       	ldd	r6, Y+3	; 0x03
    2176:	7c 80       	ldd	r7, Y+4	; 0x04
    2178:	60 0e       	add	r6, r16
    217a:	71 1e       	adc	r7, r17
    217c:	c3 01       	movw	r24, r6
    217e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 + x, color);
    2182:	45 2d       	mov	r20, r5
    2184:	54 2d       	mov	r21, r4
    2186:	b4 01       	movw	r22, r8
    2188:	18 01       	movw	r2, r16
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	22 1a       	sub	r2, r18
    2190:	33 0a       	sbc	r3, r19
    2192:	c1 01       	movw	r24, r2
    2194:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 - x, color);
    2198:	47 01       	movw	r8, r14
    219a:	8c 18       	sub	r8, r12
    219c:	9d 08       	sbc	r9, r13
    219e:	45 2d       	mov	r20, r5
    21a0:	54 2d       	mov	r21, r4
    21a2:	b4 01       	movw	r22, r8
    21a4:	c3 01       	movw	r24, r6
    21a6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 - x, color);
    21aa:	45 2d       	mov	r20, r5
    21ac:	54 2d       	mov	r21, r4
    21ae:	b4 01       	movw	r22, r8
    21b0:	c1 01       	movw	r24, r2
    21b2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    21b6:	7d cf       	rjmp	.-262    	; 0x20b2 <ili9341_drawCircle+0xa8>

000021b8 <ili9341_drawCircleHelper>:

//DRaw Circle Helper
void ili9341_drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) 
{
    21b8:	2f 92       	push	r2
    21ba:	3f 92       	push	r3
    21bc:	4f 92       	push	r4
    21be:	5f 92       	push	r5
    21c0:	6f 92       	push	r6
    21c2:	7f 92       	push	r7
    21c4:	8f 92       	push	r8
    21c6:	9f 92       	push	r9
    21c8:	af 92       	push	r10
    21ca:	bf 92       	push	r11
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	6c 01       	movw	r12, r24
    21de:	5b 01       	movw	r10, r22
    21e0:	ea 01       	movw	r28, r20
  int16_t f     = 1 - r;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	4c 01       	movw	r8, r24
    21e8:	84 1a       	sub	r8, r20
    21ea:	95 0a       	sbc	r9, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    21ec:	66 24       	eor	r6, r6
    21ee:	77 24       	eor	r7, r7
    21f0:	64 1a       	sub	r6, r20
    21f2:	75 0a       	sbc	r7, r21
    21f4:	66 0c       	add	r6, r6
    21f6:	77 1c       	adc	r7, r7
  int16_t x     = 0;
    21f8:	f1 2c       	mov	r15, r1
    21fa:	e1 2c       	mov	r14, r1
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
    21fc:	82 2f       	mov	r24, r18
    21fe:	84 70       	andi	r24, 0x04	; 4
    2200:	58 2e       	mov	r5, r24
      ili9341_drawpixel(x0 + x, y0 + y, color);
      ili9341_drawpixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
    2202:	82 2f       	mov	r24, r18
    2204:	82 70       	andi	r24, 0x02	; 2
    2206:	48 2e       	mov	r4, r24
      ili9341_drawpixel(x0 + x, y0 - y, color);
      ili9341_drawpixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
    2208:	82 2f       	mov	r24, r18
    220a:	88 70       	andi	r24, 0x08	; 8
    220c:	38 2e       	mov	r3, r24
      ili9341_drawpixel(x0 - y, y0 + x, color);
      ili9341_drawpixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
    220e:	21 70       	andi	r18, 0x01	; 1
    2210:	22 2e       	mov	r2, r18
  while (x<y) {
    2212:	ec 16       	cp	r14, r28
    2214:	fd 06       	cpc	r15, r29
    2216:	9c f0       	brlt	.+38     	; 0x223e <ili9341_drawCircleHelper+0x86>
      ili9341_drawpixel(x0 - y, y0 - x, color);
      ili9341_drawpixel(x0 - x, y0 - y, color);
    }
  }
}
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	bf 90       	pop	r11
    222a:	af 90       	pop	r10
    222c:	9f 90       	pop	r9
    222e:	8f 90       	pop	r8
    2230:	7f 90       	pop	r7
    2232:	6f 90       	pop	r6
    2234:	5f 90       	pop	r5
    2236:	4f 90       	pop	r4
    2238:	3f 90       	pop	r3
    223a:	2f 90       	pop	r2
    223c:	08 95       	ret
    if (f >= 0) {
    223e:	97 fc       	sbrc	r9, 7
    2240:	06 c0       	rjmp	.+12     	; 0x224e <ili9341_drawCircleHelper+0x96>
      y--;
    2242:	21 97       	sbiw	r28, 0x01	; 1
      ddF_y += 2;
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	68 0e       	add	r6, r24
    2248:	71 1c       	adc	r7, r1
      f     += ddF_y;
    224a:	86 0c       	add	r8, r6
    224c:	97 1c       	adc	r9, r7
    x++;
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	e8 1a       	sub	r14, r24
    2252:	f8 0a       	sbc	r15, r24
    f     += ddF_x;
    2254:	c7 01       	movw	r24, r14
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	88 0e       	add	r8, r24
    225e:	99 1e       	adc	r9, r25
    if (cornername & 0x4) {
    2260:	55 20       	and	r5, r5
    2262:	91 f0       	breq	.+36     	; 0x2288 <ili9341_drawCircleHelper+0xd0>
      ili9341_drawpixel(x0 + x, y0 + y, color);
    2264:	a8 01       	movw	r20, r16
    2266:	be 01       	movw	r22, r28
    2268:	6a 0d       	add	r22, r10
    226a:	7b 1d       	adc	r23, r11
    226c:	c6 01       	movw	r24, r12
    226e:	8e 0d       	add	r24, r14
    2270:	9f 1d       	adc	r25, r15
    2272:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 + x, color);
    2276:	a8 01       	movw	r20, r16
    2278:	b5 01       	movw	r22, r10
    227a:	6e 0d       	add	r22, r14
    227c:	7f 1d       	adc	r23, r15
    227e:	ce 01       	movw	r24, r28
    2280:	8c 0d       	add	r24, r12
    2282:	9d 1d       	adc	r25, r13
    2284:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    if (cornername & 0x2) {
    2288:	44 20       	and	r4, r4
    228a:	91 f0       	breq	.+36     	; 0x22b0 <ili9341_drawCircleHelper+0xf8>
      ili9341_drawpixel(x0 + x, y0 - y, color);
    228c:	a8 01       	movw	r20, r16
    228e:	b5 01       	movw	r22, r10
    2290:	6c 1b       	sub	r22, r28
    2292:	7d 0b       	sbc	r23, r29
    2294:	c6 01       	movw	r24, r12
    2296:	8e 0d       	add	r24, r14
    2298:	9f 1d       	adc	r25, r15
    229a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 - x, color);
    229e:	a8 01       	movw	r20, r16
    22a0:	b5 01       	movw	r22, r10
    22a2:	6e 19       	sub	r22, r14
    22a4:	7f 09       	sbc	r23, r15
    22a6:	ce 01       	movw	r24, r28
    22a8:	8c 0d       	add	r24, r12
    22aa:	9d 1d       	adc	r25, r13
    22ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    if (cornername & 0x8) {
    22b0:	33 20       	and	r3, r3
    22b2:	91 f0       	breq	.+36     	; 0x22d8 <ili9341_drawCircleHelper+0x120>
      ili9341_drawpixel(x0 - y, y0 + x, color);
    22b4:	a8 01       	movw	r20, r16
    22b6:	b5 01       	movw	r22, r10
    22b8:	6e 0d       	add	r22, r14
    22ba:	7f 1d       	adc	r23, r15
    22bc:	c6 01       	movw	r24, r12
    22be:	8c 1b       	sub	r24, r28
    22c0:	9d 0b       	sbc	r25, r29
    22c2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 + y, color);
    22c6:	a8 01       	movw	r20, r16
    22c8:	be 01       	movw	r22, r28
    22ca:	6a 0d       	add	r22, r10
    22cc:	7b 1d       	adc	r23, r11
    22ce:	c6 01       	movw	r24, r12
    22d0:	8e 19       	sub	r24, r14
    22d2:	9f 09       	sbc	r25, r15
    22d4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    if (cornername & 0x1) {
    22d8:	22 20       	and	r2, r2
    22da:	09 f4       	brne	.+2      	; 0x22de <ili9341_drawCircleHelper+0x126>
    22dc:	9a cf       	rjmp	.-204    	; 0x2212 <ili9341_drawCircleHelper+0x5a>
      ili9341_drawpixel(x0 - y, y0 - x, color);
    22de:	a8 01       	movw	r20, r16
    22e0:	b5 01       	movw	r22, r10
    22e2:	6e 19       	sub	r22, r14
    22e4:	7f 09       	sbc	r23, r15
    22e6:	c6 01       	movw	r24, r12
    22e8:	8c 1b       	sub	r24, r28
    22ea:	9d 0b       	sbc	r25, r29
    22ec:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 - y, color);
    22f0:	a8 01       	movw	r20, r16
    22f2:	b5 01       	movw	r22, r10
    22f4:	6c 1b       	sub	r22, r28
    22f6:	7d 0b       	sbc	r23, r29
    22f8:	c6 01       	movw	r24, r12
    22fa:	8e 19       	sub	r24, r14
    22fc:	9f 09       	sbc	r25, r15
    22fe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    2302:	87 cf       	rjmp	.-242    	; 0x2212 <ili9341_drawCircleHelper+0x5a>

00002304 <ili9341_drawLine>:
}


// Bresenham's algorithm - thx wikpedia
void ili9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
    2304:	2f 92       	push	r2
    2306:	3f 92       	push	r3
    2308:	4f 92       	push	r4
    230a:	5f 92       	push	r5
    230c:	6f 92       	push	r6
    230e:	7f 92       	push	r7
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	00 d0       	rcall	.+0      	; 0x232a <ili9341_drawLine+0x26>
    232a:	00 d0       	rcall	.+0      	; 0x232c <ili9341_drawLine+0x28>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	8b 83       	std	Y+3, r24	; 0x03
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	7b 01       	movw	r14, r22
    2336:	6a 01       	movw	r12, r20
    2338:	c9 01       	movw	r24, r18
    233a:	09 83       	std	Y+1, r16	; 0x01
    233c:	1a 83       	std	Y+2, r17	; 0x02
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    233e:	89 01       	movw	r16, r18
    2340:	06 1b       	sub	r16, r22
    2342:	17 0b       	sbc	r17, r23
    2344:	17 ff       	sbrs	r17, 7
    2346:	03 c0       	rjmp	.+6      	; 0x234e <ili9341_drawLine+0x4a>
    2348:	11 95       	neg	r17
    234a:	01 95       	neg	r16
    234c:	11 09       	sbc	r17, r1
    234e:	46 01       	movw	r8, r12
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	82 1a       	sub	r8, r18
    2356:	93 0a       	sbc	r9, r19
    2358:	97 fe       	sbrs	r9, 7
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <ili9341_drawLine+0x5e>
    235c:	91 94       	neg	r9
    235e:	81 94       	neg	r8
    2360:	91 08       	sbc	r9, r1
  if (steep) {
    2362:	80 16       	cp	r8, r16
    2364:	91 06       	cpc	r9, r17
    2366:	5c f4       	brge	.+22     	; 0x237e <ili9341_drawLine+0x7a>
    2368:	3c 2d       	mov	r19, r12
    236a:	2d 2d       	mov	r18, r13
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
    236c:	6c 01       	movw	r12, r24
    236e:	83 2f       	mov	r24, r19
    2370:	92 2f       	mov	r25, r18
  if (steep) {
    2372:	3b 81       	ldd	r19, Y+3	; 0x03
    2374:	2c 81       	ldd	r18, Y+4	; 0x04
    _swap_int16_t(x0, y0);
    2376:	fc 82       	std	Y+4, r15	; 0x04
    2378:	eb 82       	std	Y+3, r14	; 0x03
    237a:	e3 2e       	mov	r14, r19
    237c:	f2 2e       	mov	r15, r18
  }

  if (x0 > x1) {
    237e:	2b 81       	ldd	r18, Y+3	; 0x03
    2380:	3c 81       	ldd	r19, Y+4	; 0x04
    2382:	c2 16       	cp	r12, r18
    2384:	d3 06       	cpc	r13, r19
    2386:	5c f4       	brge	.+22     	; 0x239e <ili9341_drawLine+0x9a>
    2388:	3e 2d       	mov	r19, r14
    238a:	2f 2d       	mov	r18, r15
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
    238c:	7c 01       	movw	r14, r24
    238e:	83 2f       	mov	r24, r19
    2390:	92 2f       	mov	r25, r18
  if (x0 > x1) {
    2392:	3b 81       	ldd	r19, Y+3	; 0x03
    2394:	2c 81       	ldd	r18, Y+4	; 0x04
    2396:	dc 82       	std	Y+4, r13	; 0x04
    2398:	cb 82       	std	Y+3, r12	; 0x03
    239a:	c3 2e       	mov	r12, r19
    239c:	d2 2e       	mov	r13, r18
  }

  int16_t dx, dy;
  dx = x1 - x0;
    239e:	16 01       	movw	r2, r12
    23a0:	2b 81       	ldd	r18, Y+3	; 0x03
    23a2:	3c 81       	ldd	r19, Y+4	; 0x04
    23a4:	22 1a       	sub	r2, r18
    23a6:	33 0a       	sbc	r3, r19
  dy = abs(y1 - y0);
    23a8:	2c 01       	movw	r4, r24
    23aa:	4e 18       	sub	r4, r14
    23ac:	5f 08       	sbc	r5, r15
    23ae:	57 fe       	sbrs	r5, 7
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <ili9341_drawLine+0xb4>
    23b2:	51 94       	neg	r5
    23b4:	41 94       	neg	r4
    23b6:	51 08       	sbc	r5, r1

  int16_t err = dx / 2;
    23b8:	31 01       	movw	r6, r2
    23ba:	37 fe       	sbrs	r3, 7
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <ili9341_drawLine+0xc0>
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	63 1a       	sub	r6, r19
    23c2:	73 0a       	sbc	r7, r19
    23c4:	75 94       	asr	r7
    23c6:	67 94       	ror	r6
  int16_t ystep;

  if (y0 < y1) {
    23c8:	e8 16       	cp	r14, r24
    23ca:	f9 06       	cpc	r15, r25
    23cc:	d4 f1       	brlt	.+116    	; 0x2442 <ili9341_drawLine+0x13e>
    ystep = 1;
  } else {
    ystep = -1;
    23ce:	aa 24       	eor	r10, r10
    23d0:	aa 94       	dec	r10
    23d2:	ba 2c       	mov	r11, r10
  }

  for (; x0<=x1; x0++) {
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	3c 81       	ldd	r19, Y+4	; 0x04
    23d8:	c2 16       	cp	r12, r18
    23da:	d3 06       	cpc	r13, r19
    23dc:	bc f4       	brge	.+46     	; 0x240c <ili9341_drawLine+0x108>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	bf 90       	pop	r11
    23f8:	af 90       	pop	r10
    23fa:	9f 90       	pop	r9
    23fc:	8f 90       	pop	r8
    23fe:	7f 90       	pop	r7
    2400:	6f 90       	pop	r6
    2402:	5f 90       	pop	r5
    2404:	4f 90       	pop	r4
    2406:	3f 90       	pop	r3
    2408:	2f 90       	pop	r2
    240a:	08 95       	ret
      ili9341_drawpixel(y0, x0, color);
    240c:	49 81       	ldd	r20, Y+1	; 0x01
    240e:	5a 81       	ldd	r21, Y+2	; 0x02
    2410:	6b 81       	ldd	r22, Y+3	; 0x03
    2412:	7c 81       	ldd	r23, Y+4	; 0x04
    2414:	c7 01       	movw	r24, r14
    if (steep) {
    2416:	80 16       	cp	r8, r16
    2418:	91 06       	cpc	r9, r17
    241a:	1c f0       	brlt	.+6      	; 0x2422 <ili9341_drawLine+0x11e>
      ili9341_drawpixel(x0, y0, color);
    241c:	b7 01       	movw	r22, r14
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    err -= dy;
    2426:	64 18       	sub	r6, r4
    2428:	75 08       	sbc	r7, r5
    if (err < 0) {
    242a:	77 fe       	sbrs	r7, 7
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <ili9341_drawLine+0x132>
      y0 += ystep;
    242e:	ea 0c       	add	r14, r10
    2430:	fb 1c       	adc	r15, r11
      err += dx;
    2432:	62 0c       	add	r6, r2
    2434:	73 1c       	adc	r7, r3
  for (; x0<=x1; x0++) {
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	c9 cf       	rjmp	.-110    	; 0x23d4 <ili9341_drawLine+0xd0>
    ystep = 1;
    2442:	aa 24       	eor	r10, r10
    2444:	a3 94       	inc	r10
    2446:	b1 2c       	mov	r11, r1
    2448:	c5 cf       	rjmp	.-118    	; 0x23d4 <ili9341_drawLine+0xd0>

0000244a <ili9341_drawFastVLine>:
{
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	89 01       	movw	r16, r18
  ili9341_drawLine(x, y, x, y+h-1, color);
    2450:	46 0f       	add	r20, r22
    2452:	57 1f       	adc	r21, r23
    2454:	9a 01       	movw	r18, r20
    2456:	21 50       	subi	r18, 0x01	; 1
    2458:	31 09       	sbc	r19, r1
    245a:	ac 01       	movw	r20, r24
    245c:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
}
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <ili9341_fillCircleHelper>:
{
    2466:	2f 92       	push	r2
    2468:	3f 92       	push	r3
    246a:	4f 92       	push	r4
    246c:	5f 92       	push	r5
    246e:	6f 92       	push	r6
    2470:	7f 92       	push	r7
    2472:	8f 92       	push	r8
    2474:	9f 92       	push	r9
    2476:	af 92       	push	r10
    2478:	bf 92       	push	r11
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	00 d0       	rcall	.+0      	; 0x248c <ili9341_fillCircleHelper+0x26>
    248c:	00 d0       	rcall	.+0      	; 0x248e <ili9341_fillCircleHelper+0x28>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	2c 01       	movw	r4, r24
    2494:	5b 01       	movw	r10, r22
    2496:	4b 83       	std	Y+3, r20	; 0x03
    2498:	5c 83       	std	Y+4, r21	; 0x04
    249a:	48 01       	movw	r8, r16
  int16_t f     = 1 - r;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	6c 01       	movw	r12, r24
    24a2:	4b 81       	ldd	r20, Y+3	; 0x03
    24a4:	5c 81       	ldd	r21, Y+4	; 0x04
    24a6:	c4 1a       	sub	r12, r20
    24a8:	d5 0a       	sbc	r13, r21
  int16_t ddF_y = -2 * r;
    24aa:	1a 01       	movw	r2, r20
    24ac:	31 94       	neg	r3
    24ae:	21 94       	neg	r2
    24b0:	31 08       	sbc	r3, r1
    24b2:	22 0c       	add	r2, r2
    24b4:	33 1c       	adc	r3, r3
  int16_t x     = 0;
    24b6:	10 e0       	ldi	r17, 0x00	; 0
    24b8:	00 e0       	ldi	r16, 0x00	; 0
  int16_t ddF_x = 1;
    24ba:	66 24       	eor	r6, r6
    24bc:	63 94       	inc	r6
    24be:	71 2c       	mov	r7, r1
    if (cornername & 0x1) {
    24c0:	52 2f       	mov	r21, r18
    24c2:	51 70       	andi	r21, 0x01	; 1
    24c4:	59 83       	std	Y+1, r21	; 0x01
    if (cornername & 0x2) {
    24c6:	22 70       	andi	r18, 0x02	; 2
    24c8:	2a 83       	std	Y+2, r18	; 0x02
  while (x<y) {
    24ca:	4b 81       	ldd	r20, Y+3	; 0x03
    24cc:	5c 81       	ldd	r21, Y+4	; 0x04
    24ce:	04 17       	cp	r16, r20
    24d0:	15 07       	cpc	r17, r21
    24d2:	bc f0       	brlt	.+46     	; 0x2502 <ili9341_fillCircleHelper+0x9c>
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	08 95       	ret
    if (f >= 0) {
    2502:	d7 fc       	sbrc	r13, 7
    2504:	0a c0       	rjmp	.+20     	; 0x251a <ili9341_fillCircleHelper+0xb4>
      y--;
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9c 83       	std	Y+4, r25	; 0x04
    250e:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	29 0e       	add	r2, r25
    2514:	31 1c       	adc	r3, r1
      f     += ddF_y;
    2516:	c2 0c       	add	r12, r2
    2518:	d3 1c       	adc	r13, r3
    x++;
    251a:	0f 5f       	subi	r16, 0xFF	; 255
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    ddF_x += 2;
    251e:	e2 e0       	ldi	r30, 0x02	; 2
    2520:	6e 0e       	add	r6, r30
    2522:	71 1c       	adc	r7, r1
    f     += ddF_x;
    2524:	c6 0c       	add	r12, r6
    2526:	d7 1c       	adc	r13, r7
    if (cornername & 0x1) {
    2528:	f9 81       	ldd	r31, Y+1	; 0x01
    252a:	ff 23       	and	r31, r31
    252c:	01 f1       	breq	.+64     	; 0x256e <ili9341_fillCircleHelper+0x108>
      ili9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    252e:	4b 81       	ldd	r20, Y+3	; 0x03
    2530:	5c 81       	ldd	r21, Y+4	; 0x04
    2532:	44 0f       	add	r20, r20
    2534:	55 1f       	adc	r21, r21
    2536:	4f 5f       	subi	r20, 0xFF	; 255
    2538:	5f 4f       	sbci	r21, 0xFF	; 255
    253a:	48 0d       	add	r20, r8
    253c:	59 1d       	adc	r21, r9
    253e:	97 01       	movw	r18, r14
    2540:	b5 01       	movw	r22, r10
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	68 1b       	sub	r22, r24
    2548:	79 0b       	sbc	r23, r25
    254a:	c2 01       	movw	r24, r4
    254c:	80 0f       	add	r24, r16
    254e:	91 1f       	adc	r25, r17
    2550:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    2554:	97 01       	movw	r18, r14
    2556:	a4 01       	movw	r20, r8
    2558:	46 0d       	add	r20, r6
    255a:	57 1d       	adc	r21, r7
    255c:	b5 01       	movw	r22, r10
    255e:	60 1b       	sub	r22, r16
    2560:	71 0b       	sbc	r23, r17
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	84 0d       	add	r24, r4
    2568:	95 1d       	adc	r25, r5
    256a:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
    if (cornername & 0x2) {
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	99 23       	and	r25, r25
    2572:	09 f4       	brne	.+2      	; 0x2576 <ili9341_fillCircleHelper+0x110>
    2574:	aa cf       	rjmp	.-172    	; 0x24ca <ili9341_fillCircleHelper+0x64>
      ili9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    2576:	4b 81       	ldd	r20, Y+3	; 0x03
    2578:	5c 81       	ldd	r21, Y+4	; 0x04
    257a:	44 0f       	add	r20, r20
    257c:	55 1f       	adc	r21, r21
    257e:	4f 5f       	subi	r20, 0xFF	; 255
    2580:	5f 4f       	sbci	r21, 0xFF	; 255
    2582:	48 0d       	add	r20, r8
    2584:	59 1d       	adc	r21, r9
    2586:	97 01       	movw	r18, r14
    2588:	b5 01       	movw	r22, r10
    258a:	eb 81       	ldd	r30, Y+3	; 0x03
    258c:	fc 81       	ldd	r31, Y+4	; 0x04
    258e:	6e 1b       	sub	r22, r30
    2590:	7f 0b       	sbc	r23, r31
    2592:	c2 01       	movw	r24, r4
    2594:	80 1b       	sub	r24, r16
    2596:	91 0b       	sbc	r25, r17
    2598:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    259c:	97 01       	movw	r18, r14
    259e:	a3 01       	movw	r20, r6
    25a0:	48 0d       	add	r20, r8
    25a2:	59 1d       	adc	r21, r9
    25a4:	b5 01       	movw	r22, r10
    25a6:	60 1b       	sub	r22, r16
    25a8:	71 0b       	sbc	r23, r17
    25aa:	c2 01       	movw	r24, r4
    25ac:	eb 81       	ldd	r30, Y+3	; 0x03
    25ae:	fc 81       	ldd	r31, Y+4	; 0x04
    25b0:	8e 1b       	sub	r24, r30
    25b2:	9f 0b       	sbc	r25, r31
    25b4:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
    25b8:	88 cf       	rjmp	.-240    	; 0x24ca <ili9341_fillCircleHelper+0x64>

000025ba <ili9341_fillCircle>:
{
    25ba:	af 92       	push	r10
    25bc:	bf 92       	push	r11
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	6c 01       	movw	r12, r24
    25d0:	5b 01       	movw	r10, r22
    25d2:	ea 01       	movw	r28, r20
    25d4:	79 01       	movw	r14, r18
  ili9341_drawvline(x0, y0-r, 2*r+1, color);
    25d6:	44 0f       	add	r20, r20
    25d8:	55 1f       	adc	r21, r21
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	6c 1b       	sub	r22, r28
    25e0:	7d 0b       	sbc	r23, r29
    25e2:	c6 01       	movw	r24, r12
    25e4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <ili9341_drawvline>
  ili9341_fillCircleHelper(x0, y0, r, 3, 0, color);
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	00 e0       	ldi	r16, 0x00	; 0
    25ec:	23 e0       	ldi	r18, 0x03	; 3
    25ee:	ae 01       	movw	r20, r28
    25f0:	b5 01       	movw	r22, r10
    25f2:	c6 01       	movw	r24, r12
    25f4:	0e 94 33 12 	call	0x2466	; 0x2466 <ili9341_fillCircleHelper>
}
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
    2608:	bf 90       	pop	r11
    260a:	af 90       	pop	r10
    260c:	08 95       	ret

0000260e <ili9341_drawFastHLine>:
{
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	89 01       	movw	r16, r18
  ili9341_drawLine(x, y, x+w-1, y, color);
    2614:	48 0f       	add	r20, r24
    2616:	59 1f       	adc	r21, r25
    2618:	41 50       	subi	r20, 0x01	; 1
    261a:	51 09       	sbc	r21, r1
    261c:	9b 01       	movw	r18, r22
    261e:	0e 94 82 11 	call	0x2304	; 0x2304 <ili9341_drawLine>
}
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	08 95       	ret

00002628 <ili9341_drawRect>:

// Draw a rectangle
void ili9341_drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	ec 01       	movw	r28, r24
    263e:	7b 01       	movw	r14, r22
    2640:	5a 01       	movw	r10, r20
    2642:	69 01       	movw	r12, r18
  ili9341_drawFastHLine(x, y, w, color);
    2644:	98 01       	movw	r18, r16
    2646:	0e 94 07 13 	call	0x260e	; 0x260e <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x, y+h-1, w, color);
    264a:	b7 01       	movw	r22, r14
    264c:	6c 0d       	add	r22, r12
    264e:	7d 1d       	adc	r23, r13
    2650:	61 50       	subi	r22, 0x01	; 1
    2652:	71 09       	sbc	r23, r1
    2654:	98 01       	movw	r18, r16
    2656:	a5 01       	movw	r20, r10
    2658:	ce 01       	movw	r24, r28
    265a:	0e 94 07 13 	call	0x260e	; 0x260e <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x, y, h, color);
    265e:	98 01       	movw	r18, r16
    2660:	a6 01       	movw	r20, r12
    2662:	b7 01       	movw	r22, r14
    2664:	ce 01       	movw	r24, r28
    2666:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y, h, color);
    266a:	ce 01       	movw	r24, r28
    266c:	8a 0d       	add	r24, r10
    266e:	9b 1d       	adc	r25, r11
    2670:	98 01       	movw	r18, r16
    2672:	a6 01       	movw	r20, r12
    2674:	b7 01       	movw	r22, r14
    2676:	01 97       	sbiw	r24, 0x01	; 1
}
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
  ili9341_drawFastVLine(x+w-1, y, h, color);
    268c:	0c 94 25 12 	jmp	0x244a	; 0x244a <ili9341_drawFastVLine>

00002690 <ili9341_fillRect>:


void ili9341_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	d6 2e       	mov	r13, r22
    26a6:	c7 2e       	mov	r12, r23
    26a8:	b2 2e       	mov	r11, r18
    26aa:	a3 2e       	mov	r10, r19
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    26ac:	ec 01       	movw	r28, r24
    26ae:	7c 01       	movw	r14, r24
    26b0:	e4 0e       	add	r14, r20
    26b2:	f5 1e       	adc	r15, r21
    26b4:	ce 15       	cp	r28, r14
    26b6:	df 05       	cpc	r29, r15
    26b8:	5c f0       	brlt	.+22     	; 0x26d0 <ili9341_fillRect+0x40>
    ili9341_drawFastVLine(i, y, h, color);
  }
}
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	bf 90       	pop	r11
    26cc:	af 90       	pop	r10
    26ce:	08 95       	ret
    ili9341_drawFastVLine(i, y, h, color);
    26d0:	98 01       	movw	r18, r16
    26d2:	4b 2d       	mov	r20, r11
    26d4:	5a 2d       	mov	r21, r10
    26d6:	6d 2d       	mov	r22, r13
    26d8:	7c 2d       	mov	r23, r12
    26da:	ce 01       	movw	r24, r28
    26dc:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
    26e0:	21 96       	adiw	r28, 0x01	; 1
    26e2:	e8 cf       	rjmp	.-48     	; 0x26b4 <ili9341_fillRect+0x24>

000026e4 <ili9341_drawRoundRect>:
// Draw a rounded rectangle
void ili9341_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    26e4:	2f 92       	push	r2
    26e6:	3f 92       	push	r3
    26e8:	4f 92       	push	r4
    26ea:	5f 92       	push	r5
    26ec:	6f 92       	push	r6
    26ee:	7f 92       	push	r7
    26f0:	8f 92       	push	r8
    26f2:	9f 92       	push	r9
    26f4:	af 92       	push	r10
    26f6:	bf 92       	push	r11
    26f8:	cf 92       	push	r12
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	00 d0       	rcall	.+0      	; 0x270a <ili9341_drawRoundRect+0x26>
    270a:	00 d0       	rcall	.+0      	; 0x270c <ili9341_drawRoundRect+0x28>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	5c 01       	movw	r10, r24
    2712:	6b 01       	movw	r12, r22
    2714:	1a 01       	movw	r2, r20
    2716:	29 01       	movw	r4, r18
    2718:	0b 83       	std	Y+3, r16	; 0x03
    271a:	1c 83       	std	Y+4, r17	; 0x04
  // smarter version
  ili9341_drawFastHLine(x+r  , y    , w-2*r, color); // Top
    271c:	0b 81       	ldd	r16, Y+3	; 0x03
    271e:	1c 81       	ldd	r17, Y+4	; 0x04
    2720:	00 0f       	add	r16, r16
    2722:	11 1f       	adc	r17, r17
    2724:	3a 01       	movw	r6, r20
    2726:	60 1a       	sub	r6, r16
    2728:	71 0a       	sbc	r7, r17
    272a:	8b 80       	ldd	r8, Y+3	; 0x03
    272c:	9c 80       	ldd	r9, Y+4	; 0x04
    272e:	8a 0c       	add	r8, r10
    2730:	9b 1c       	adc	r9, r11
    2732:	97 01       	movw	r18, r14
    2734:	a3 01       	movw	r20, r6
    2736:	c4 01       	movw	r24, r8
    2738:	0e 94 07 13 	call	0x260e	; 0x260e <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    273c:	c6 01       	movw	r24, r12
    273e:	84 0d       	add	r24, r4
    2740:	95 1d       	adc	r25, r5
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	bc 01       	movw	r22, r24
    2748:	61 50       	subi	r22, 0x01	; 1
    274a:	71 09       	sbc	r23, r1
    274c:	97 01       	movw	r18, r14
    274e:	a3 01       	movw	r20, r6
    2750:	c4 01       	movw	r24, r8
    2752:	0e 94 07 13 	call	0x260e	; 0x260e <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x    , y+r  , h-2*r, color); // Left
    2756:	40 1a       	sub	r4, r16
    2758:	51 0a       	sbc	r5, r17
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	c8 0e       	add	r12, r24
    2760:	d9 1e       	adc	r13, r25
    2762:	97 01       	movw	r18, r14
    2764:	a2 01       	movw	r20, r4
    2766:	b6 01       	movw	r22, r12
    2768:	c5 01       	movw	r24, r10
    276a:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    276e:	a2 0c       	add	r10, r2
    2770:	b3 1c       	adc	r11, r3
    2772:	97 01       	movw	r18, r14
    2774:	a2 01       	movw	r20, r4
    2776:	b6 01       	movw	r22, r12
    2778:	c5 01       	movw	r24, r10
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	0e 94 25 12 	call	0x244a	; 0x244a <ili9341_drawFastVLine>
  // draw four corners
  ili9341_drawCircleHelper(x+r    , y+r    , r, 1, color);
    2780:	87 01       	movw	r16, r14
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	4b 81       	ldd	r20, Y+3	; 0x03
    2786:	5c 81       	ldd	r21, Y+4	; 0x04
    2788:	b6 01       	movw	r22, r12
    278a:	c4 01       	movw	r24, r8
    278c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	a8 1a       	sub	r10, r24
    2796:	b9 0a       	sbc	r11, r25
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	a9 1a       	sub	r10, r25
    279c:	b1 08       	sbc	r11, r1
    279e:	22 e0       	ldi	r18, 0x02	; 2
    27a0:	4b 81       	ldd	r20, Y+3	; 0x03
    27a2:	5c 81       	ldd	r21, Y+4	; 0x04
    27a4:	b6 01       	movw	r22, r12
    27a6:	c5 01       	movw	r24, r10
    27a8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    27ac:	c9 80       	ldd	r12, Y+1	; 0x01
    27ae:	da 80       	ldd	r13, Y+2	; 0x02
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	c8 1a       	sub	r12, r24
    27b6:	d9 0a       	sbc	r13, r25
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	c9 1a       	sub	r12, r25
    27bc:	d1 08       	sbc	r13, r1
    27be:	24 e0       	ldi	r18, 0x04	; 4
    27c0:	4b 81       	ldd	r20, Y+3	; 0x03
    27c2:	5c 81       	ldd	r21, Y+4	; 0x04
    27c4:	b6 01       	movw	r22, r12
    27c6:	c5 01       	movw	r24, r10
    27c8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    27cc:	28 e0       	ldi	r18, 0x08	; 8
    27ce:	4b 81       	ldd	r20, Y+3	; 0x03
    27d0:	5c 81       	ldd	r21, Y+4	; 0x04
    27d2:	b6 01       	movw	r22, r12
    27d4:	c4 01       	movw	r24, r8
    27d6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <ili9341_drawCircleHelper>
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
    27f2:	bf 90       	pop	r11
    27f4:	af 90       	pop	r10
    27f6:	9f 90       	pop	r9
    27f8:	8f 90       	pop	r8
    27fa:	7f 90       	pop	r7
    27fc:	6f 90       	pop	r6
    27fe:	5f 90       	pop	r5
    2800:	4f 90       	pop	r4
    2802:	3f 90       	pop	r3
    2804:	2f 90       	pop	r2
    2806:	08 95       	ret

00002808 <ili9341_fillRoundRect>:

// Fill a rounded rectangle
void ili9341_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    2808:	2f 92       	push	r2
    280a:	3f 92       	push	r3
    280c:	4f 92       	push	r4
    280e:	5f 92       	push	r5
    2810:	6f 92       	push	r6
    2812:	7f 92       	push	r7
    2814:	8f 92       	push	r8
    2816:	9f 92       	push	r9
    2818:	af 92       	push	r10
    281a:	bf 92       	push	r11
    281c:	cf 92       	push	r12
    281e:	df 92       	push	r13
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	1c 01       	movw	r2, r24
    282e:	5b 01       	movw	r10, r22
    2830:	2a 01       	movw	r4, r20
    2832:	e9 01       	movw	r28, r18
    2834:	68 01       	movw	r12, r16
    2836:	37 01       	movw	r6, r14
  // smarter version
  ili9341_fillRect(x+r, y, w-2*r, h, color);
    2838:	78 01       	movw	r14, r16
    283a:	ee 0c       	add	r14, r14
    283c:	ff 1c       	adc	r15, r15
    283e:	48 01       	movw	r8, r16
    2840:	82 0c       	add	r8, r2
    2842:	93 1c       	adc	r9, r3
    2844:	4e 19       	sub	r20, r14
    2846:	5f 09       	sbc	r21, r15
    2848:	83 01       	movw	r16, r6
    284a:	c4 01       	movw	r24, r8
    284c:	0e 94 48 13 	call	0x2690	; 0x2690 <ili9341_fillRect>

  // draw four corners
  ili9341_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    2850:	ce 19       	sub	r28, r14
    2852:	df 09       	sbc	r29, r15
    2854:	21 97       	sbiw	r28, 0x01	; 1
    2856:	ac 0c       	add	r10, r12
    2858:	bd 1c       	adc	r11, r13
    285a:	42 0c       	add	r4, r2
    285c:	53 1c       	adc	r5, r3
    285e:	c2 01       	movw	r24, r4
    2860:	8c 19       	sub	r24, r12
    2862:	9d 09       	sbc	r25, r13
    2864:	73 01       	movw	r14, r6
    2866:	8e 01       	movw	r16, r28
    2868:	21 e0       	ldi	r18, 0x01	; 1
    286a:	a6 01       	movw	r20, r12
    286c:	b5 01       	movw	r22, r10
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	0e 94 33 12 	call	0x2466	; 0x2466 <ili9341_fillCircleHelper>
  ili9341_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    2874:	22 e0       	ldi	r18, 0x02	; 2
    2876:	a6 01       	movw	r20, r12
    2878:	b5 01       	movw	r22, r10
    287a:	c4 01       	movw	r24, r8
    287c:	0e 94 33 12 	call	0x2466	; 0x2466 <ili9341_fillCircleHelper>
}
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	df 90       	pop	r13
    288e:	cf 90       	pop	r12
    2890:	bf 90       	pop	r11
    2892:	af 90       	pop	r10
    2894:	9f 90       	pop	r9
    2896:	8f 90       	pop	r8
    2898:	7f 90       	pop	r7
    289a:	6f 90       	pop	r6
    289c:	5f 90       	pop	r5
    289e:	4f 90       	pop	r4
    28a0:	3f 90       	pop	r3
    28a2:	2f 90       	pop	r2
    28a4:	08 95       	ret

000028a6 <ili9341_drawBitmap>:

// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
void ili9341_drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    28a6:	2f 92       	push	r2
    28a8:	3f 92       	push	r3
    28aa:	4f 92       	push	r4
    28ac:	5f 92       	push	r5
    28ae:	6f 92       	push	r6
    28b0:	7f 92       	push	r7
    28b2:	8f 92       	push	r8
    28b4:	9f 92       	push	r9
    28b6:	af 92       	push	r10
    28b8:	bf 92       	push	r11
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <ili9341_drawBitmap+0x26>
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <ili9341_drawBitmap+0x28>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <ili9341_drawBitmap+0x2a>
    28d0:	0f 92       	push	r0
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	2c 01       	movw	r4, r24
    28d8:	3b 01       	movw	r6, r22
    28da:	5a 01       	movw	r10, r20
    28dc:	69 01       	movw	r12, r18
    28de:	09 83       	std	Y+1, r16	; 0x01
    28e0:	1a 83       	std	Y+2, r17	; 0x02
    28e2:	ed 82       	std	Y+5, r14	; 0x05
    28e4:	2f 2c       	mov	r2, r15

  int16_t i, j, byteWidth = (w + 7) / 8;
    28e6:	c9 01       	movw	r24, r18
    28e8:	07 96       	adiw	r24, 0x07	; 7
    28ea:	97 fd       	sbrc	r25, 7
    28ec:	07 96       	adiw	r24, 0x07	; 7
    28ee:	9c 01       	movw	r18, r24
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	35 95       	asr	r19
    28f4:	27 95       	ror	r18
    28f6:	9a 95       	dec	r25
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <ili9341_drawBitmap+0x4c>
    28fa:	3c 83       	std	Y+4, r19	; 0x04
    28fc:	2b 83       	std	Y+3, r18	; 0x03
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    28fe:	f1 2c       	mov	r15, r1
    2900:	e1 2c       	mov	r14, r1
  uint8_t byte=0;
    2902:	31 2c       	mov	r3, r1
  for(j=0; j<h; j++) {
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	00 e0       	ldi	r16, 0x00	; 0
    2908:	29 81       	ldd	r18, Y+1	; 0x01
    290a:	3a 81       	ldd	r19, Y+2	; 0x02
    290c:	02 17       	cp	r16, r18
    290e:	13 07       	cpc	r17, r19
    2910:	0c f4       	brge	.+2      	; 0x2914 <ili9341_drawBitmap+0x6e>
    2912:	48 c0       	rjmp	.+144    	; 0x29a4 <ili9341_drawBitmap+0xfe>
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    2914:	27 96       	adiw	r28, 0x07	; 7
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	7f 90       	pop	r7
    293a:	6f 90       	pop	r6
    293c:	5f 90       	pop	r5
    293e:	4f 90       	pop	r4
    2940:	3f 90       	pop	r3
    2942:	2f 90       	pop	r2
    2944:	08 95       	ret
      if(i & 7) byte <<= 1;
    2946:	8e 81       	ldd	r24, Y+6	; 0x06
    2948:	9f 81       	ldd	r25, Y+7	; 0x07
    294a:	87 70       	andi	r24, 0x07	; 7
    294c:	99 27       	eor	r25, r25
    294e:	33 0c       	add	r3, r3
    2950:	89 2b       	or	r24, r25
    2952:	61 f4       	brne	.+24     	; 0x296c <ili9341_drawBitmap+0xc6>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    2954:	ee 81       	ldd	r30, Y+6	; 0x06
    2956:	ff 81       	ldd	r31, Y+7	; 0x07
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	f5 95       	asr	r31
    295c:	e7 95       	ror	r30
    295e:	8a 95       	dec	r24
    2960:	e1 f7       	brne	.-8      	; 0x295a <ili9341_drawBitmap+0xb4>
    2962:	ee 0d       	add	r30, r14
    2964:	ff 1d       	adc	r31, r15
    2966:	ea 0d       	add	r30, r10
    2968:	fb 1d       	adc	r31, r11
    296a:	34 90       	lpm	r3, Z
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    296c:	37 fe       	sbrs	r3, 7
    296e:	09 c0       	rjmp	.+18     	; 0x2982 <ili9341_drawBitmap+0xdc>
    2970:	4d 81       	ldd	r20, Y+5	; 0x05
    2972:	52 2d       	mov	r21, r2
    2974:	b4 01       	movw	r22, r8
    2976:	8e 81       	ldd	r24, Y+6	; 0x06
    2978:	9f 81       	ldd	r25, Y+7	; 0x07
    297a:	84 0d       	add	r24, r4
    297c:	95 1d       	adc	r25, r5
    297e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    for(i=0; i<w; i++) {
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	01 96       	adiw	r24, 0x01	; 1
    2988:	9f 83       	std	Y+7, r25	; 0x07
    298a:	8e 83       	std	Y+6, r24	; 0x06
    298c:	2e 81       	ldd	r18, Y+6	; 0x06
    298e:	3f 81       	ldd	r19, Y+7	; 0x07
    2990:	2c 15       	cp	r18, r12
    2992:	3d 05       	cpc	r19, r13
    2994:	c4 f2       	brlt	.-80     	; 0x2946 <ili9341_drawBitmap+0xa0>
  for(j=0; j<h; j++) {
    2996:	0f 5f       	subi	r16, 0xFF	; 255
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	e8 0e       	add	r14, r24
    29a0:	f9 1e       	adc	r15, r25
    29a2:	b2 cf       	rjmp	.-156    	; 0x2908 <ili9341_drawBitmap+0x62>
    for(i=0; i<w; i++) {
    29a4:	1f 82       	std	Y+7, r1	; 0x07
    29a6:	1e 82       	std	Y+6, r1	; 0x06
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    29a8:	43 01       	movw	r8, r6
    29aa:	80 0e       	add	r8, r16
    29ac:	91 1e       	adc	r9, r17
    29ae:	ee cf       	rjmp	.-36     	; 0x298c <ili9341_drawBitmap+0xe6>

000029b0 <ili9341_drawXBitmap>:

//Draw XBitMap Files (*.xbm), exported from GIMP,
//Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
//C Array can be directly used with this function
void ili9341_drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    29b0:	2f 92       	push	r2
    29b2:	3f 92       	push	r3
    29b4:	4f 92       	push	r4
    29b6:	5f 92       	push	r5
    29b8:	6f 92       	push	r6
    29ba:	7f 92       	push	r7
    29bc:	8f 92       	push	r8
    29be:	9f 92       	push	r9
    29c0:	af 92       	push	r10
    29c2:	bf 92       	push	r11
    29c4:	cf 92       	push	r12
    29c6:	df 92       	push	r13
    29c8:	ef 92       	push	r14
    29ca:	ff 92       	push	r15
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <ili9341_drawXBitmap+0x26>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <ili9341_drawXBitmap+0x28>
    29d8:	0f 92       	push	r0
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	3c 01       	movw	r6, r24
    29e0:	5a 01       	movw	r10, r20
    29e2:	69 01       	movw	r12, r18
    29e4:	09 83       	std	Y+1, r16	; 0x01
    29e6:	1a 83       	std	Y+2, r17	; 0x02
    29e8:	eb 82       	std	Y+3, r14	; 0x03
    29ea:	2f 2c       	mov	r2, r15

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    29ec:	8b 01       	movw	r16, r22
  int16_t i, j, byteWidth = (w + 7) / 8;
    29ee:	29 01       	movw	r4, r18
    29f0:	87 e0       	ldi	r24, 0x07	; 7
    29f2:	48 0e       	add	r4, r24
    29f4:	51 1c       	adc	r5, r1
    29f6:	57 fe       	sbrs	r5, 7
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <ili9341_drawXBitmap+0x52>
    29fa:	29 01       	movw	r4, r18
    29fc:	9e e0       	ldi	r25, 0x0E	; 14
    29fe:	49 0e       	add	r4, r25
    2a00:	51 1c       	adc	r5, r1
    2a02:	93 e0       	ldi	r25, 0x03	; 3
    2a04:	55 94       	asr	r5
    2a06:	47 94       	ror	r4
    2a08:	9a 95       	dec	r25
    2a0a:	e1 f7       	brne	.-8      	; 0x2a04 <ili9341_drawXBitmap+0x54>
  for(j=0; j<h; j++) {
    2a0c:	91 2c       	mov	r9, r1
    2a0e:	81 2c       	mov	r8, r1
  uint8_t byte=0;
    2a10:	31 2c       	mov	r3, r1
  for(j=0; j<h; j++) {
    2a12:	f1 2c       	mov	r15, r1
    2a14:	e1 2c       	mov	r14, r1
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	e8 16       	cp	r14, r24
    2a1c:	f9 06       	cpc	r15, r25
    2a1e:	0c f4       	brge	.+2      	; 0x2a22 <ili9341_drawXBitmap+0x72>
    2a20:	48 c0       	rjmp	.+144    	; 0x2ab2 <ili9341_drawXBitmap+0x102>
      if(i & 7) byte >>= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
    2a3c:	bf 90       	pop	r11
    2a3e:	af 90       	pop	r10
    2a40:	9f 90       	pop	r9
    2a42:	8f 90       	pop	r8
    2a44:	7f 90       	pop	r7
    2a46:	6f 90       	pop	r6
    2a48:	5f 90       	pop	r5
    2a4a:	4f 90       	pop	r4
    2a4c:	3f 90       	pop	r3
    2a4e:	2f 90       	pop	r2
    2a50:	08 95       	ret
      if(i & 7) byte >>= 1;
    2a52:	8c 81       	ldd	r24, Y+4	; 0x04
    2a54:	9d 81       	ldd	r25, Y+5	; 0x05
    2a56:	87 70       	andi	r24, 0x07	; 7
    2a58:	99 27       	eor	r25, r25
    2a5a:	36 94       	lsr	r3
    2a5c:	89 2b       	or	r24, r25
    2a5e:	61 f4       	brne	.+24     	; 0x2a78 <ili9341_drawXBitmap+0xc8>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    2a60:	ec 81       	ldd	r30, Y+4	; 0x04
    2a62:	fd 81       	ldd	r31, Y+5	; 0x05
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	f5 95       	asr	r31
    2a68:	e7 95       	ror	r30
    2a6a:	8a 95       	dec	r24
    2a6c:	e1 f7       	brne	.-8      	; 0x2a66 <ili9341_drawXBitmap+0xb6>
    2a6e:	e8 0d       	add	r30, r8
    2a70:	f9 1d       	adc	r31, r9
    2a72:	ea 0d       	add	r30, r10
    2a74:	fb 1d       	adc	r31, r11
    2a76:	34 90       	lpm	r3, Z
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    2a78:	30 fe       	sbrs	r3, 0
    2a7a:	09 c0       	rjmp	.+18     	; 0x2a8e <ili9341_drawXBitmap+0xde>
    2a7c:	4b 81       	ldd	r20, Y+3	; 0x03
    2a7e:	52 2d       	mov	r21, r2
    2a80:	b8 01       	movw	r22, r16
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	9d 81       	ldd	r25, Y+5	; 0x05
    2a86:	86 0d       	add	r24, r6
    2a88:	97 1d       	adc	r25, r7
    2a8a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
    for(i=0; i<w; i++ ) {
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	9d 83       	std	Y+5, r25	; 0x05
    2a96:	8c 83       	std	Y+4, r24	; 0x04
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9c:	8c 15       	cp	r24, r12
    2a9e:	9d 05       	cpc	r25, r13
    2aa0:	c4 f2       	brlt	.-80     	; 0x2a52 <ili9341_drawXBitmap+0xa2>
  for(j=0; j<h; j++) {
    2aa2:	9f ef       	ldi	r25, 0xFF	; 255
    2aa4:	e9 1a       	sub	r14, r25
    2aa6:	f9 0a       	sbc	r15, r25
    2aa8:	0f 5f       	subi	r16, 0xFF	; 255
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	84 0c       	add	r8, r4
    2aae:	95 1c       	adc	r9, r5
    2ab0:	b2 cf       	rjmp	.-156    	; 0x2a16 <ili9341_drawXBitmap+0x66>
    for(i=0; i<w; i++ ) {
    2ab2:	1d 82       	std	Y+5, r1	; 0x05
    2ab4:	1c 82       	std	Y+4, r1	; 0x04
    2ab6:	f0 cf       	rjmp	.-32     	; 0x2a98 <ili9341_drawXBitmap+0xe8>

00002ab8 <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
vsetx=cursor_x;
    2ab8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2abc:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2ac0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <vsetx+0x1>
    2ac4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <vsetx>
vsety=cursor_y;
    2ac8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2acc:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2ad0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <vsety+0x1>
    2ad4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <vsety>
}
    2ad8:	08 95       	ret

00002ada <backuplocationvactual>:


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
vactualx=cursor_x;
    2ada:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2ade:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2ae2:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <vactualx+0x1>
    2ae6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <vactualx>
vactualy=cursor_y;
    2aea:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2aee:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2af2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <vactualy+0x1>
    2af6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <vactualy>
}
    2afa:	08 95       	ret

00002afc <backuplocationiset>:

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
isetx=cursor_x;
    2afc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2b00:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2b04:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <isetx+0x1>
    2b08:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <isetx>
isety=cursor_y;
    2b0c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2b10:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2b14:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <isety+0x1>
    2b18:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <isety>
}
    2b1c:	08 95       	ret

00002b1e <backuplocationiactual>:


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
iactualx=cursor_x;
    2b1e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2b22:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2b26:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <iactualx+0x1>
    2b2a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <iactualx>
iactualy=cursor_y;
    2b2e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2b32:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2b36:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <iactualy+0x1>
    2b3a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <iactualy>
}
    2b3e:	08 95       	ret

00002b40 <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    2b40:	2f 92       	push	r2
    2b42:	3f 92       	push	r3
    2b44:	4f 92       	push	r4
    2b46:	5f 92       	push	r5
    2b48:	6f 92       	push	r6
    2b4a:	7f 92       	push	r7
    2b4c:	8f 92       	push	r8
    2b4e:	9f 92       	push	r9
    2b50:	af 92       	push	r10
    2b52:	bf 92       	push	r11
    2b54:	cf 92       	push	r12
    2b56:	df 92       	push	r13
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	29 97       	sbiw	r28, 0x09	; 9
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	6b 01       	movw	r12, r22
    2b76:	19 01       	movw	r2, r18
    2b78:	09 83       	std	Y+1, r16	; 0x01
    2b7a:	1a 83       	std	Y+2, r17	; 0x02

if((x >=LCD_W)            || // Clip right
    2b7c:	88 87       	std	Y+8, r24	; 0x08
    2b7e:	99 87       	std	Y+9, r25	; 0x09
    2b80:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <LCD_W>
    2b84:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <LCD_W+0x1>
    2b88:	28 85       	ldd	r18, Y+8	; 0x08
    2b8a:	39 85       	ldd	r19, Y+9	; 0x09
    2b8c:	28 17       	cp	r18, r24
    2b8e:	39 07       	cpc	r19, r25
    2b90:	08 f0       	brcs	.+2      	; 0x2b94 <ili9341_drawchar+0x54>
    2b92:	68 c0       	rjmp	.+208    	; 0x2c64 <ili9341_drawchar+0x124>
    2b94:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LCD_H>
    2b98:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <LCD_H+0x1>
    2b9c:	68 17       	cp	r22, r24
    2b9e:	79 07       	cpc	r23, r25
    2ba0:	08 f0       	brcs	.+2      	; 0x2ba4 <ili9341_drawchar+0x64>
    2ba2:	60 c0       	rjmp	.+192    	; 0x2c64 <ili9341_drawchar+0x124>
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	36 e0       	ldi	r19, 0x06	; 6
    2ba8:	e3 9e       	mul	r14, r19
    2baa:	80 0d       	add	r24, r0
    2bac:	91 1d       	adc	r25, r1
    2bae:	11 24       	eor	r1, r1
(y >=LCD_H)           || // Clip bottom
    2bb0:	18 16       	cp	r1, r24
    2bb2:	19 06       	cpc	r1, r25
    2bb4:	0c f0       	brlt	.+2      	; 0x2bb8 <ili9341_drawchar+0x78>
    2bb6:	56 c0       	rjmp	.+172    	; 0x2c64 <ili9341_drawchar+0x124>
((y + 8 * size - 1) < 0))   // Clip top
    2bb8:	8e 2d       	mov	r24, r14
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9d 83       	std	Y+5, r25	; 0x05
    2bbe:	8c 83       	std	Y+4, r24	; 0x04
    2bc0:	e8 e0       	ldi	r30, 0x08	; 8
    2bc2:	ee 9e       	mul	r14, r30
    2bc4:	c0 01       	movw	r24, r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	86 0f       	add	r24, r22
    2bca:	97 1f       	adc	r25, r23
((x + 6 * size - 1) < 0) || // Clip left
    2bcc:	18 16       	cp	r1, r24
    2bce:	19 06       	cpc	r1, r25
    2bd0:	0c f0       	brlt	.+2      	; 0x2bd4 <ili9341_drawchar+0x94>
    2bd2:	48 c0       	rjmp	.+144    	; 0x2c64 <ili9341_drawchar+0x124>
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
    2bd4:	f5 e0       	ldi	r31, 0x05	; 5
    2bd6:	4f 9f       	mul	r20, r31
    2bd8:	a0 01       	movw	r20, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	9a 01       	movw	r18, r20
    2bde:	26 51       	subi	r18, 0x16	; 22
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	3f 83       	std	Y+7, r19	; 0x07
    2be4:	2e 83       	std	Y+6, r18	; 0x06
    2be6:	68 84       	ldd	r6, Y+8	; 0x08
    2be8:	79 84       	ldd	r7, Y+9	; 0x09
for (int8_t i=0; i<6; i++ ) {
    2bea:	1b 82       	std	Y+3, r1	; 0x03
} else if (bg != color) {
if (size == 1) // default size
ili9341_drawpixel(x+i, y+j, bg);
else 
{  // big size
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2bec:	5c 80       	ldd	r5, Y+4	; 0x04
    2bee:	4d 80       	ldd	r4, Y+5	; 0x05
if (i == 5) 
    2bf0:	3b 81       	ldd	r19, Y+3	; 0x03
line = 0x0;
    2bf2:	f1 2c       	mov	r15, r1
if (i == 5) 
    2bf4:	35 30       	cpi	r19, 0x05	; 5
    2bf6:	19 f0       	breq	.+6      	; 0x2bfe <ili9341_drawchar+0xbe>
line = pgm_read_byte(font+(c*5)+i);
    2bf8:	ee 81       	ldd	r30, Y+6	; 0x06
    2bfa:	ff 81       	ldd	r31, Y+7	; 0x07
    2bfc:	f4 90       	lpm	r15, Z
line = 0x0;
    2bfe:	46 01       	movw	r8, r12
    2c00:	b1 2c       	mov	r11, r1
    2c02:	a1 2c       	mov	r10, r1
if (line & 0x1) {
    2c04:	f0 fe       	sbrs	r15, 0
    2c06:	47 c0       	rjmp	.+142    	; 0x2c96 <ili9341_drawchar+0x156>
if (size == 1) // default size
    2c08:	f1 e0       	ldi	r31, 0x01	; 1
ili9341_drawpixel(x+i, y+j, color);
    2c0a:	a1 01       	movw	r20, r2
ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    2c0c:	81 01       	movw	r16, r2
if (size == 1) // default size
    2c0e:	ef 12       	cpse	r14, r31
    2c10:	50 c0       	rjmp	.+160    	; 0x2cb2 <ili9341_drawchar+0x172>
ili9341_drawpixel(x+i, y+j, bg);
    2c12:	b6 01       	movw	r22, r12
    2c14:	6a 0d       	add	r22, r10
    2c16:	7b 1d       	adc	r23, r11
    2c18:	c3 01       	movw	r24, r6
    2c1a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <ili9341_drawpixel>
}
}
line >>= 1;
    2c1e:	f6 94       	lsr	r15
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	a8 1a       	sub	r10, r24
    2c24:	b8 0a       	sbc	r11, r24
    2c26:	ec 81       	ldd	r30, Y+4	; 0x04
    2c28:	fd 81       	ldd	r31, Y+5	; 0x05
    2c2a:	8e 0e       	add	r8, r30
    2c2c:	9f 1e       	adc	r9, r31
for (int8_t j = 0; j<8; j++) {
    2c2e:	f8 e0       	ldi	r31, 0x08	; 8
    2c30:	af 16       	cp	r10, r31
    2c32:	b1 04       	cpc	r11, r1
    2c34:	39 f7       	brne	.-50     	; 0x2c04 <ili9341_drawchar+0xc4>
    2c36:	2b 81       	ldd	r18, Y+3	; 0x03
    2c38:	2f 5f       	subi	r18, 0xFF	; 255
    2c3a:	2b 83       	std	Y+3, r18	; 0x03
    2c3c:	88 85       	ldd	r24, Y+8	; 0x08
    2c3e:	99 85       	ldd	r25, Y+9	; 0x09
    2c40:	ec 81       	ldd	r30, Y+4	; 0x04
    2c42:	fd 81       	ldd	r31, Y+5	; 0x05
    2c44:	8e 0f       	add	r24, r30
    2c46:	9f 1f       	adc	r25, r31
    2c48:	99 87       	std	Y+9, r25	; 0x09
    2c4a:	88 87       	std	Y+8, r24	; 0x08
    2c4c:	ff ef       	ldi	r31, 0xFF	; 255
    2c4e:	6f 1a       	sub	r6, r31
    2c50:	7f 0a       	sbc	r7, r31
    2c52:	2e 81       	ldd	r18, Y+6	; 0x06
    2c54:	3f 81       	ldd	r19, Y+7	; 0x07
    2c56:	2f 5f       	subi	r18, 0xFF	; 255
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	3f 83       	std	Y+7, r19	; 0x07
    2c5c:	2e 83       	std	Y+6, r18	; 0x06
for (int8_t i=0; i<6; i++ ) {
    2c5e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c60:	36 30       	cpi	r19, 0x06	; 6
    2c62:	31 f6       	brne	.-116    	; 0x2bf0 <ili9341_drawchar+0xb0>
}
}
}
    2c64:	29 96       	adiw	r28, 0x09	; 9
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	bf 90       	pop	r11
    2c82:	af 90       	pop	r10
    2c84:	9f 90       	pop	r9
    2c86:	8f 90       	pop	r8
    2c88:	7f 90       	pop	r7
    2c8a:	6f 90       	pop	r6
    2c8c:	5f 90       	pop	r5
    2c8e:	4f 90       	pop	r4
    2c90:	3f 90       	pop	r3
    2c92:	2f 90       	pop	r2
    2c94:	08 95       	ret
} else if (bg != color) {
    2c96:	29 81       	ldd	r18, Y+1	; 0x01
    2c98:	3a 81       	ldd	r19, Y+2	; 0x02
    2c9a:	22 15       	cp	r18, r2
    2c9c:	33 05       	cpc	r19, r3
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <ili9341_drawchar+0x162>
    2ca0:	be cf       	rjmp	.-132    	; 0x2c1e <ili9341_drawchar+0xde>
if (size == 1) // default size
    2ca2:	31 e0       	ldi	r19, 0x01	; 1
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2ca4:	09 81       	ldd	r16, Y+1	; 0x01
    2ca6:	1a 81       	ldd	r17, Y+2	; 0x02
if (size == 1) // default size
    2ca8:	e3 12       	cpse	r14, r19
    2caa:	03 c0       	rjmp	.+6      	; 0x2cb2 <ili9341_drawchar+0x172>
ili9341_drawpixel(x+i, y+j, bg);
    2cac:	49 81       	ldd	r20, Y+1	; 0x01
    2cae:	5a 81       	ldd	r21, Y+2	; 0x02
    2cb0:	b0 cf       	rjmp	.-160    	; 0x2c12 <ili9341_drawchar+0xd2>
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2cb2:	25 2d       	mov	r18, r5
    2cb4:	34 2d       	mov	r19, r4
    2cb6:	45 2d       	mov	r20, r5
    2cb8:	54 2d       	mov	r21, r4
    2cba:	b4 01       	movw	r22, r8
    2cbc:	88 85       	ldd	r24, Y+8	; 0x08
    2cbe:	99 85       	ldd	r25, Y+9	; 0x09
    2cc0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <ili9341_fillrect>
    2cc4:	ac cf       	rjmp	.-168    	; 0x2c1e <ili9341_drawchar+0xde>

00002cc6 <ili9341_write.part.0>:
{
if(s>8) return;
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
    2cc6:	ef 92       	push	r14
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	48 2f       	mov	r20, r24
} else if (c == '\r') {
 // skip em
}
else
{
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    2cce:	e0 90 11 02 	lds	r14, 0x0211	; 0x800211 <textsize>
    2cd2:	00 91 fb 01 	lds	r16, 0x01FB	; 0x8001fb <textbgcolour>
    2cd6:	10 91 fc 01 	lds	r17, 0x01FC	; 0x8001fc <textbgcolour+0x1>
    2cda:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <textcolour>
    2cde:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <textcolour+0x1>
    2ce2:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <cursor_y>
    2ce6:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2cea:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2cee:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2cf2:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <ili9341_drawchar>
cursor_x += textsize*6;
    2cf6:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <textsize>
    2cfa:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <cursor_x>
    2cfe:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cursor_x+0x1>
    2d02:	36 e0       	ldi	r19, 0x06	; 6
    2d04:	23 9f       	mul	r18, r19
    2d06:	80 0d       	add	r24, r0
    2d08:	91 1d       	adc	r25, r1
    2d0a:	11 24       	eor	r1, r1
    2d0c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <cursor_x+0x1>
    2d10:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <cursor_x>
}
}
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ef 90       	pop	r14
    2d1a:	08 95       	ret

00002d1c <ili9341_setcursor>:
cursor_x=x;
    2d1c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <cursor_x+0x1>
    2d20:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <cursor_x>
cursor_y=y;
    2d24:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <cursor_y+0x1>
    2d28:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <cursor_y>
}
    2d2c:	08 95       	ret

00002d2e <ili9341_settextcolour>:
textcolour=x;
    2d2e:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <textcolour+0x1>
    2d32:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <textcolour>
textbgcolour=y;
    2d36:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <textbgcolour+0x1>
    2d3a:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <textbgcolour>
}
    2d3e:	08 95       	ret

00002d40 <ili9341_settextsize>:
if(s>8) return;
    2d40:	89 30       	cpi	r24, 0x09	; 9
    2d42:	28 f4       	brcc	.+10     	; 0x2d4e <ili9341_settextsize+0xe>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2d44:	81 11       	cpse	r24, r1
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <ili9341_settextsize+0xa>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <textsize>
}
    2d4e:	08 95       	ret

00002d50 <ili9341_write>:
if (c == '\n') {
    2d50:	8a 30       	cpi	r24, 0x0A	; 10
    2d52:	a9 f4       	brne	.+42     	; 0x2d7e <ili9341_write+0x2e>
cursor_y += textsize*8;
    2d54:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <textsize>
    2d58:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <cursor_y>
    2d5c:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2d60:	48 e0       	ldi	r20, 0x08	; 8
    2d62:	84 9f       	mul	r24, r20
    2d64:	c0 01       	movw	r24, r0
    2d66:	11 24       	eor	r1, r1
    2d68:	82 0f       	add	r24, r18
    2d6a:	93 1f       	adc	r25, r19
    2d6c:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    2d70:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
cursor_x  = 0;
    2d74:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <cursor_x+0x1>
    2d78:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <cursor_x>
    2d7c:	08 95       	ret
} else if (c == '\r') {
    2d7e:	8d 30       	cpi	r24, 0x0D	; 13
    2d80:	11 f0       	breq	.+4      	; 0x2d86 <ili9341_write+0x36>
    2d82:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <ili9341_write.part.0>
}
    2d86:	08 95       	ret

00002d88 <ili9341_putchar_printf>:
	ili9341_write(var);
    2d88:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <ili9341_write>
}
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	08 95       	ret

00002d92 <display_init>:


void display_init(void)//display initial data regarding my power supply
{
    2d92:	8f 92       	push	r8
    2d94:	9f 92       	push	r9
    2d96:	af 92       	push	r10
    2d98:	bf 92       	push	r11
    2d9a:	df 92       	push	r13
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
stdout = & mydata;//it is used for printf function and must be declared locally
    2da8:	8f e1       	ldi	r24, 0x1F	; 31
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <__iob+0x3>
    2db0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__iob+0x2>
cursor_x=x;
    2db4:	04 e0       	ldi	r16, 0x04	; 4
    2db6:	10 e0       	ldi	r17, 0x00	; 0
    2db8:	10 93 10 02 	sts	0x0210, r17	; 0x800210 <cursor_x+0x1>
    2dbc:	00 93 0f 02 	sts	0x020F, r16	; 0x80020f <cursor_x>
cursor_y=y;
    2dc0:	10 93 fe 01 	sts	0x01FE, r17	; 0x8001fe <cursor_y+0x1>
    2dc4:	00 93 fd 01 	sts	0x01FD, r16	; 0x8001fd <cursor_y>
    2dc8:	8f e9       	ldi	r24, 0x9F	; 159
    2dca:	9f e0       	ldi	r25, 0x0F	; 15
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <display_init+0x3a>
    2dd0:	00 c0       	rjmp	.+0      	; 0x2dd2 <display_init+0x40>
    2dd2:	00 00       	nop
textcolour=x;
    2dd4:	80 ee       	ldi	r24, 0xE0	; 224
    2dd6:	97 e0       	ldi	r25, 0x07	; 7
    2dd8:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <textcolour+0x1>
    2ddc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <textcolour>
textbgcolour=y;
    2de0:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <textbgcolour+0x1>
    2de4:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <textbgcolour>
    2de8:	8f e9       	ldi	r24, 0x9F	; 159
    2dea:	9f e0       	ldi	r25, 0x0F	; 15
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <display_init+0x5a>
    2df0:	00 c0       	rjmp	.+0      	; 0x2df2 <display_init+0x60>
    2df2:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2df4:	c2 e0       	ldi	r28, 0x02	; 2
    2df6:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    2dfa:	8f e9       	ldi	r24, 0x9F	; 159
    2dfc:	9f e0       	ldi	r25, 0x0F	; 15
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <display_init+0x6c>
    2e02:	00 c0       	rjmp	.+0      	; 0x2e04 <display_init+0x72>
    2e04:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(GREEN,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("mode - ");
    2e06:	8d e3       	ldi	r24, 0x3D	; 61
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	9f 93       	push	r25
    2e0c:	8f 93       	push	r24
    2e0e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    2e12:	8f e9       	ldi	r24, 0x9F	; 159
    2e14:	9f e0       	ldi	r25, 0x0F	; 15
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <display_init+0x84>
    2e1a:	00 c0       	rjmp	.+0      	; 0x2e1c <display_init+0x8a>
    2e1c:	00 00       	nop
textcolour=x;
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	98 ef       	ldi	r25, 0xF8	; 248
    2e22:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <textcolour+0x1>
    2e26:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <textcolour>
textbgcolour=y;
    2e2a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <textbgcolour+0x1>
    2e2e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <textbgcolour>
    2e32:	8f e9       	ldi	r24, 0x9F	; 159
    2e34:	9f e0       	ldi	r25, 0x0F	; 15
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <display_init+0xa4>
    2e3a:	00 c0       	rjmp	.+0      	; 0x2e3c <display_init+0xaa>
    2e3c:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2e3e:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    2e42:	8f e9       	ldi	r24, 0x9F	; 159
    2e44:	9f e0       	ldi	r25, 0x0F	; 15
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <display_init+0xb4>
    2e4a:	00 c0       	rjmp	.+0      	; 0x2e4c <display_init+0xba>
    2e4c:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(RED,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("constant voltage");
    2e4e:	85 e4       	ldi	r24, 0x45	; 69
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	9f 93       	push	r25
    2e54:	8f 93       	push	r24
    2e56:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    2e5a:	8f e9       	ldi	r24, 0x9F	; 159
    2e5c:	9f e0       	ldi	r25, 0x0F	; 15
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <display_init+0xcc>
    2e62:	00 c0       	rjmp	.+0      	; 0x2e64 <display_init+0xd2>
    2e64:	00 00       	nop
cursor_x=x;
    2e66:	10 93 10 02 	sts	0x0210, r17	; 0x800210 <cursor_x+0x1>
    2e6a:	00 93 0f 02 	sts	0x020F, r16	; 0x80020f <cursor_x>
cursor_y=y;
    2e6e:	88 e2       	ldi	r24, 0x28	; 40
    2e70:	a8 2e       	mov	r10, r24
    2e72:	b1 2c       	mov	r11, r1
    2e74:	b0 92 fe 01 	sts	0x01FE, r11	; 0x8001fe <cursor_y+0x1>
    2e78:	a0 92 fd 01 	sts	0x01FD, r10	; 0x8001fd <cursor_y>
    2e7c:	8f e9       	ldi	r24, 0x9F	; 159
    2e7e:	9f e0       	ldi	r25, 0x0F	; 15
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <display_init+0xee>
    2e84:	00 c0       	rjmp	.+0      	; 0x2e86 <display_init+0xf4>
    2e86:	00 00       	nop
textcolour=x;
    2e88:	8f ef       	ldi	r24, 0xFF	; 255
    2e8a:	97 e0       	ldi	r25, 0x07	; 7
    2e8c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <textcolour+0x1>
    2e90:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <textcolour>
textbgcolour=y;
    2e94:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <textbgcolour+0x1>
    2e98:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <textbgcolour>
    2e9c:	8f e9       	ldi	r24, 0x9F	; 159
    2e9e:	9f e0       	ldi	r25, 0x0F	; 15
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <display_init+0x10e>
    2ea4:	00 c0       	rjmp	.+0      	; 0x2ea6 <display_init+0x114>
    2ea6:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2ea8:	d4 e0       	ldi	r29, 0x04	; 4
    2eaa:	d0 93 11 02 	sts	0x0211, r29	; 0x800211 <textsize>
    2eae:	8f e9       	ldi	r24, 0x9F	; 159
    2eb0:	9f e0       	ldi	r25, 0x0F	; 15
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <display_init+0x120>
    2eb6:	00 c0       	rjmp	.+0      	; 0x2eb8 <display_init+0x126>
    2eb8:	00 00       	nop
} else if (c == '\r') {
    2eba:	86 e5       	ldi	r24, 0x56	; 86
    2ebc:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <ili9341_write.part.0>
    2ec0:	8f e9       	ldi	r24, 0x9F	; 159
    2ec2:	9f e0       	ldi	r25, 0x0F	; 15
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <display_init+0x132>
    2ec8:	00 c0       	rjmp	.+0      	; 0x2eca <display_init+0x138>
    2eca:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    2ecc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2ed0:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2ed4:	06 96       	adiw	r24, 0x06	; 6
    2ed6:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    2eda:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2ede:	c3 e0       	ldi	r28, 0x03	; 3
    2ee0:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    2ee4:	8f e9       	ldi	r24, 0x9F	; 159
    2ee6:	9f e0       	ldi	r25, 0x0F	; 15
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <display_init+0x156>
    2eec:	00 c0       	rjmp	.+0      	; 0x2eee <display_init+0x15c>
    2eee:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set\n");
    2ef0:	86 e5       	ldi	r24, 0x56	; 86
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <puts>
    2ef8:	8f e9       	ldi	r24, 0x9F	; 159
    2efa:	9f e0       	ldi	r25, 0x0F	; 15
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <display_init+0x16a>
    2f00:	00 c0       	rjmp	.+0      	; 0x2f02 <display_init+0x170>
    2f02:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+12;
    2f04:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2f08:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2f0c:	0c 96       	adiw	r24, 0x0c	; 12
    2f0e:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    2f12:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
backuplocationvset();
    2f16:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <backuplocationvset>
printf("00.00v");
    2f1a:	8a e5       	ldi	r24, 0x5A	; 90
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
    2f1e:	9f 93       	push	r25
    2f20:	8f 93       	push	r24
    2f22:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    2f26:	8f e9       	ldi	r24, 0x9F	; 159
    2f28:	9f e0       	ldi	r25, 0x0F	; 15
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <display_init+0x198>
    2f2e:	00 c0       	rjmp	.+0      	; 0x2f30 <display_init+0x19e>
    2f30:	00 00       	nop
cursor_x=x;
    2f32:	10 93 10 02 	sts	0x0210, r17	; 0x800210 <cursor_x+0x1>
    2f36:	00 93 0f 02 	sts	0x020F, r16	; 0x80020f <cursor_x>
cursor_y=y;
    2f3a:	98 e7       	ldi	r25, 0x78	; 120
    2f3c:	89 2e       	mov	r8, r25
    2f3e:	91 2c       	mov	r9, r1
    2f40:	90 92 fe 01 	sts	0x01FE, r9	; 0x8001fe <cursor_y+0x1>
    2f44:	80 92 fd 01 	sts	0x01FD, r8	; 0x8001fd <cursor_y>
    2f48:	8f e9       	ldi	r24, 0x9F	; 159
    2f4a:	9f e0       	ldi	r25, 0x0F	; 15
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <display_init+0x1ba>
    2f50:	00 c0       	rjmp	.+0      	; 0x2f52 <display_init+0x1c0>
    2f52:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2f54:	d0 93 11 02 	sts	0x0211, r29	; 0x800211 <textsize>
    2f58:	8f e9       	ldi	r24, 0x9F	; 159
    2f5a:	9f e0       	ldi	r25, 0x0F	; 15
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <display_init+0x1ca>
    2f60:	00 c0       	rjmp	.+0      	; 0x2f62 <display_init+0x1d0>
    2f62:	00 00       	nop
} else if (c == '\r') {
    2f64:	86 e5       	ldi	r24, 0x56	; 86
    2f66:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <ili9341_write.part.0>
    2f6a:	8f e9       	ldi	r24, 0x9F	; 159
    2f6c:	9f e0       	ldi	r25, 0x0F	; 15
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <display_init+0x1dc>
    2f72:	00 c0       	rjmp	.+0      	; 0x2f74 <display_init+0x1e2>
    2f74:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    2f76:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    2f7a:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    2f7e:	06 96       	adiw	r24, 0x06	; 6
    2f80:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    2f84:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2f88:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    2f8c:	8f e9       	ldi	r24, 0x9F	; 159
    2f8e:	9f e0       	ldi	r25, 0x0F	; 15
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <display_init+0x1fe>
    2f94:	00 c0       	rjmp	.+0      	; 0x2f96 <display_init+0x204>
    2f96:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual\n\n");
    2f98:	81 e6       	ldi	r24, 0x61	; 97
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <puts>
    2fa0:	8f e9       	ldi	r24, 0x9F	; 159
    2fa2:	9f e0       	ldi	r25, 0x0F	; 15
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <display_init+0x212>
    2fa8:	00 c0       	rjmp	.+0      	; 0x2faa <display_init+0x218>
    2faa:	00 00       	nop
_delay_ms(2);
backuplocationvactual();
    2fac:	0e 94 6d 15 	call	0x2ada	; 0x2ada <backuplocationvactual>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2fb0:	25 e0       	ldi	r18, 0x05	; 5
    2fb2:	d2 2e       	mov	r13, r18
    2fb4:	d0 92 11 02 	sts	0x0211, r13	; 0x800211 <textsize>
ili9341_settextsize(5);
printf("00.00");
    2fb8:	09 e6       	ldi	r16, 0x69	; 105
    2fba:	11 e0       	ldi	r17, 0x01	; 1
    2fbc:	1f 93       	push	r17
    2fbe:	0f 93       	push	r16
    2fc0:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    2fc4:	8f e9       	ldi	r24, 0x9F	; 159
    2fc6:	9f e0       	ldi	r25, 0x0F	; 15
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <display_init+0x236>
    2fcc:	00 c0       	rjmp	.+0      	; 0x2fce <display_init+0x23c>
    2fce:	00 00       	nop
cursor_x=x;
    2fd0:	34 ea       	ldi	r19, 0xA4	; 164
    2fd2:	e3 2e       	mov	r14, r19
    2fd4:	f1 2c       	mov	r15, r1
    2fd6:	f0 92 10 02 	sts	0x0210, r15	; 0x800210 <cursor_x+0x1>
    2fda:	e0 92 0f 02 	sts	0x020F, r14	; 0x80020f <cursor_x>
cursor_y=y;
    2fde:	b0 92 fe 01 	sts	0x01FE, r11	; 0x8001fe <cursor_y+0x1>
    2fe2:	a0 92 fd 01 	sts	0x01FD, r10	; 0x8001fd <cursor_y>
    2fe6:	8f e9       	ldi	r24, 0x9F	; 159
    2fe8:	9f e0       	ldi	r25, 0x0F	; 15
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <display_init+0x258>
    2fee:	00 c0       	rjmp	.+0      	; 0x2ff0 <display_init+0x25e>
    2ff0:	00 00       	nop
textcolour=x;
    2ff2:	80 ee       	ldi	r24, 0xE0	; 224
    2ff4:	9f ef       	ldi	r25, 0xFF	; 255
    2ff6:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <textcolour+0x1>
    2ffa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <textcolour>
textbgcolour=y;
    2ffe:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <textbgcolour+0x1>
    3002:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <textbgcolour>
    3006:	8f e9       	ldi	r24, 0x9F	; 159
    3008:	9f e0       	ldi	r25, 0x0F	; 15
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <display_init+0x278>
    300e:	00 c0       	rjmp	.+0      	; 0x3010 <display_init+0x27e>
    3010:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3012:	d0 93 11 02 	sts	0x0211, r29	; 0x800211 <textsize>
    3016:	8f e9       	ldi	r24, 0x9F	; 159
    3018:	9f e0       	ldi	r25, 0x0F	; 15
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <display_init+0x288>
    301e:	00 c0       	rjmp	.+0      	; 0x3020 <display_init+0x28e>
    3020:	00 00       	nop
} else if (c == '\r') {
    3022:	89 e4       	ldi	r24, 0x49	; 73
    3024:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <ili9341_write.part.0>
    3028:	8f e9       	ldi	r24, 0x9F	; 159
    302a:	9f e0       	ldi	r25, 0x0F	; 15
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <display_init+0x29a>
    3030:	00 c0       	rjmp	.+0      	; 0x3032 <display_init+0x2a0>
    3032:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    3034:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    3038:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    303c:	06 96       	adiw	r24, 0x06	; 6
    303e:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    3042:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    3046:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    304a:	8f e9       	ldi	r24, 0x9F	; 159
    304c:	9f e0       	ldi	r25, 0x0F	; 15
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <display_init+0x2bc>
    3052:	00 c0       	rjmp	.+0      	; 0x3054 <display_init+0x2c2>
    3054:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set");
    3056:	86 e5       	ldi	r24, 0x56	; 86
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	9f 93       	push	r25
    305c:	8f 93       	push	r24
    305e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    3062:	8f e9       	ldi	r24, 0x9F	; 159
    3064:	9f e0       	ldi	r25, 0x0F	; 15
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <display_init+0x2d4>
    306a:	00 c0       	rjmp	.+0      	; 0x306c <display_init+0x2da>
    306c:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    306e:	f0 92 10 02 	sts	0x0210, r15	; 0x800210 <cursor_x+0x1>
    3072:	e0 92 0f 02 	sts	0x020F, r14	; 0x80020f <cursor_x>
cursor_y=(cursor_y+36);
    3076:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    307a:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    307e:	84 96       	adiw	r24, 0x24	; 36
    3080:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    3084:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
backuplocationiset();
    3088:	0e 94 7e 15 	call	0x2afc	; 0x2afc <backuplocationiset>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    308c:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
ili9341_settextsize(3);
printf("00.00a");
    3090:	8f e6       	ldi	r24, 0x6F	; 111
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	9f 93       	push	r25
    3096:	8f 93       	push	r24
    3098:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    309c:	8f e9       	ldi	r24, 0x9F	; 159
    309e:	9f e0       	ldi	r25, 0x0F	; 15
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <display_init+0x30e>
    30a4:	00 c0       	rjmp	.+0      	; 0x30a6 <display_init+0x314>
    30a6:	00 00       	nop
cursor_x=x;
    30a8:	f0 92 10 02 	sts	0x0210, r15	; 0x800210 <cursor_x+0x1>
    30ac:	e0 92 0f 02 	sts	0x020F, r14	; 0x80020f <cursor_x>
cursor_y=y;
    30b0:	90 92 fe 01 	sts	0x01FE, r9	; 0x8001fe <cursor_y+0x1>
    30b4:	80 92 fd 01 	sts	0x01FD, r8	; 0x8001fd <cursor_y>
    30b8:	8f e9       	ldi	r24, 0x9F	; 159
    30ba:	9f e0       	ldi	r25, 0x0F	; 15
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <display_init+0x32a>
    30c0:	00 c0       	rjmp	.+0      	; 0x30c2 <display_init+0x330>
    30c2:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    30c4:	d0 93 11 02 	sts	0x0211, r29	; 0x800211 <textsize>
    30c8:	8f e9       	ldi	r24, 0x9F	; 159
    30ca:	9f e0       	ldi	r25, 0x0F	; 15
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <display_init+0x33a>
    30d0:	00 c0       	rjmp	.+0      	; 0x30d2 <display_init+0x340>
    30d2:	00 00       	nop
} else if (c == '\r') {
    30d4:	89 e4       	ldi	r24, 0x49	; 73
    30d6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <ili9341_write.part.0>
    30da:	8f e9       	ldi	r24, 0x9F	; 159
    30dc:	9f e0       	ldi	r25, 0x0F	; 15
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <display_init+0x34c>
    30e2:	00 c0       	rjmp	.+0      	; 0x30e4 <display_init+0x352>
    30e4:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    30e6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    30ea:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    30ee:	06 96       	adiw	r24, 0x06	; 6
    30f0:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    30f4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    30f8:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <textsize>
    30fc:	8f e9       	ldi	r24, 0x9F	; 159
    30fe:	9f e0       	ldi	r25, 0x0F	; 15
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <display_init+0x36e>
    3104:	00 c0       	rjmp	.+0      	; 0x3106 <display_init+0x374>
    3106:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual");
    3108:	86 e7       	ldi	r24, 0x76	; 118
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	9f 93       	push	r25
    310e:	8f 93       	push	r24
    3110:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    3114:	8f e9       	ldi	r24, 0x9F	; 159
    3116:	9f e0       	ldi	r25, 0x0F	; 15
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <display_init+0x386>
    311c:	00 c0       	rjmp	.+0      	; 0x311e <display_init+0x38c>
    311e:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    3120:	f0 92 10 02 	sts	0x0210, r15	; 0x800210 <cursor_x+0x1>
    3124:	e0 92 0f 02 	sts	0x020F, r14	; 0x80020f <cursor_x>
backuplocationiactual();
    3128:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <backuplocationiactual>
cursor_y=cursor_y+48;
    312c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <cursor_y>
    3130:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <cursor_y+0x1>
    3134:	c0 96       	adiw	r24, 0x30	; 48
    3136:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <cursor_y+0x1>
    313a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    313e:	d0 92 11 02 	sts	0x0211, r13	; 0x800211 <textsize>
ili9341_settextsize(5);
printf("00.00");
    3142:	1f 93       	push	r17
    3144:	0f 93       	push	r16
    3146:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <printf>
    314a:	9f ef       	ldi	r25, 0xFF	; 255
    314c:	23 ed       	ldi	r18, 0xD3	; 211
    314e:	80 e3       	ldi	r24, 0x30	; 48
    3150:	91 50       	subi	r25, 0x01	; 1
    3152:	20 40       	sbci	r18, 0x00	; 0
    3154:	80 40       	sbci	r24, 0x00	; 0
    3156:	e1 f7       	brne	.-8      	; 0x3150 <display_init+0x3be>
    3158:	00 c0       	rjmp	.+0      	; 0x315a <display_init+0x3c8>
    315a:	00 00       	nop
_delay_ms(2000);

}
    315c:	8d b7       	in	r24, 0x3d	; 61
    315e:	9e b7       	in	r25, 0x3e	; 62
    3160:	40 96       	adiw	r24, 0x10	; 16
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	9e bf       	out	0x3e, r25	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	8d bf       	out	0x3d, r24	; 61
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	df 90       	pop	r13
    317a:	bf 90       	pop	r11
    317c:	af 90       	pop	r10
    317e:	9f 90       	pop	r9
    3180:	8f 90       	pop	r8
    3182:	08 95       	ret

00003184 <uart_send_char>:
#include <stdlib.h>


void uart_send_char(char c)
{
	while((UCSR0A & (1<<UDRE0)) == 0){};
    3184:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3188:	95 ff       	sbrs	r25, 5
    318a:	fc cf       	rjmp	.-8      	; 0x3184 <uart_send_char>
    UDR0 = c;
    318c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    3190:	08 95       	ret

00003192 <uart_send_string>:
void uart_send_string(char *s)
{
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	ec 01       	movw	r28, r24
	while(*s != 0x00)
    3198:	89 91       	ld	r24, Y+
    319a:	81 11       	cpse	r24, r1
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <uart_send_string+0x12>
	{
		uart_send_char(*s);
		s++;
	}
}//end of send_string
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	08 95       	ret
		uart_send_char(*s);
    31a4:	0e 94 c2 18 	call	0x3184	; 0x3184 <uart_send_char>
		s++;
    31a8:	f7 cf       	rjmp	.-18     	; 0x3198 <uart_send_string+0x6>

000031aa <uart_send_u8data>:

void uart_send_u8data(uint8_t d)
{
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	2a 97       	sbiw	r28, 0x0a	; 10
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    31be:	4a e0       	ldi	r20, 0x0A	; 10
    31c0:	be 01       	movw	r22, r28
    31c2:	6f 5f       	subi	r22, 0xFF	; 255
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__itoa_ncheck>
	char buffer[10];
	
	itoa(d,buffer,10);
	uart_send_string(buffer);
    31cc:	ce 01       	movw	r24, r28
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	0e 94 c9 18 	call	0x3192	; 0x3192 <uart_send_string>
}
    31d4:	2a 96       	adiw	r28, 0x0a	; 10
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	08 95       	ret

000031e6 <uart_send_u16data>:
void uart_send_u16data(uint16_t d)
{
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	2a 97       	sbiw	r28, 0x0a	; 10
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    31fa:	4a e0       	ldi	r20, 0x0A	; 10
    31fc:	be 01       	movw	r22, r28
    31fe:	6f 5f       	subi	r22, 0xFF	; 255
    3200:	7f 4f       	sbci	r23, 0xFF	; 255
    3202:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__utoa_ncheck>
	char buffer[10];
	
	utoa(d,buffer,10);
	uart_send_string(buffer);
    3206:	ce 01       	movw	r24, r28
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	0e 94 c9 18 	call	0x3192	; 0x3192 <uart_send_string>
}
    320e:	2a 96       	adiw	r28, 0x0a	; 10
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	f8 94       	cli
    3214:	de bf       	out	0x3e, r29	; 62
    3216:	0f be       	out	0x3f, r0	; 63
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	08 95       	ret

00003220 <TWIInit>:
 */

void TWIInit(void)
{
 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  PRR =0x00;
    3220:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 // TWSR |= (1<<TWPS0);                          /* no prescaler */
 
  
  //set sck to 400khz
	TWSR = 0x02;
    3224:	82 e0       	ldi	r24, 0x02	; 2
    3226:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//TWBR = 0x0C;
	 TWBR = ((16000000/400000)-16)/2;  /* (F_CPU / F_TWI) must be > 10 for stable operation */
    322a:	8c e0       	ldi	r24, 0x0C	; 12
    322c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//enable TWI
	TWCR = (1<<TWEN);
    3230:	84 e0       	ldi	r24, 0x04	; 4
    3232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    3236:	08 95       	ret

00003238 <TWIStart>:
 
void TWIStart(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    3238:	84 ea       	ldi	r24, 0xA4	; 164
    323a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    323e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3242:	87 ff       	sbrs	r24, 7
    3244:	fc cf       	rjmp	.-8      	; 0x323e <TWIStart+0x6>
}
    3246:	08 95       	ret

00003248 <TWIStop>:

void TWIStop(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    3248:	84 e9       	ldi	r24, 0x94	; 148
    324a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
} 
    324e:	08 95       	ret

00003250 <TWIWrite>:

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
    3250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
    3254:	84 e8       	ldi	r24, 0x84	; 132
    3256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    325a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    325e:	87 ff       	sbrs	r24, 7
    3260:	fc cf       	rjmp	.-8      	; 0x325a <TWIWrite+0xa>
}
    3262:	08 95       	ret

00003264 <TWIReadACK>:

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN) | (1<<TWEA));
    3264:	84 ec       	ldi	r24, 0xC4	; 196
    3266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    326a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    326e:	87 ff       	sbrs	r24, 7
    3270:	fc cf       	rjmp	.-8      	; 0x326a <TWIReadACK+0x6>
	return TWDR;
    3272:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    3276:	08 95       	ret

00003278 <TWIReadNACK>:

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    3278:	84 e8       	ldi	r24, 0x84	; 132
    327a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    327e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3282:	87 ff       	sbrs	r24, 7
    3284:	fc cf       	rjmp	.-8      	; 0x327e <TWIReadNACK+0x6>
	return TWDR;
    3286:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    328a:	08 95       	ret

0000328c <TWIGetStatus>:
	 *  0x38   Arbitration in SLA+W lost
	 */
	 
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
    328c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
    3290:	88 7f       	andi	r24, 0xF8	; 248
    3292:	08 95       	ret

00003294 <main>:
{
    3294:	00 d0       	rcall	.+0      	; 0x3296 <main+0x2>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <main+0x4>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
	init_ili9341();
    329c:	0e 94 1e 08 	call	0x103c	; 0x103c <init_ili9341>
	yy=240;
    32a0:	80 ef       	ldi	r24, 0xF0	; 240
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <yy+0x1>
    32a8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <yy>
	xx=0;
    32ac:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <xx+0x1>
    32b0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <xx>
	zell=0;
    32b4:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <zell+0x1>
    32b8:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <zell>
	color=123;
    32bc:	8b e7       	ldi	r24, 0x7B	; 123
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <color+0x1>
    32c4:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <color>
	var_x=0x01;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <var_x+0x1>
    32d0:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <var_x>
	temp_ovs=0;
    32d4:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <temp_ovs>
	pres_ovs=0;
    32d8:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <pres_ovs>
	value=0;
    32dc:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <value>
	rdy=0;
    32e0:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rdy>
	altitude=0;
    32e4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <altitude>
    32e8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <altitude+0x1>
    32ec:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <altitude+0x2>
    32f0:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <altitude+0x3>
	tt=0;
    32f4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <tt+0x1>
    32f8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <tt>
	log_pos=0;
    32fc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <log_pos+0x1>
    3300:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <log_pos>
	qnh=101525;
    3304:	85 e9       	ldi	r24, 0x95	; 149
    3306:	9c e8       	ldi	r25, 0x8C	; 140
    3308:	a1 e0       	ldi	r26, 0x01	; 1
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <qnh>
    3310:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <qnh+0x1>
    3314:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <qnh+0x2>
    3318:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <qnh+0x3>
	TWIInit();
    331c:	0e 94 10 19 	call	0x3220	; 0x3220 <TWIInit>
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
    3320:	8c e9       	ldi	r24, 0x9C	; 156
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    3328:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12);
    332c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3330:	88 60       	ori	r24, 0x08	; 8
    3332:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 |= (1 << OCIE1A);
    3336:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    333a:	82 60       	ori	r24, 0x02	; 2
    333c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B |= (1 << CS12) | (1 << CS10);
    3340:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3344:	85 60       	ori	r24, 0x05	; 5
    3346:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    sei();
    334a:	78 94       	sei
	DPS310_init(ULTRA);
    334c:	84 e0       	ldi	r24, 0x04	; 4
    334e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DPS310_init>
    3352:	8f e5       	ldi	r24, 0x5F	; 95
    3354:	9a ee       	ldi	r25, 0xEA	; 234
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <main+0xc2>
    335a:	00 c0       	rjmp	.+0      	; 0x335c <main+0xc8>
    335c:	00 00       	nop
			messung=0;	
    335e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <messung>
			if(TEMP_READY_CHECK)
    3362:	88 e0       	ldi	r24, 0x08	; 8
    3364:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    3368:	85 ff       	sbrs	r24, 5
    336a:	0b c0       	rjmp	.+22     	; 0x3382 <main+0xee>
				Temperature=DPS310_get_temp(temp_ovs);
    336c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <temp_ovs>
    3370:	0e 94 12 09 	call	0x1224	; 0x1224 <DPS310_get_temp>
    3374:	cb 01       	movw	r24, r22
    3376:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <Temperature+0x1>
    337a:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <Temperature>
				graph(Temperature);
    337e:	0e 94 4c 03 	call	0x698	; 0x698 <graph>
			if(PRES_READY_CHECK)
    3382:	88 e0       	ldi	r24, 0x08	; 8
    3384:	0e 94 c2 06 	call	0xd84	; 0xd84 <DPS310_read>
    3388:	84 ff       	sbrs	r24, 4
    338a:	21 c0       	rjmp	.+66     	; 0x33ce <main+0x13a>
				Pressure=DPS310_get_pres(temp_ovs, pres_ovs);
    338c:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <pres_ovs>
    3390:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <temp_ovs>
    3394:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <DPS310_get_pres>
    3398:	69 83       	std	Y+1, r22	; 0x01
    339a:	7a 83       	std	Y+2, r23	; 0x02
    339c:	8b 83       	std	Y+3, r24	; 0x03
    339e:	9c 83       	std	Y+4, r25	; 0x04
    33a0:	69 81       	ldd	r22, Y+1	; 0x01
    33a2:	7a 81       	ldd	r23, Y+2	; 0x02
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	9c 81       	ldd	r25, Y+4	; 0x04
    33a8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fixsfsi>
    33ac:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <Pressure>
    33b0:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <Pressure+0x1>
    33b4:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <Pressure+0x2>
    33b8:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <Pressure+0x3>
				tt++;
    33bc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <tt>
    33c0:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <tt+0x1>
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <tt+0x1>
    33ca:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <tt>
ili9341_settextsize(2);
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <ili9341_settextsize>
		if(1)
    33d4:	c4 cf       	rjmp	.-120    	; 0x335e <main+0xca>

000033d6 <__subsf3>:
    33d6:	50 58       	subi	r21, 0x80	; 128

000033d8 <__addsf3>:
    33d8:	bb 27       	eor	r27, r27
    33da:	aa 27       	eor	r26, r26
    33dc:	0e 94 03 1a 	call	0x3406	; 0x3406 <__addsf3x>
    33e0:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__fp_round>
    33e4:	0e 94 46 1b 	call	0x368c	; 0x368c <__fp_pscA>
    33e8:	38 f0       	brcs	.+14     	; 0x33f8 <__addsf3+0x20>
    33ea:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fp_pscB>
    33ee:	20 f0       	brcs	.+8      	; 0x33f8 <__addsf3+0x20>
    33f0:	39 f4       	brne	.+14     	; 0x3400 <__addsf3+0x28>
    33f2:	9f 3f       	cpi	r25, 0xFF	; 255
    33f4:	19 f4       	brne	.+6      	; 0x33fc <__addsf3+0x24>
    33f6:	26 f4       	brtc	.+8      	; 0x3400 <__addsf3+0x28>
    33f8:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>
    33fc:	0e f4       	brtc	.+2      	; 0x3400 <__addsf3+0x28>
    33fe:	e0 95       	com	r30
    3400:	e7 fb       	bst	r30, 7
    3402:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>

00003406 <__addsf3x>:
    3406:	e9 2f       	mov	r30, r25
    3408:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_split3>
    340c:	58 f3       	brcs	.-42     	; 0x33e4 <__addsf3+0xc>
    340e:	ba 17       	cp	r27, r26
    3410:	62 07       	cpc	r22, r18
    3412:	73 07       	cpc	r23, r19
    3414:	84 07       	cpc	r24, r20
    3416:	95 07       	cpc	r25, r21
    3418:	20 f0       	brcs	.+8      	; 0x3422 <__addsf3x+0x1c>
    341a:	79 f4       	brne	.+30     	; 0x343a <__addsf3x+0x34>
    341c:	a6 f5       	brtc	.+104    	; 0x3486 <__addsf3x+0x80>
    341e:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__fp_zero>
    3422:	0e f4       	brtc	.+2      	; 0x3426 <__addsf3x+0x20>
    3424:	e0 95       	com	r30
    3426:	0b 2e       	mov	r0, r27
    3428:	ba 2f       	mov	r27, r26
    342a:	a0 2d       	mov	r26, r0
    342c:	0b 01       	movw	r0, r22
    342e:	b9 01       	movw	r22, r18
    3430:	90 01       	movw	r18, r0
    3432:	0c 01       	movw	r0, r24
    3434:	ca 01       	movw	r24, r20
    3436:	a0 01       	movw	r20, r0
    3438:	11 24       	eor	r1, r1
    343a:	ff 27       	eor	r31, r31
    343c:	59 1b       	sub	r21, r25
    343e:	99 f0       	breq	.+38     	; 0x3466 <__addsf3x+0x60>
    3440:	59 3f       	cpi	r21, 0xF9	; 249
    3442:	50 f4       	brcc	.+20     	; 0x3458 <__addsf3x+0x52>
    3444:	50 3e       	cpi	r21, 0xE0	; 224
    3446:	68 f1       	brcs	.+90     	; 0x34a2 <__addsf3x+0x9c>
    3448:	1a 16       	cp	r1, r26
    344a:	f0 40       	sbci	r31, 0x00	; 0
    344c:	a2 2f       	mov	r26, r18
    344e:	23 2f       	mov	r18, r19
    3450:	34 2f       	mov	r19, r20
    3452:	44 27       	eor	r20, r20
    3454:	58 5f       	subi	r21, 0xF8	; 248
    3456:	f3 cf       	rjmp	.-26     	; 0x343e <__addsf3x+0x38>
    3458:	46 95       	lsr	r20
    345a:	37 95       	ror	r19
    345c:	27 95       	ror	r18
    345e:	a7 95       	ror	r26
    3460:	f0 40       	sbci	r31, 0x00	; 0
    3462:	53 95       	inc	r21
    3464:	c9 f7       	brne	.-14     	; 0x3458 <__addsf3x+0x52>
    3466:	7e f4       	brtc	.+30     	; 0x3486 <__addsf3x+0x80>
    3468:	1f 16       	cp	r1, r31
    346a:	ba 0b       	sbc	r27, r26
    346c:	62 0b       	sbc	r22, r18
    346e:	73 0b       	sbc	r23, r19
    3470:	84 0b       	sbc	r24, r20
    3472:	ba f0       	brmi	.+46     	; 0x34a2 <__addsf3x+0x9c>
    3474:	91 50       	subi	r25, 0x01	; 1
    3476:	a1 f0       	breq	.+40     	; 0x34a0 <__addsf3x+0x9a>
    3478:	ff 0f       	add	r31, r31
    347a:	bb 1f       	adc	r27, r27
    347c:	66 1f       	adc	r22, r22
    347e:	77 1f       	adc	r23, r23
    3480:	88 1f       	adc	r24, r24
    3482:	c2 f7       	brpl	.-16     	; 0x3474 <__addsf3x+0x6e>
    3484:	0e c0       	rjmp	.+28     	; 0x34a2 <__addsf3x+0x9c>
    3486:	ba 0f       	add	r27, r26
    3488:	62 1f       	adc	r22, r18
    348a:	73 1f       	adc	r23, r19
    348c:	84 1f       	adc	r24, r20
    348e:	48 f4       	brcc	.+18     	; 0x34a2 <__addsf3x+0x9c>
    3490:	87 95       	ror	r24
    3492:	77 95       	ror	r23
    3494:	67 95       	ror	r22
    3496:	b7 95       	ror	r27
    3498:	f7 95       	ror	r31
    349a:	9e 3f       	cpi	r25, 0xFE	; 254
    349c:	08 f0       	brcs	.+2      	; 0x34a0 <__addsf3x+0x9a>
    349e:	b0 cf       	rjmp	.-160    	; 0x3400 <__addsf3+0x28>
    34a0:	93 95       	inc	r25
    34a2:	88 0f       	add	r24, r24
    34a4:	08 f0       	brcs	.+2      	; 0x34a8 <__addsf3x+0xa2>
    34a6:	99 27       	eor	r25, r25
    34a8:	ee 0f       	add	r30, r30
    34aa:	97 95       	ror	r25
    34ac:	87 95       	ror	r24
    34ae:	08 95       	ret

000034b0 <__divsf3>:
    34b0:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__divsf3x>
    34b4:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__fp_round>
    34b8:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fp_pscB>
    34bc:	58 f0       	brcs	.+22     	; 0x34d4 <__divsf3+0x24>
    34be:	0e 94 46 1b 	call	0x368c	; 0x368c <__fp_pscA>
    34c2:	40 f0       	brcs	.+16     	; 0x34d4 <__divsf3+0x24>
    34c4:	29 f4       	brne	.+10     	; 0x34d0 <__divsf3+0x20>
    34c6:	5f 3f       	cpi	r21, 0xFF	; 255
    34c8:	29 f0       	breq	.+10     	; 0x34d4 <__divsf3+0x24>
    34ca:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    34ce:	51 11       	cpse	r21, r1
    34d0:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>
    34d4:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>

000034d8 <__divsf3x>:
    34d8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_split3>
    34dc:	68 f3       	brcs	.-38     	; 0x34b8 <__divsf3+0x8>

000034de <__divsf3_pse>:
    34de:	99 23       	and	r25, r25
    34e0:	b1 f3       	breq	.-20     	; 0x34ce <__divsf3+0x1e>
    34e2:	55 23       	and	r21, r21
    34e4:	91 f3       	breq	.-28     	; 0x34ca <__divsf3+0x1a>
    34e6:	95 1b       	sub	r25, r21
    34e8:	55 0b       	sbc	r21, r21
    34ea:	bb 27       	eor	r27, r27
    34ec:	aa 27       	eor	r26, r26
    34ee:	62 17       	cp	r22, r18
    34f0:	73 07       	cpc	r23, r19
    34f2:	84 07       	cpc	r24, r20
    34f4:	38 f0       	brcs	.+14     	; 0x3504 <__divsf3_pse+0x26>
    34f6:	9f 5f       	subi	r25, 0xFF	; 255
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	44 1f       	adc	r20, r20
    3500:	aa 1f       	adc	r26, r26
    3502:	a9 f3       	breq	.-22     	; 0x34ee <__divsf3_pse+0x10>
    3504:	35 d0       	rcall	.+106    	; 0x3570 <__divsf3_pse+0x92>
    3506:	0e 2e       	mov	r0, r30
    3508:	3a f0       	brmi	.+14     	; 0x3518 <__divsf3_pse+0x3a>
    350a:	e0 e8       	ldi	r30, 0x80	; 128
    350c:	32 d0       	rcall	.+100    	; 0x3572 <__divsf3_pse+0x94>
    350e:	91 50       	subi	r25, 0x01	; 1
    3510:	50 40       	sbci	r21, 0x00	; 0
    3512:	e6 95       	lsr	r30
    3514:	00 1c       	adc	r0, r0
    3516:	ca f7       	brpl	.-14     	; 0x350a <__divsf3_pse+0x2c>
    3518:	2b d0       	rcall	.+86     	; 0x3570 <__divsf3_pse+0x92>
    351a:	fe 2f       	mov	r31, r30
    351c:	29 d0       	rcall	.+82     	; 0x3570 <__divsf3_pse+0x92>
    351e:	66 0f       	add	r22, r22
    3520:	77 1f       	adc	r23, r23
    3522:	88 1f       	adc	r24, r24
    3524:	bb 1f       	adc	r27, r27
    3526:	26 17       	cp	r18, r22
    3528:	37 07       	cpc	r19, r23
    352a:	48 07       	cpc	r20, r24
    352c:	ab 07       	cpc	r26, r27
    352e:	b0 e8       	ldi	r27, 0x80	; 128
    3530:	09 f0       	breq	.+2      	; 0x3534 <__divsf3_pse+0x56>
    3532:	bb 0b       	sbc	r27, r27
    3534:	80 2d       	mov	r24, r0
    3536:	bf 01       	movw	r22, r30
    3538:	ff 27       	eor	r31, r31
    353a:	93 58       	subi	r25, 0x83	; 131
    353c:	5f 4f       	sbci	r21, 0xFF	; 255
    353e:	3a f0       	brmi	.+14     	; 0x354e <__divsf3_pse+0x70>
    3540:	9e 3f       	cpi	r25, 0xFE	; 254
    3542:	51 05       	cpc	r21, r1
    3544:	78 f0       	brcs	.+30     	; 0x3564 <__divsf3_pse+0x86>
    3546:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    354a:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>
    354e:	5f 3f       	cpi	r21, 0xFF	; 255
    3550:	e4 f3       	brlt	.-8      	; 0x354a <__divsf3_pse+0x6c>
    3552:	98 3e       	cpi	r25, 0xE8	; 232
    3554:	d4 f3       	brlt	.-12     	; 0x354a <__divsf3_pse+0x6c>
    3556:	86 95       	lsr	r24
    3558:	77 95       	ror	r23
    355a:	67 95       	ror	r22
    355c:	b7 95       	ror	r27
    355e:	f7 95       	ror	r31
    3560:	9f 5f       	subi	r25, 0xFF	; 255
    3562:	c9 f7       	brne	.-14     	; 0x3556 <__divsf3_pse+0x78>
    3564:	88 0f       	add	r24, r24
    3566:	91 1d       	adc	r25, r1
    3568:	96 95       	lsr	r25
    356a:	87 95       	ror	r24
    356c:	97 f9       	bld	r25, 7
    356e:	08 95       	ret
    3570:	e1 e0       	ldi	r30, 0x01	; 1
    3572:	66 0f       	add	r22, r22
    3574:	77 1f       	adc	r23, r23
    3576:	88 1f       	adc	r24, r24
    3578:	bb 1f       	adc	r27, r27
    357a:	62 17       	cp	r22, r18
    357c:	73 07       	cpc	r23, r19
    357e:	84 07       	cpc	r24, r20
    3580:	ba 07       	cpc	r27, r26
    3582:	20 f0       	brcs	.+8      	; 0x358c <__divsf3_pse+0xae>
    3584:	62 1b       	sub	r22, r18
    3586:	73 0b       	sbc	r23, r19
    3588:	84 0b       	sbc	r24, r20
    358a:	ba 0b       	sbc	r27, r26
    358c:	ee 1f       	adc	r30, r30
    358e:	88 f7       	brcc	.-30     	; 0x3572 <__divsf3_pse+0x94>
    3590:	e0 95       	com	r30
    3592:	08 95       	ret

00003594 <__fixsfsi>:
    3594:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fixunssfsi>
    3598:	68 94       	set
    359a:	b1 11       	cpse	r27, r1
    359c:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>
    35a0:	08 95       	ret

000035a2 <__fixunssfsi>:
    35a2:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fp_splitA>
    35a6:	88 f0       	brcs	.+34     	; 0x35ca <__fixunssfsi+0x28>
    35a8:	9f 57       	subi	r25, 0x7F	; 127
    35aa:	98 f0       	brcs	.+38     	; 0x35d2 <__fixunssfsi+0x30>
    35ac:	b9 2f       	mov	r27, r25
    35ae:	99 27       	eor	r25, r25
    35b0:	b7 51       	subi	r27, 0x17	; 23
    35b2:	b0 f0       	brcs	.+44     	; 0x35e0 <__fixunssfsi+0x3e>
    35b4:	e1 f0       	breq	.+56     	; 0x35ee <__fixunssfsi+0x4c>
    35b6:	66 0f       	add	r22, r22
    35b8:	77 1f       	adc	r23, r23
    35ba:	88 1f       	adc	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	1a f0       	brmi	.+6      	; 0x35c6 <__fixunssfsi+0x24>
    35c0:	ba 95       	dec	r27
    35c2:	c9 f7       	brne	.-14     	; 0x35b6 <__fixunssfsi+0x14>
    35c4:	14 c0       	rjmp	.+40     	; 0x35ee <__fixunssfsi+0x4c>
    35c6:	b1 30       	cpi	r27, 0x01	; 1
    35c8:	91 f0       	breq	.+36     	; 0x35ee <__fixunssfsi+0x4c>
    35ca:	0e 94 87 1b 	call	0x370e	; 0x370e <__fp_zero>
    35ce:	b1 e0       	ldi	r27, 0x01	; 1
    35d0:	08 95       	ret
    35d2:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__fp_zero>
    35d6:	67 2f       	mov	r22, r23
    35d8:	78 2f       	mov	r23, r24
    35da:	88 27       	eor	r24, r24
    35dc:	b8 5f       	subi	r27, 0xF8	; 248
    35de:	39 f0       	breq	.+14     	; 0x35ee <__fixunssfsi+0x4c>
    35e0:	b9 3f       	cpi	r27, 0xF9	; 249
    35e2:	cc f3       	brlt	.-14     	; 0x35d6 <__fixunssfsi+0x34>
    35e4:	86 95       	lsr	r24
    35e6:	77 95       	ror	r23
    35e8:	67 95       	ror	r22
    35ea:	b3 95       	inc	r27
    35ec:	d9 f7       	brne	.-10     	; 0x35e4 <__fixunssfsi+0x42>
    35ee:	3e f4       	brtc	.+14     	; 0x35fe <__fixunssfsi+0x5c>
    35f0:	90 95       	com	r25
    35f2:	80 95       	com	r24
    35f4:	70 95       	com	r23
    35f6:	61 95       	neg	r22
    35f8:	7f 4f       	sbci	r23, 0xFF	; 255
    35fa:	8f 4f       	sbci	r24, 0xFF	; 255
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	08 95       	ret

00003600 <__floatunsisf>:
    3600:	e8 94       	clt
    3602:	09 c0       	rjmp	.+18     	; 0x3616 <__floatsisf+0x12>

00003604 <__floatsisf>:
    3604:	97 fb       	bst	r25, 7
    3606:	3e f4       	brtc	.+14     	; 0x3616 <__floatsisf+0x12>
    3608:	90 95       	com	r25
    360a:	80 95       	com	r24
    360c:	70 95       	com	r23
    360e:	61 95       	neg	r22
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	8f 4f       	sbci	r24, 0xFF	; 255
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	99 23       	and	r25, r25
    3618:	a9 f0       	breq	.+42     	; 0x3644 <__floatsisf+0x40>
    361a:	f9 2f       	mov	r31, r25
    361c:	96 e9       	ldi	r25, 0x96	; 150
    361e:	bb 27       	eor	r27, r27
    3620:	93 95       	inc	r25
    3622:	f6 95       	lsr	r31
    3624:	87 95       	ror	r24
    3626:	77 95       	ror	r23
    3628:	67 95       	ror	r22
    362a:	b7 95       	ror	r27
    362c:	f1 11       	cpse	r31, r1
    362e:	f8 cf       	rjmp	.-16     	; 0x3620 <__floatsisf+0x1c>
    3630:	fa f4       	brpl	.+62     	; 0x3670 <__floatsisf+0x6c>
    3632:	bb 0f       	add	r27, r27
    3634:	11 f4       	brne	.+4      	; 0x363a <__floatsisf+0x36>
    3636:	60 ff       	sbrs	r22, 0
    3638:	1b c0       	rjmp	.+54     	; 0x3670 <__floatsisf+0x6c>
    363a:	6f 5f       	subi	r22, 0xFF	; 255
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
    363e:	8f 4f       	sbci	r24, 0xFF	; 255
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	16 c0       	rjmp	.+44     	; 0x3670 <__floatsisf+0x6c>
    3644:	88 23       	and	r24, r24
    3646:	11 f0       	breq	.+4      	; 0x364c <__floatsisf+0x48>
    3648:	96 e9       	ldi	r25, 0x96	; 150
    364a:	11 c0       	rjmp	.+34     	; 0x366e <__floatsisf+0x6a>
    364c:	77 23       	and	r23, r23
    364e:	21 f0       	breq	.+8      	; 0x3658 <__floatsisf+0x54>
    3650:	9e e8       	ldi	r25, 0x8E	; 142
    3652:	87 2f       	mov	r24, r23
    3654:	76 2f       	mov	r23, r22
    3656:	05 c0       	rjmp	.+10     	; 0x3662 <__floatsisf+0x5e>
    3658:	66 23       	and	r22, r22
    365a:	71 f0       	breq	.+28     	; 0x3678 <__floatsisf+0x74>
    365c:	96 e8       	ldi	r25, 0x86	; 134
    365e:	86 2f       	mov	r24, r22
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	2a f0       	brmi	.+10     	; 0x3670 <__floatsisf+0x6c>
    3666:	9a 95       	dec	r25
    3668:	66 0f       	add	r22, r22
    366a:	77 1f       	adc	r23, r23
    366c:	88 1f       	adc	r24, r24
    366e:	da f7       	brpl	.-10     	; 0x3666 <__floatsisf+0x62>
    3670:	88 0f       	add	r24, r24
    3672:	96 95       	lsr	r25
    3674:	87 95       	ror	r24
    3676:	97 f9       	bld	r25, 7
    3678:	08 95       	ret

0000367a <__fp_inf>:
    367a:	97 f9       	bld	r25, 7
    367c:	9f 67       	ori	r25, 0x7F	; 127
    367e:	80 e8       	ldi	r24, 0x80	; 128
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	08 95       	ret

00003686 <__fp_nan>:
    3686:	9f ef       	ldi	r25, 0xFF	; 255
    3688:	80 ec       	ldi	r24, 0xC0	; 192
    368a:	08 95       	ret

0000368c <__fp_pscA>:
    368c:	00 24       	eor	r0, r0
    368e:	0a 94       	dec	r0
    3690:	16 16       	cp	r1, r22
    3692:	17 06       	cpc	r1, r23
    3694:	18 06       	cpc	r1, r24
    3696:	09 06       	cpc	r0, r25
    3698:	08 95       	ret

0000369a <__fp_pscB>:
    369a:	00 24       	eor	r0, r0
    369c:	0a 94       	dec	r0
    369e:	12 16       	cp	r1, r18
    36a0:	13 06       	cpc	r1, r19
    36a2:	14 06       	cpc	r1, r20
    36a4:	05 06       	cpc	r0, r21
    36a6:	08 95       	ret

000036a8 <__fp_round>:
    36a8:	09 2e       	mov	r0, r25
    36aa:	03 94       	inc	r0
    36ac:	00 0c       	add	r0, r0
    36ae:	11 f4       	brne	.+4      	; 0x36b4 <__fp_round+0xc>
    36b0:	88 23       	and	r24, r24
    36b2:	52 f0       	brmi	.+20     	; 0x36c8 <__fp_round+0x20>
    36b4:	bb 0f       	add	r27, r27
    36b6:	40 f4       	brcc	.+16     	; 0x36c8 <__fp_round+0x20>
    36b8:	bf 2b       	or	r27, r31
    36ba:	11 f4       	brne	.+4      	; 0x36c0 <__fp_round+0x18>
    36bc:	60 ff       	sbrs	r22, 0
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <__fp_round+0x20>
    36c0:	6f 5f       	subi	r22, 0xFF	; 255
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255
    36c4:	8f 4f       	sbci	r24, 0xFF	; 255
    36c6:	9f 4f       	sbci	r25, 0xFF	; 255
    36c8:	08 95       	ret

000036ca <__fp_split3>:
    36ca:	57 fd       	sbrc	r21, 7
    36cc:	90 58       	subi	r25, 0x80	; 128
    36ce:	44 0f       	add	r20, r20
    36d0:	55 1f       	adc	r21, r21
    36d2:	59 f0       	breq	.+22     	; 0x36ea <__fp_splitA+0x10>
    36d4:	5f 3f       	cpi	r21, 0xFF	; 255
    36d6:	71 f0       	breq	.+28     	; 0x36f4 <__fp_splitA+0x1a>
    36d8:	47 95       	ror	r20

000036da <__fp_splitA>:
    36da:	88 0f       	add	r24, r24
    36dc:	97 fb       	bst	r25, 7
    36de:	99 1f       	adc	r25, r25
    36e0:	61 f0       	breq	.+24     	; 0x36fa <__fp_splitA+0x20>
    36e2:	9f 3f       	cpi	r25, 0xFF	; 255
    36e4:	79 f0       	breq	.+30     	; 0x3704 <__fp_splitA+0x2a>
    36e6:	87 95       	ror	r24
    36e8:	08 95       	ret
    36ea:	12 16       	cp	r1, r18
    36ec:	13 06       	cpc	r1, r19
    36ee:	14 06       	cpc	r1, r20
    36f0:	55 1f       	adc	r21, r21
    36f2:	f2 cf       	rjmp	.-28     	; 0x36d8 <__fp_split3+0xe>
    36f4:	46 95       	lsr	r20
    36f6:	f1 df       	rcall	.-30     	; 0x36da <__fp_splitA>
    36f8:	08 c0       	rjmp	.+16     	; 0x370a <__fp_splitA+0x30>
    36fa:	16 16       	cp	r1, r22
    36fc:	17 06       	cpc	r1, r23
    36fe:	18 06       	cpc	r1, r24
    3700:	99 1f       	adc	r25, r25
    3702:	f1 cf       	rjmp	.-30     	; 0x36e6 <__fp_splitA+0xc>
    3704:	86 95       	lsr	r24
    3706:	71 05       	cpc	r23, r1
    3708:	61 05       	cpc	r22, r1
    370a:	08 94       	sec
    370c:	08 95       	ret

0000370e <__fp_zero>:
    370e:	e8 94       	clt

00003710 <__fp_szero>:
    3710:	bb 27       	eor	r27, r27
    3712:	66 27       	eor	r22, r22
    3714:	77 27       	eor	r23, r23
    3716:	cb 01       	movw	r24, r22
    3718:	97 f9       	bld	r25, 7
    371a:	08 95       	ret

0000371c <__mulsf3>:
    371c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__mulsf3x>
    3720:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__fp_round>
    3724:	0e 94 46 1b 	call	0x368c	; 0x368c <__fp_pscA>
    3728:	38 f0       	brcs	.+14     	; 0x3738 <__mulsf3+0x1c>
    372a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fp_pscB>
    372e:	20 f0       	brcs	.+8      	; 0x3738 <__mulsf3+0x1c>
    3730:	95 23       	and	r25, r21
    3732:	11 f0       	breq	.+4      	; 0x3738 <__mulsf3+0x1c>
    3734:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    3738:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>
    373c:	11 24       	eor	r1, r1
    373e:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>

00003742 <__mulsf3x>:
    3742:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_split3>
    3746:	70 f3       	brcs	.-36     	; 0x3724 <__mulsf3+0x8>

00003748 <__mulsf3_pse>:
    3748:	95 9f       	mul	r25, r21
    374a:	c1 f3       	breq	.-16     	; 0x373c <__mulsf3+0x20>
    374c:	95 0f       	add	r25, r21
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	55 1f       	adc	r21, r21
    3752:	62 9f       	mul	r22, r18
    3754:	f0 01       	movw	r30, r0
    3756:	72 9f       	mul	r23, r18
    3758:	bb 27       	eor	r27, r27
    375a:	f0 0d       	add	r31, r0
    375c:	b1 1d       	adc	r27, r1
    375e:	63 9f       	mul	r22, r19
    3760:	aa 27       	eor	r26, r26
    3762:	f0 0d       	add	r31, r0
    3764:	b1 1d       	adc	r27, r1
    3766:	aa 1f       	adc	r26, r26
    3768:	64 9f       	mul	r22, r20
    376a:	66 27       	eor	r22, r22
    376c:	b0 0d       	add	r27, r0
    376e:	a1 1d       	adc	r26, r1
    3770:	66 1f       	adc	r22, r22
    3772:	82 9f       	mul	r24, r18
    3774:	22 27       	eor	r18, r18
    3776:	b0 0d       	add	r27, r0
    3778:	a1 1d       	adc	r26, r1
    377a:	62 1f       	adc	r22, r18
    377c:	73 9f       	mul	r23, r19
    377e:	b0 0d       	add	r27, r0
    3780:	a1 1d       	adc	r26, r1
    3782:	62 1f       	adc	r22, r18
    3784:	83 9f       	mul	r24, r19
    3786:	a0 0d       	add	r26, r0
    3788:	61 1d       	adc	r22, r1
    378a:	22 1f       	adc	r18, r18
    378c:	74 9f       	mul	r23, r20
    378e:	33 27       	eor	r19, r19
    3790:	a0 0d       	add	r26, r0
    3792:	61 1d       	adc	r22, r1
    3794:	23 1f       	adc	r18, r19
    3796:	84 9f       	mul	r24, r20
    3798:	60 0d       	add	r22, r0
    379a:	21 1d       	adc	r18, r1
    379c:	82 2f       	mov	r24, r18
    379e:	76 2f       	mov	r23, r22
    37a0:	6a 2f       	mov	r22, r26
    37a2:	11 24       	eor	r1, r1
    37a4:	9f 57       	subi	r25, 0x7F	; 127
    37a6:	50 40       	sbci	r21, 0x00	; 0
    37a8:	9a f0       	brmi	.+38     	; 0x37d0 <__mulsf3_pse+0x88>
    37aa:	f1 f0       	breq	.+60     	; 0x37e8 <__mulsf3_pse+0xa0>
    37ac:	88 23       	and	r24, r24
    37ae:	4a f0       	brmi	.+18     	; 0x37c2 <__mulsf3_pse+0x7a>
    37b0:	ee 0f       	add	r30, r30
    37b2:	ff 1f       	adc	r31, r31
    37b4:	bb 1f       	adc	r27, r27
    37b6:	66 1f       	adc	r22, r22
    37b8:	77 1f       	adc	r23, r23
    37ba:	88 1f       	adc	r24, r24
    37bc:	91 50       	subi	r25, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	a9 f7       	brne	.-22     	; 0x37ac <__mulsf3_pse+0x64>
    37c2:	9e 3f       	cpi	r25, 0xFE	; 254
    37c4:	51 05       	cpc	r21, r1
    37c6:	80 f0       	brcs	.+32     	; 0x37e8 <__mulsf3_pse+0xa0>
    37c8:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    37cc:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>
    37d0:	5f 3f       	cpi	r21, 0xFF	; 255
    37d2:	e4 f3       	brlt	.-8      	; 0x37cc <__mulsf3_pse+0x84>
    37d4:	98 3e       	cpi	r25, 0xE8	; 232
    37d6:	d4 f3       	brlt	.-12     	; 0x37cc <__mulsf3_pse+0x84>
    37d8:	86 95       	lsr	r24
    37da:	77 95       	ror	r23
    37dc:	67 95       	ror	r22
    37de:	b7 95       	ror	r27
    37e0:	f7 95       	ror	r31
    37e2:	e7 95       	ror	r30
    37e4:	9f 5f       	subi	r25, 0xFF	; 255
    37e6:	c1 f7       	brne	.-16     	; 0x37d8 <__mulsf3_pse+0x90>
    37e8:	fe 2b       	or	r31, r30
    37ea:	88 0f       	add	r24, r24
    37ec:	91 1d       	adc	r25, r1
    37ee:	96 95       	lsr	r25
    37f0:	87 95       	ror	r24
    37f2:	97 f9       	bld	r25, 7
    37f4:	08 95       	ret

000037f6 <pow>:
    37f6:	fa 01       	movw	r30, r20
    37f8:	ee 0f       	add	r30, r30
    37fa:	ff 1f       	adc	r31, r31
    37fc:	30 96       	adiw	r30, 0x00	; 0
    37fe:	21 05       	cpc	r18, r1
    3800:	31 05       	cpc	r19, r1
    3802:	a1 f1       	breq	.+104    	; 0x386c <pow+0x76>
    3804:	61 15       	cp	r22, r1
    3806:	71 05       	cpc	r23, r1
    3808:	61 f4       	brne	.+24     	; 0x3822 <pow+0x2c>
    380a:	80 38       	cpi	r24, 0x80	; 128
    380c:	bf e3       	ldi	r27, 0x3F	; 63
    380e:	9b 07       	cpc	r25, r27
    3810:	49 f1       	breq	.+82     	; 0x3864 <pow+0x6e>
    3812:	68 94       	set
    3814:	90 38       	cpi	r25, 0x80	; 128
    3816:	81 05       	cpc	r24, r1
    3818:	61 f0       	breq	.+24     	; 0x3832 <pow+0x3c>
    381a:	80 38       	cpi	r24, 0x80	; 128
    381c:	bf ef       	ldi	r27, 0xFF	; 255
    381e:	9b 07       	cpc	r25, r27
    3820:	41 f0       	breq	.+16     	; 0x3832 <pow+0x3c>
    3822:	99 23       	and	r25, r25
    3824:	4a f5       	brpl	.+82     	; 0x3878 <pow+0x82>
    3826:	ff 3f       	cpi	r31, 0xFF	; 255
    3828:	e1 05       	cpc	r30, r1
    382a:	31 05       	cpc	r19, r1
    382c:	21 05       	cpc	r18, r1
    382e:	19 f1       	breq	.+70     	; 0x3876 <pow+0x80>
    3830:	e8 94       	clt
    3832:	08 94       	sec
    3834:	e7 95       	ror	r30
    3836:	d9 01       	movw	r26, r18
    3838:	aa 23       	and	r26, r26
    383a:	29 f4       	brne	.+10     	; 0x3846 <pow+0x50>
    383c:	ab 2f       	mov	r26, r27
    383e:	be 2f       	mov	r27, r30
    3840:	f8 5f       	subi	r31, 0xF8	; 248
    3842:	d0 f3       	brcs	.-12     	; 0x3838 <pow+0x42>
    3844:	10 c0       	rjmp	.+32     	; 0x3866 <pow+0x70>
    3846:	ff 5f       	subi	r31, 0xFF	; 255
    3848:	70 f4       	brcc	.+28     	; 0x3866 <pow+0x70>
    384a:	a6 95       	lsr	r26
    384c:	e0 f7       	brcc	.-8      	; 0x3846 <pow+0x50>
    384e:	f7 39       	cpi	r31, 0x97	; 151
    3850:	50 f0       	brcs	.+20     	; 0x3866 <pow+0x70>
    3852:	19 f0       	breq	.+6      	; 0x385a <pow+0x64>
    3854:	ff 3a       	cpi	r31, 0xAF	; 175
    3856:	38 f4       	brcc	.+14     	; 0x3866 <pow+0x70>
    3858:	9f 77       	andi	r25, 0x7F	; 127
    385a:	9f 93       	push	r25
    385c:	0d d0       	rcall	.+26     	; 0x3878 <pow+0x82>
    385e:	0f 90       	pop	r0
    3860:	07 fc       	sbrc	r0, 7
    3862:	90 58       	subi	r25, 0x80	; 128
    3864:	08 95       	ret
    3866:	46 f0       	brts	.+16     	; 0x3878 <pow+0x82>
    3868:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	70 e0       	ldi	r23, 0x00	; 0
    3870:	80 e8       	ldi	r24, 0x80	; 128
    3872:	9f e3       	ldi	r25, 0x3F	; 63
    3874:	08 95       	ret
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	9f 77       	andi	r25, 0x7F	; 127
    387a:	5f 93       	push	r21
    387c:	4f 93       	push	r20
    387e:	3f 93       	push	r19
    3880:	2f 93       	push	r18
    3882:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <log>
    3886:	2f 91       	pop	r18
    3888:	3f 91       	pop	r19
    388a:	4f 91       	pop	r20
    388c:	5f 91       	pop	r21
    388e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulsf3>
    3892:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <exp>
    3896:	29 f4       	brne	.+10     	; 0x38a2 <pow+0xac>
    3898:	16 f0       	brts	.+4      	; 0x389e <pow+0xa8>
    389a:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    389e:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__fp_zero>
    38a2:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>

000038a6 <exp>:
    38a6:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fp_splitA>
    38aa:	a8 f3       	brcs	.-22     	; 0x3896 <pow+0xa0>
    38ac:	96 38       	cpi	r25, 0x86	; 134
    38ae:	a0 f7       	brcc	.-24     	; 0x3898 <pow+0xa2>
    38b0:	07 f8       	bld	r0, 7
    38b2:	0f 92       	push	r0
    38b4:	e8 94       	clt
    38b6:	2b e3       	ldi	r18, 0x3B	; 59
    38b8:	3a ea       	ldi	r19, 0xAA	; 170
    38ba:	48 eb       	ldi	r20, 0xB8	; 184
    38bc:	5f e7       	ldi	r21, 0x7F	; 127
    38be:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3_pse>
    38c2:	0f 92       	push	r0
    38c4:	0f 92       	push	r0
    38c6:	0f 92       	push	r0
    38c8:	4d b7       	in	r20, 0x3d	; 61
    38ca:	5e b7       	in	r21, 0x3e	; 62
    38cc:	0f 92       	push	r0
    38ce:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <modf>
    38d2:	e8 e6       	ldi	r30, 0x68	; 104
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	0e 94 85 1c 	call	0x390a	; 0x390a <__fp_powser>
    38da:	4f 91       	pop	r20
    38dc:	5f 91       	pop	r21
    38de:	ef 91       	pop	r30
    38e0:	ff 91       	pop	r31
    38e2:	e5 95       	asr	r30
    38e4:	ee 1f       	adc	r30, r30
    38e6:	ff 1f       	adc	r31, r31
    38e8:	49 f0       	breq	.+18     	; 0x38fc <exp+0x56>
    38ea:	fe 57       	subi	r31, 0x7E	; 126
    38ec:	e0 68       	ori	r30, 0x80	; 128
    38ee:	44 27       	eor	r20, r20
    38f0:	ee 0f       	add	r30, r30
    38f2:	44 1f       	adc	r20, r20
    38f4:	fa 95       	dec	r31
    38f6:	e1 f7       	brne	.-8      	; 0x38f0 <exp+0x4a>
    38f8:	41 95       	neg	r20
    38fa:	55 0b       	sbc	r21, r21
    38fc:	0e 94 b8 1c 	call	0x3970	; 0x3970 <ldexp>
    3900:	0f 90       	pop	r0
    3902:	07 fe       	sbrs	r0, 7
    3904:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <inverse>
    3908:	08 95       	ret

0000390a <__fp_powser>:
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	1f 93       	push	r17
    3910:	0f 93       	push	r16
    3912:	ff 92       	push	r15
    3914:	ef 92       	push	r14
    3916:	df 92       	push	r13
    3918:	7b 01       	movw	r14, r22
    391a:	8c 01       	movw	r16, r24
    391c:	68 94       	set
    391e:	06 c0       	rjmp	.+12     	; 0x392c <__fp_powser+0x22>
    3920:	da 2e       	mov	r13, r26
    3922:	ef 01       	movw	r28, r30
    3924:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__mulsf3x>
    3928:	fe 01       	movw	r30, r28
    392a:	e8 94       	clt
    392c:	a5 91       	lpm	r26, Z+
    392e:	25 91       	lpm	r18, Z+
    3930:	35 91       	lpm	r19, Z+
    3932:	45 91       	lpm	r20, Z+
    3934:	55 91       	lpm	r21, Z+
    3936:	a6 f3       	brts	.-24     	; 0x3920 <__fp_powser+0x16>
    3938:	ef 01       	movw	r28, r30
    393a:	0e 94 03 1a 	call	0x3406	; 0x3406 <__addsf3x>
    393e:	fe 01       	movw	r30, r28
    3940:	97 01       	movw	r18, r14
    3942:	a8 01       	movw	r20, r16
    3944:	da 94       	dec	r13
    3946:	69 f7       	brne	.-38     	; 0x3922 <__fp_powser+0x18>
    3948:	df 90       	pop	r13
    394a:	ef 90       	pop	r14
    394c:	ff 90       	pop	r15
    394e:	0f 91       	pop	r16
    3950:	1f 91       	pop	r17
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <inverse>:
    3958:	9b 01       	movw	r18, r22
    395a:	ac 01       	movw	r20, r24
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	80 e8       	ldi	r24, 0x80	; 128
    3962:	9f e3       	ldi	r25, 0x3F	; 63
    3964:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__divsf3>
    3968:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>
    396c:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_mpack>

00003970 <ldexp>:
    3970:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fp_splitA>
    3974:	d8 f3       	brcs	.-10     	; 0x396c <inverse+0x14>
    3976:	99 23       	and	r25, r25
    3978:	c9 f3       	breq	.-14     	; 0x396c <inverse+0x14>
    397a:	94 0f       	add	r25, r20
    397c:	51 1d       	adc	r21, r1
    397e:	a3 f3       	brvs	.-24     	; 0x3968 <inverse+0x10>
    3980:	91 50       	subi	r25, 0x01	; 1
    3982:	50 40       	sbci	r21, 0x00	; 0
    3984:	94 f0       	brlt	.+36     	; 0x39aa <ldexp+0x3a>
    3986:	59 f0       	breq	.+22     	; 0x399e <ldexp+0x2e>
    3988:	88 23       	and	r24, r24
    398a:	32 f0       	brmi	.+12     	; 0x3998 <ldexp+0x28>
    398c:	66 0f       	add	r22, r22
    398e:	77 1f       	adc	r23, r23
    3990:	88 1f       	adc	r24, r24
    3992:	91 50       	subi	r25, 0x01	; 1
    3994:	50 40       	sbci	r21, 0x00	; 0
    3996:	c1 f7       	brne	.-16     	; 0x3988 <ldexp+0x18>
    3998:	9e 3f       	cpi	r25, 0xFE	; 254
    399a:	51 05       	cpc	r21, r1
    399c:	2c f7       	brge	.-54     	; 0x3968 <inverse+0x10>
    399e:	88 0f       	add	r24, r24
    39a0:	91 1d       	adc	r25, r1
    39a2:	96 95       	lsr	r25
    39a4:	87 95       	ror	r24
    39a6:	97 f9       	bld	r25, 7
    39a8:	08 95       	ret
    39aa:	5f 3f       	cpi	r21, 0xFF	; 255
    39ac:	ac f0       	brlt	.+42     	; 0x39d8 <ldexp+0x68>
    39ae:	98 3e       	cpi	r25, 0xE8	; 232
    39b0:	9c f0       	brlt	.+38     	; 0x39d8 <ldexp+0x68>
    39b2:	bb 27       	eor	r27, r27
    39b4:	86 95       	lsr	r24
    39b6:	77 95       	ror	r23
    39b8:	67 95       	ror	r22
    39ba:	b7 95       	ror	r27
    39bc:	08 f4       	brcc	.+2      	; 0x39c0 <ldexp+0x50>
    39be:	b1 60       	ori	r27, 0x01	; 1
    39c0:	93 95       	inc	r25
    39c2:	c1 f7       	brne	.-16     	; 0x39b4 <ldexp+0x44>
    39c4:	bb 0f       	add	r27, r27
    39c6:	58 f7       	brcc	.-42     	; 0x399e <ldexp+0x2e>
    39c8:	11 f4       	brne	.+4      	; 0x39ce <ldexp+0x5e>
    39ca:	60 ff       	sbrs	r22, 0
    39cc:	e8 cf       	rjmp	.-48     	; 0x399e <ldexp+0x2e>
    39ce:	6f 5f       	subi	r22, 0xFF	; 255
    39d0:	7f 4f       	sbci	r23, 0xFF	; 255
    39d2:	8f 4f       	sbci	r24, 0xFF	; 255
    39d4:	9f 4f       	sbci	r25, 0xFF	; 255
    39d6:	e3 cf       	rjmp	.-58     	; 0x399e <ldexp+0x2e>
    39d8:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__fp_szero>
    39dc:	16 f0       	brts	.+4      	; 0x39e2 <ldexp+0x72>
    39de:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_mpack>
    39e2:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__fp_nan>
    39e6:	68 94       	set
    39e8:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__fp_inf>

000039ec <log>:
    39ec:	0e 94 6d 1b 	call	0x36da	; 0x36da <__fp_splitA>
    39f0:	a8 f3       	brcs	.-22     	; 0x39dc <ldexp+0x6c>
    39f2:	99 23       	and	r25, r25
    39f4:	c1 f3       	breq	.-16     	; 0x39e6 <ldexp+0x76>
    39f6:	ae f3       	brts	.-22     	; 0x39e2 <ldexp+0x72>
    39f8:	df 93       	push	r29
    39fa:	cf 93       	push	r28
    39fc:	1f 93       	push	r17
    39fe:	0f 93       	push	r16
    3a00:	ff 92       	push	r15
    3a02:	c9 2f       	mov	r28, r25
    3a04:	dd 27       	eor	r29, r29
    3a06:	88 23       	and	r24, r24
    3a08:	2a f0       	brmi	.+10     	; 0x3a14 <log+0x28>
    3a0a:	21 97       	sbiw	r28, 0x01	; 1
    3a0c:	66 0f       	add	r22, r22
    3a0e:	77 1f       	adc	r23, r23
    3a10:	88 1f       	adc	r24, r24
    3a12:	da f7       	brpl	.-10     	; 0x3a0a <log+0x1e>
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f eb       	ldi	r21, 0xBF	; 191
    3a1c:	9f e3       	ldi	r25, 0x3F	; 63
    3a1e:	88 39       	cpi	r24, 0x98	; 152
    3a20:	20 f0       	brcs	.+8      	; 0x3a2a <log+0x3e>
    3a22:	80 3e       	cpi	r24, 0xE0	; 224
    3a24:	38 f0       	brcs	.+14     	; 0x3a34 <log+0x48>
    3a26:	21 96       	adiw	r28, 0x01	; 1
    3a28:	8f 77       	andi	r24, 0x7F	; 127
    3a2a:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    3a2e:	e0 e9       	ldi	r30, 0x90	; 144
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	04 c0       	rjmp	.+8      	; 0x3a3c <log+0x50>
    3a34:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <__addsf3>
    3a38:	ed eb       	ldi	r30, 0xBD	; 189
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	0e 94 85 1c 	call	0x390a	; 0x390a <__fp_powser>
    3a40:	8b 01       	movw	r16, r22
    3a42:	be 01       	movw	r22, r28
    3a44:	ec 01       	movw	r28, r24
    3a46:	fb 2e       	mov	r15, r27
    3a48:	6f 57       	subi	r22, 0x7F	; 127
    3a4a:	71 09       	sbc	r23, r1
    3a4c:	75 95       	asr	r23
    3a4e:	77 1f       	adc	r23, r23
    3a50:	88 0b       	sbc	r24, r24
    3a52:	99 0b       	sbc	r25, r25
    3a54:	0e 94 02 1b 	call	0x3604	; 0x3604 <__floatsisf>
    3a58:	28 e1       	ldi	r18, 0x18	; 24
    3a5a:	32 e7       	ldi	r19, 0x72	; 114
    3a5c:	41 e3       	ldi	r20, 0x31	; 49
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__mulsf3x>
    3a64:	af 2d       	mov	r26, r15
    3a66:	98 01       	movw	r18, r16
    3a68:	ae 01       	movw	r20, r28
    3a6a:	ff 90       	pop	r15
    3a6c:	0f 91       	pop	r16
    3a6e:	1f 91       	pop	r17
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	0e 94 03 1a 	call	0x3406	; 0x3406 <__addsf3x>
    3a78:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__fp_round>

00003a7c <modf>:
    3a7c:	fa 01       	movw	r30, r20
    3a7e:	dc 01       	movw	r26, r24
    3a80:	aa 0f       	add	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	9b 01       	movw	r18, r22
    3a86:	ac 01       	movw	r20, r24
    3a88:	bf 57       	subi	r27, 0x7F	; 127
    3a8a:	28 f4       	brcc	.+10     	; 0x3a96 <modf+0x1a>
    3a8c:	22 27       	eor	r18, r18
    3a8e:	33 27       	eor	r19, r19
    3a90:	44 27       	eor	r20, r20
    3a92:	50 78       	andi	r21, 0x80	; 128
    3a94:	20 c0       	rjmp	.+64     	; 0x3ad6 <modf+0x5a>
    3a96:	b7 51       	subi	r27, 0x17	; 23
    3a98:	90 f4       	brcc	.+36     	; 0x3abe <modf+0x42>
    3a9a:	ab 2f       	mov	r26, r27
    3a9c:	00 24       	eor	r0, r0
    3a9e:	46 95       	lsr	r20
    3aa0:	37 95       	ror	r19
    3aa2:	27 95       	ror	r18
    3aa4:	01 1c       	adc	r0, r1
    3aa6:	a3 95       	inc	r26
    3aa8:	d2 f3       	brmi	.-12     	; 0x3a9e <modf+0x22>
    3aaa:	00 20       	and	r0, r0
    3aac:	71 f0       	breq	.+28     	; 0x3aca <modf+0x4e>
    3aae:	22 0f       	add	r18, r18
    3ab0:	33 1f       	adc	r19, r19
    3ab2:	44 1f       	adc	r20, r20
    3ab4:	b3 95       	inc	r27
    3ab6:	da f3       	brmi	.-10     	; 0x3aae <modf+0x32>
    3ab8:	0e d0       	rcall	.+28     	; 0x3ad6 <modf+0x5a>
    3aba:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__subsf3>
    3abe:	61 30       	cpi	r22, 0x01	; 1
    3ac0:	71 05       	cpc	r23, r1
    3ac2:	a0 e8       	ldi	r26, 0x80	; 128
    3ac4:	8a 07       	cpc	r24, r26
    3ac6:	b9 46       	sbci	r27, 0x69	; 105
    3ac8:	30 f4       	brcc	.+12     	; 0x3ad6 <modf+0x5a>
    3aca:	9b 01       	movw	r18, r22
    3acc:	ac 01       	movw	r20, r24
    3ace:	66 27       	eor	r22, r22
    3ad0:	77 27       	eor	r23, r23
    3ad2:	88 27       	eor	r24, r24
    3ad4:	90 78       	andi	r25, 0x80	; 128
    3ad6:	30 96       	adiw	r30, 0x00	; 0
    3ad8:	21 f0       	breq	.+8      	; 0x3ae2 <modf+0x66>
    3ada:	20 83       	st	Z, r18
    3adc:	31 83       	std	Z+1, r19	; 0x01
    3ade:	42 83       	std	Z+2, r20	; 0x02
    3ae0:	53 83       	std	Z+3, r21	; 0x03
    3ae2:	08 95       	ret

00003ae4 <__fp_mpack>:
    3ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ae6:	31 f0       	breq	.+12     	; 0x3af4 <__fp_mpack_finite+0xc>

00003ae8 <__fp_mpack_finite>:
    3ae8:	91 50       	subi	r25, 0x01	; 1
    3aea:	20 f4       	brcc	.+8      	; 0x3af4 <__fp_mpack_finite+0xc>
    3aec:	87 95       	ror	r24
    3aee:	77 95       	ror	r23
    3af0:	67 95       	ror	r22
    3af2:	b7 95       	ror	r27
    3af4:	88 0f       	add	r24, r24
    3af6:	91 1d       	adc	r25, r1
    3af8:	96 95       	lsr	r25
    3afa:	87 95       	ror	r24
    3afc:	97 f9       	bld	r25, 7
    3afe:	08 95       	ret

00003b00 <__udivmodsi4>:
    3b00:	a1 e2       	ldi	r26, 0x21	; 33
    3b02:	1a 2e       	mov	r1, r26
    3b04:	aa 1b       	sub	r26, r26
    3b06:	bb 1b       	sub	r27, r27
    3b08:	fd 01       	movw	r30, r26
    3b0a:	0d c0       	rjmp	.+26     	; 0x3b26 <__udivmodsi4_ep>

00003b0c <__udivmodsi4_loop>:
    3b0c:	aa 1f       	adc	r26, r26
    3b0e:	bb 1f       	adc	r27, r27
    3b10:	ee 1f       	adc	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	a2 17       	cp	r26, r18
    3b16:	b3 07       	cpc	r27, r19
    3b18:	e4 07       	cpc	r30, r20
    3b1a:	f5 07       	cpc	r31, r21
    3b1c:	20 f0       	brcs	.+8      	; 0x3b26 <__udivmodsi4_ep>
    3b1e:	a2 1b       	sub	r26, r18
    3b20:	b3 0b       	sbc	r27, r19
    3b22:	e4 0b       	sbc	r30, r20
    3b24:	f5 0b       	sbc	r31, r21

00003b26 <__udivmodsi4_ep>:
    3b26:	66 1f       	adc	r22, r22
    3b28:	77 1f       	adc	r23, r23
    3b2a:	88 1f       	adc	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	1a 94       	dec	r1
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <__udivmodsi4_loop>
    3b32:	60 95       	com	r22
    3b34:	70 95       	com	r23
    3b36:	80 95       	com	r24
    3b38:	90 95       	com	r25
    3b3a:	9b 01       	movw	r18, r22
    3b3c:	ac 01       	movw	r20, r24
    3b3e:	bd 01       	movw	r22, r26
    3b40:	cf 01       	movw	r24, r30
    3b42:	08 95       	ret

00003b44 <__itoa_ncheck>:
    3b44:	bb 27       	eor	r27, r27
    3b46:	4a 30       	cpi	r20, 0x0A	; 10
    3b48:	31 f4       	brne	.+12     	; 0x3b56 <__itoa_ncheck+0x12>
    3b4a:	99 23       	and	r25, r25
    3b4c:	22 f4       	brpl	.+8      	; 0x3b56 <__itoa_ncheck+0x12>
    3b4e:	bd e2       	ldi	r27, 0x2D	; 45
    3b50:	90 95       	com	r25
    3b52:	81 95       	neg	r24
    3b54:	9f 4f       	sbci	r25, 0xFF	; 255
    3b56:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__utoa_common>

00003b5a <__utoa_ncheck>:
    3b5a:	bb 27       	eor	r27, r27

00003b5c <__utoa_common>:
    3b5c:	fb 01       	movw	r30, r22
    3b5e:	55 27       	eor	r21, r21
    3b60:	aa 27       	eor	r26, r26
    3b62:	88 0f       	add	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	aa 1f       	adc	r26, r26
    3b68:	a4 17       	cp	r26, r20
    3b6a:	10 f0       	brcs	.+4      	; 0x3b70 <__utoa_common+0x14>
    3b6c:	a4 1b       	sub	r26, r20
    3b6e:	83 95       	inc	r24
    3b70:	50 51       	subi	r21, 0x10	; 16
    3b72:	b9 f7       	brne	.-18     	; 0x3b62 <__utoa_common+0x6>
    3b74:	a0 5d       	subi	r26, 0xD0	; 208
    3b76:	aa 33       	cpi	r26, 0x3A	; 58
    3b78:	08 f0       	brcs	.+2      	; 0x3b7c <__utoa_common+0x20>
    3b7a:	a9 5d       	subi	r26, 0xD9	; 217
    3b7c:	a1 93       	st	Z+, r26
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	79 f7       	brne	.-34     	; 0x3b60 <__utoa_common+0x4>
    3b82:	b1 11       	cpse	r27, r1
    3b84:	b1 93       	st	Z+, r27
    3b86:	11 92       	st	Z+, r1
    3b88:	cb 01       	movw	r24, r22
    3b8a:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <strrev>

00003b8e <printf>:
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	a0 e0       	ldi	r26, 0x00	; 0
    3b92:	ed ec       	ldi	r30, 0xCD	; 205
    3b94:	fd e1       	ldi	r31, 0x1D	; 29
    3b96:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__prologue_saves__+0x20>
    3b9a:	ae 01       	movw	r20, r28
    3b9c:	4b 5f       	subi	r20, 0xFB	; 251
    3b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba0:	fa 01       	movw	r30, r20
    3ba2:	61 91       	ld	r22, Z+
    3ba4:	71 91       	ld	r23, Z+
    3ba6:	af 01       	movw	r20, r30
    3ba8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__iob+0x2>
    3bac:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__iob+0x3>
    3bb0:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <vfprintf>
    3bb4:	e2 e0       	ldi	r30, 0x02	; 2
    3bb6:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__epilogue_restores__+0x20>

00003bba <puts>:
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__iob+0x2>
    3bc6:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__iob+0x3>
    3bca:	23 81       	ldd	r18, Z+3	; 0x03
    3bcc:	10 e0       	ldi	r17, 0x00	; 0
    3bce:	00 e0       	ldi	r16, 0x00	; 0
    3bd0:	21 fd       	sbrc	r18, 1
    3bd2:	0e c0       	rjmp	.+28     	; 0x3bf0 <puts+0x36>
    3bd4:	0f ef       	ldi	r16, 0xFF	; 255
    3bd6:	1f ef       	ldi	r17, 0xFF	; 255
    3bd8:	c8 01       	movw	r24, r16
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	08 95       	ret
    3be4:	09 95       	icall
    3be6:	89 2b       	or	r24, r25
    3be8:	11 f0       	breq	.+4      	; 0x3bee <puts+0x34>
    3bea:	0f ef       	ldi	r16, 0xFF	; 255
    3bec:	1f ef       	ldi	r17, 0xFF	; 255
    3bee:	ce 01       	movw	r24, r28
    3bf0:	ec 01       	movw	r28, r24
    3bf2:	89 91       	ld	r24, Y+
    3bf4:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__iob+0x2>
    3bf8:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__iob+0x3>
    3bfc:	db 01       	movw	r26, r22
    3bfe:	18 96       	adiw	r26, 0x08	; 8
    3c00:	ed 91       	ld	r30, X+
    3c02:	fc 91       	ld	r31, X
    3c04:	81 11       	cpse	r24, r1
    3c06:	ee cf       	rjmp	.-36     	; 0x3be4 <puts+0x2a>
    3c08:	8a e0       	ldi	r24, 0x0A	; 10
    3c0a:	09 95       	icall
    3c0c:	89 2b       	or	r24, r25
    3c0e:	21 f3       	breq	.-56     	; 0x3bd8 <puts+0x1e>
    3c10:	e1 cf       	rjmp	.-62     	; 0x3bd4 <puts+0x1a>

00003c12 <vfprintf>:
    3c12:	ab e0       	ldi	r26, 0x0B	; 11
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	ef e0       	ldi	r30, 0x0F	; 15
    3c18:	fe e1       	ldi	r31, 0x1E	; 30
    3c1a:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__prologue_saves__>
    3c1e:	7c 01       	movw	r14, r24
    3c20:	3b 01       	movw	r6, r22
    3c22:	8a 01       	movw	r16, r20
    3c24:	fc 01       	movw	r30, r24
    3c26:	17 82       	std	Z+7, r1	; 0x07
    3c28:	16 82       	std	Z+6, r1	; 0x06
    3c2a:	83 81       	ldd	r24, Z+3	; 0x03
    3c2c:	81 ff       	sbrs	r24, 1
    3c2e:	b9 c1       	rjmp	.+882    	; 0x3fa2 <vfprintf+0x390>
    3c30:	9a e0       	ldi	r25, 0x0A	; 10
    3c32:	29 2e       	mov	r2, r25
    3c34:	ce 01       	movw	r24, r28
    3c36:	01 96       	adiw	r24, 0x01	; 1
    3c38:	5c 01       	movw	r10, r24
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	f3 01       	movw	r30, r6
    3c40:	93 fd       	sbrc	r25, 3
    3c42:	85 91       	lpm	r24, Z+
    3c44:	93 ff       	sbrs	r25, 3
    3c46:	81 91       	ld	r24, Z+
    3c48:	3f 01       	movw	r6, r30
    3c4a:	88 23       	and	r24, r24
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <vfprintf+0x3e>
    3c4e:	46 c1       	rjmp	.+652    	; 0x3edc <vfprintf+0x2ca>
    3c50:	85 32       	cpi	r24, 0x25	; 37
    3c52:	39 f4       	brne	.+14     	; 0x3c62 <vfprintf+0x50>
    3c54:	93 fd       	sbrc	r25, 3
    3c56:	85 91       	lpm	r24, Z+
    3c58:	93 ff       	sbrs	r25, 3
    3c5a:	81 91       	ld	r24, Z+
    3c5c:	3f 01       	movw	r6, r30
    3c5e:	85 32       	cpi	r24, 0x25	; 37
    3c60:	29 f4       	brne	.+10     	; 0x3c6c <vfprintf+0x5a>
    3c62:	b7 01       	movw	r22, r14
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3c6a:	e7 cf       	rjmp	.-50     	; 0x3c3a <vfprintf+0x28>
    3c6c:	91 2c       	mov	r9, r1
    3c6e:	41 2c       	mov	r4, r1
    3c70:	51 2c       	mov	r5, r1
    3c72:	ff e1       	ldi	r31, 0x1F	; 31
    3c74:	f5 15       	cp	r31, r5
    3c76:	38 f0       	brcs	.+14     	; 0x3c86 <vfprintf+0x74>
    3c78:	8b 32       	cpi	r24, 0x2B	; 43
    3c7a:	09 f1       	breq	.+66     	; 0x3cbe <vfprintf+0xac>
    3c7c:	88 f4       	brcc	.+34     	; 0x3ca0 <vfprintf+0x8e>
    3c7e:	80 32       	cpi	r24, 0x20	; 32
    3c80:	01 f1       	breq	.+64     	; 0x3cc2 <vfprintf+0xb0>
    3c82:	83 32       	cpi	r24, 0x23	; 35
    3c84:	21 f1       	breq	.+72     	; 0x3cce <vfprintf+0xbc>
    3c86:	57 fc       	sbrc	r5, 7
    3c88:	3a c0       	rjmp	.+116    	; 0x3cfe <vfprintf+0xec>
    3c8a:	20 ed       	ldi	r18, 0xD0	; 208
    3c8c:	28 0f       	add	r18, r24
    3c8e:	2a 30       	cpi	r18, 0x0A	; 10
    3c90:	40 f5       	brcc	.+80     	; 0x3ce2 <vfprintf+0xd0>
    3c92:	56 fe       	sbrs	r5, 6
    3c94:	1f c0       	rjmp	.+62     	; 0x3cd4 <vfprintf+0xc2>
    3c96:	92 9c       	mul	r9, r2
    3c98:	20 0d       	add	r18, r0
    3c9a:	11 24       	eor	r1, r1
    3c9c:	92 2e       	mov	r9, r18
    3c9e:	06 c0       	rjmp	.+12     	; 0x3cac <vfprintf+0x9a>
    3ca0:	8d 32       	cpi	r24, 0x2D	; 45
    3ca2:	91 f0       	breq	.+36     	; 0x3cc8 <vfprintf+0xb6>
    3ca4:	80 33       	cpi	r24, 0x30	; 48
    3ca6:	79 f7       	brne	.-34     	; 0x3c86 <vfprintf+0x74>
    3ca8:	68 94       	set
    3caa:	50 f8       	bld	r5, 0
    3cac:	f3 01       	movw	r30, r6
    3cae:	93 fd       	sbrc	r25, 3
    3cb0:	85 91       	lpm	r24, Z+
    3cb2:	93 ff       	sbrs	r25, 3
    3cb4:	81 91       	ld	r24, Z+
    3cb6:	3f 01       	movw	r6, r30
    3cb8:	81 11       	cpse	r24, r1
    3cba:	db cf       	rjmp	.-74     	; 0x3c72 <vfprintf+0x60>
    3cbc:	20 c0       	rjmp	.+64     	; 0x3cfe <vfprintf+0xec>
    3cbe:	68 94       	set
    3cc0:	51 f8       	bld	r5, 1
    3cc2:	68 94       	set
    3cc4:	52 f8       	bld	r5, 2
    3cc6:	f2 cf       	rjmp	.-28     	; 0x3cac <vfprintf+0x9a>
    3cc8:	68 94       	set
    3cca:	53 f8       	bld	r5, 3
    3ccc:	ef cf       	rjmp	.-34     	; 0x3cac <vfprintf+0x9a>
    3cce:	68 94       	set
    3cd0:	54 f8       	bld	r5, 4
    3cd2:	ec cf       	rjmp	.-40     	; 0x3cac <vfprintf+0x9a>
    3cd4:	42 9c       	mul	r4, r2
    3cd6:	20 0d       	add	r18, r0
    3cd8:	11 24       	eor	r1, r1
    3cda:	42 2e       	mov	r4, r18
    3cdc:	68 94       	set
    3cde:	55 f8       	bld	r5, 5
    3ce0:	e5 cf       	rjmp	.-54     	; 0x3cac <vfprintf+0x9a>
    3ce2:	8e 32       	cpi	r24, 0x2E	; 46
    3ce4:	29 f4       	brne	.+10     	; 0x3cf0 <vfprintf+0xde>
    3ce6:	56 fc       	sbrc	r5, 6
    3ce8:	f9 c0       	rjmp	.+498    	; 0x3edc <vfprintf+0x2ca>
    3cea:	68 94       	set
    3cec:	56 f8       	bld	r5, 6
    3cee:	de cf       	rjmp	.-68     	; 0x3cac <vfprintf+0x9a>
    3cf0:	8c 36       	cpi	r24, 0x6C	; 108
    3cf2:	19 f4       	brne	.+6      	; 0x3cfa <vfprintf+0xe8>
    3cf4:	68 94       	set
    3cf6:	57 f8       	bld	r5, 7
    3cf8:	d9 cf       	rjmp	.-78     	; 0x3cac <vfprintf+0x9a>
    3cfa:	88 36       	cpi	r24, 0x68	; 104
    3cfc:	b9 f2       	breq	.-82     	; 0x3cac <vfprintf+0x9a>
    3cfe:	98 2f       	mov	r25, r24
    3d00:	9f 7d       	andi	r25, 0xDF	; 223
    3d02:	95 54       	subi	r25, 0x45	; 69
    3d04:	93 30       	cpi	r25, 0x03	; 3
    3d06:	c0 f0       	brcs	.+48     	; 0x3d38 <vfprintf+0x126>
    3d08:	83 36       	cpi	r24, 0x63	; 99
    3d0a:	a1 f1       	breq	.+104    	; 0x3d74 <vfprintf+0x162>
    3d0c:	83 37       	cpi	r24, 0x73	; 115
    3d0e:	c1 f1       	breq	.+112    	; 0x3d80 <vfprintf+0x16e>
    3d10:	83 35       	cpi	r24, 0x53	; 83
    3d12:	09 f0       	breq	.+2      	; 0x3d16 <vfprintf+0x104>
    3d14:	5b c0       	rjmp	.+182    	; 0x3dcc <vfprintf+0x1ba>
    3d16:	f8 01       	movw	r30, r16
    3d18:	c1 90       	ld	r12, Z+
    3d1a:	d1 90       	ld	r13, Z+
    3d1c:	8f 01       	movw	r16, r30
    3d1e:	69 2d       	mov	r22, r9
    3d20:	70 e0       	ldi	r23, 0x00	; 0
    3d22:	56 fc       	sbrc	r5, 6
    3d24:	02 c0       	rjmp	.+4      	; 0x3d2a <vfprintf+0x118>
    3d26:	6f ef       	ldi	r22, 0xFF	; 255
    3d28:	7f ef       	ldi	r23, 0xFF	; 255
    3d2a:	c6 01       	movw	r24, r12
    3d2c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <strnlen_P>
    3d30:	4c 01       	movw	r8, r24
    3d32:	68 94       	set
    3d34:	57 f8       	bld	r5, 7
    3d36:	0a c0       	rjmp	.+20     	; 0x3d4c <vfprintf+0x13a>
    3d38:	0c 5f       	subi	r16, 0xFC	; 252
    3d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3c:	2f e3       	ldi	r18, 0x3F	; 63
    3d3e:	29 83       	std	Y+1, r18	; 0x01
    3d40:	88 24       	eor	r8, r8
    3d42:	83 94       	inc	r8
    3d44:	91 2c       	mov	r9, r1
    3d46:	65 01       	movw	r12, r10
    3d48:	e8 94       	clt
    3d4a:	57 f8       	bld	r5, 7
    3d4c:	53 fc       	sbrc	r5, 3
    3d4e:	04 c0       	rjmp	.+8      	; 0x3d58 <vfprintf+0x146>
    3d50:	48 14       	cp	r4, r8
    3d52:	19 04       	cpc	r1, r9
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <vfprintf+0x146>
    3d56:	18 f5       	brcc	.+70     	; 0x3d9e <vfprintf+0x18c>
    3d58:	34 2c       	mov	r3, r4
    3d5a:	81 14       	cp	r8, r1
    3d5c:	91 04       	cpc	r9, r1
    3d5e:	31 f5       	brne	.+76     	; 0x3dac <vfprintf+0x19a>
    3d60:	33 20       	and	r3, r3
    3d62:	09 f4       	brne	.+2      	; 0x3d66 <vfprintf+0x154>
    3d64:	6a cf       	rjmp	.-300    	; 0x3c3a <vfprintf+0x28>
    3d66:	b7 01       	movw	r22, r14
    3d68:	80 e2       	ldi	r24, 0x20	; 32
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3d70:	3a 94       	dec	r3
    3d72:	f6 cf       	rjmp	.-20     	; 0x3d60 <vfprintf+0x14e>
    3d74:	f8 01       	movw	r30, r16
    3d76:	80 81       	ld	r24, Z
    3d78:	89 83       	std	Y+1, r24	; 0x01
    3d7a:	0e 5f       	subi	r16, 0xFE	; 254
    3d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7e:	e0 cf       	rjmp	.-64     	; 0x3d40 <vfprintf+0x12e>
    3d80:	f8 01       	movw	r30, r16
    3d82:	c1 90       	ld	r12, Z+
    3d84:	d1 90       	ld	r13, Z+
    3d86:	8f 01       	movw	r16, r30
    3d88:	69 2d       	mov	r22, r9
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	56 fc       	sbrc	r5, 6
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <vfprintf+0x182>
    3d90:	6f ef       	ldi	r22, 0xFF	; 255
    3d92:	7f ef       	ldi	r23, 0xFF	; 255
    3d94:	c6 01       	movw	r24, r12
    3d96:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <strnlen>
    3d9a:	4c 01       	movw	r8, r24
    3d9c:	d5 cf       	rjmp	.-86     	; 0x3d48 <vfprintf+0x136>
    3d9e:	b7 01       	movw	r22, r14
    3da0:	80 e2       	ldi	r24, 0x20	; 32
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3da8:	4a 94       	dec	r4
    3daa:	d2 cf       	rjmp	.-92     	; 0x3d50 <vfprintf+0x13e>
    3dac:	f6 01       	movw	r30, r12
    3dae:	57 fc       	sbrc	r5, 7
    3db0:	85 91       	lpm	r24, Z+
    3db2:	57 fe       	sbrs	r5, 7
    3db4:	81 91       	ld	r24, Z+
    3db6:	6f 01       	movw	r12, r30
    3db8:	b7 01       	movw	r22, r14
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3dc0:	31 10       	cpse	r3, r1
    3dc2:	3a 94       	dec	r3
    3dc4:	f1 e0       	ldi	r31, 0x01	; 1
    3dc6:	8f 1a       	sub	r8, r31
    3dc8:	91 08       	sbc	r9, r1
    3dca:	c7 cf       	rjmp	.-114    	; 0x3d5a <vfprintf+0x148>
    3dcc:	84 36       	cpi	r24, 0x64	; 100
    3dce:	19 f0       	breq	.+6      	; 0x3dd6 <vfprintf+0x1c4>
    3dd0:	89 36       	cpi	r24, 0x69	; 105
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <vfprintf+0x1c4>
    3dd4:	74 c0       	rjmp	.+232    	; 0x3ebe <vfprintf+0x2ac>
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	57 fe       	sbrs	r5, 7
    3dda:	6a c0       	rjmp	.+212    	; 0x3eb0 <vfprintf+0x29e>
    3ddc:	61 91       	ld	r22, Z+
    3dde:	71 91       	ld	r23, Z+
    3de0:	81 91       	ld	r24, Z+
    3de2:	91 91       	ld	r25, Z+
    3de4:	8f 01       	movw	r16, r30
    3de6:	25 2d       	mov	r18, r5
    3de8:	2f 76       	andi	r18, 0x6F	; 111
    3dea:	d2 2e       	mov	r13, r18
    3dec:	97 ff       	sbrs	r25, 7
    3dee:	09 c0       	rjmp	.+18     	; 0x3e02 <vfprintf+0x1f0>
    3df0:	90 95       	com	r25
    3df2:	80 95       	com	r24
    3df4:	70 95       	com	r23
    3df6:	61 95       	neg	r22
    3df8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfe:	68 94       	set
    3e00:	d7 f8       	bld	r13, 7
    3e02:	2a e0       	ldi	r18, 0x0A	; 10
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	a5 01       	movw	r20, r10
    3e08:	0e 94 2a 20 	call	0x4054	; 0x4054 <__ultoa_invert>
    3e0c:	c8 2e       	mov	r12, r24
    3e0e:	ca 18       	sub	r12, r10
    3e10:	8c 2c       	mov	r8, r12
    3e12:	5d 2c       	mov	r5, r13
    3e14:	d6 fe       	sbrs	r13, 6
    3e16:	0c c0       	rjmp	.+24     	; 0x3e30 <vfprintf+0x21e>
    3e18:	e8 94       	clt
    3e1a:	50 f8       	bld	r5, 0
    3e1c:	c9 14       	cp	r12, r9
    3e1e:	40 f4       	brcc	.+16     	; 0x3e30 <vfprintf+0x21e>
    3e20:	d4 fe       	sbrs	r13, 4
    3e22:	05 c0       	rjmp	.+10     	; 0x3e2e <vfprintf+0x21c>
    3e24:	d2 fc       	sbrc	r13, 2
    3e26:	03 c0       	rjmp	.+6      	; 0x3e2e <vfprintf+0x21c>
    3e28:	fd 2d       	mov	r31, r13
    3e2a:	fe 7e       	andi	r31, 0xEE	; 238
    3e2c:	5f 2e       	mov	r5, r31
    3e2e:	89 2c       	mov	r8, r9
    3e30:	54 fe       	sbrs	r5, 4
    3e32:	8f c0       	rjmp	.+286    	; 0x3f52 <vfprintf+0x340>
    3e34:	fe 01       	movw	r30, r28
    3e36:	ec 0d       	add	r30, r12
    3e38:	f1 1d       	adc	r31, r1
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 33       	cpi	r24, 0x30	; 48
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <vfprintf+0x230>
    3e40:	81 c0       	rjmp	.+258    	; 0x3f44 <vfprintf+0x332>
    3e42:	25 2d       	mov	r18, r5
    3e44:	29 7e       	andi	r18, 0xE9	; 233
    3e46:	52 2e       	mov	r5, r18
    3e48:	85 2d       	mov	r24, r5
    3e4a:	88 70       	andi	r24, 0x08	; 8
    3e4c:	38 2e       	mov	r3, r24
    3e4e:	53 fc       	sbrc	r5, 3
    3e50:	8f c0       	rjmp	.+286    	; 0x3f70 <vfprintf+0x35e>
    3e52:	50 fe       	sbrs	r5, 0
    3e54:	89 c0       	rjmp	.+274    	; 0x3f68 <vfprintf+0x356>
    3e56:	9c 2c       	mov	r9, r12
    3e58:	84 14       	cp	r8, r4
    3e5a:	18 f4       	brcc	.+6      	; 0x3e62 <vfprintf+0x250>
    3e5c:	4c 0c       	add	r4, r12
    3e5e:	94 2c       	mov	r9, r4
    3e60:	98 18       	sub	r9, r8
    3e62:	54 fe       	sbrs	r5, 4
    3e64:	8b c0       	rjmp	.+278    	; 0x3f7c <vfprintf+0x36a>
    3e66:	b7 01       	movw	r22, r14
    3e68:	80 e3       	ldi	r24, 0x30	; 48
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3e70:	52 fe       	sbrs	r5, 2
    3e72:	09 c0       	rjmp	.+18     	; 0x3e86 <vfprintf+0x274>
    3e74:	88 e7       	ldi	r24, 0x78	; 120
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	51 fe       	sbrs	r5, 1
    3e7a:	02 c0       	rjmp	.+4      	; 0x3e80 <vfprintf+0x26e>
    3e7c:	88 e5       	ldi	r24, 0x58	; 88
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	b7 01       	movw	r22, r14
    3e82:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3e86:	c9 14       	cp	r12, r9
    3e88:	08 f4       	brcc	.+2      	; 0x3e8c <vfprintf+0x27a>
    3e8a:	84 c0       	rjmp	.+264    	; 0x3f94 <vfprintf+0x382>
    3e8c:	ca 94       	dec	r12
    3e8e:	d1 2c       	mov	r13, r1
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	c9 1a       	sub	r12, r25
    3e94:	d9 0a       	sbc	r13, r25
    3e96:	ca 0c       	add	r12, r10
    3e98:	db 1c       	adc	r13, r11
    3e9a:	f6 01       	movw	r30, r12
    3e9c:	82 91       	ld	r24, -Z
    3e9e:	6f 01       	movw	r12, r30
    3ea0:	b7 01       	movw	r22, r14
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3ea8:	ac 14       	cp	r10, r12
    3eaa:	bd 04       	cpc	r11, r13
    3eac:	b1 f7       	brne	.-20     	; 0x3e9a <vfprintf+0x288>
    3eae:	58 cf       	rjmp	.-336    	; 0x3d60 <vfprintf+0x14e>
    3eb0:	61 91       	ld	r22, Z+
    3eb2:	71 91       	ld	r23, Z+
    3eb4:	07 2e       	mov	r0, r23
    3eb6:	00 0c       	add	r0, r0
    3eb8:	88 0b       	sbc	r24, r24
    3eba:	99 0b       	sbc	r25, r25
    3ebc:	93 cf       	rjmp	.-218    	; 0x3de4 <vfprintf+0x1d2>
    3ebe:	d5 2c       	mov	r13, r5
    3ec0:	e8 94       	clt
    3ec2:	d4 f8       	bld	r13, 4
    3ec4:	2a e0       	ldi	r18, 0x0A	; 10
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	85 37       	cpi	r24, 0x75	; 117
    3eca:	39 f1       	breq	.+78     	; 0x3f1a <vfprintf+0x308>
    3ecc:	95 2d       	mov	r25, r5
    3ece:	99 7f       	andi	r25, 0xF9	; 249
    3ed0:	d9 2e       	mov	r13, r25
    3ed2:	8f 36       	cpi	r24, 0x6F	; 111
    3ed4:	01 f1       	breq	.+64     	; 0x3f16 <vfprintf+0x304>
    3ed6:	48 f4       	brcc	.+18     	; 0x3eea <vfprintf+0x2d8>
    3ed8:	88 35       	cpi	r24, 0x58	; 88
    3eda:	a9 f0       	breq	.+42     	; 0x3f06 <vfprintf+0x2f4>
    3edc:	f7 01       	movw	r30, r14
    3ede:	86 81       	ldd	r24, Z+6	; 0x06
    3ee0:	97 81       	ldd	r25, Z+7	; 0x07
    3ee2:	2b 96       	adiw	r28, 0x0b	; 11
    3ee4:	e2 e1       	ldi	r30, 0x12	; 18
    3ee6:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__epilogue_restores__>
    3eea:	80 37       	cpi	r24, 0x70	; 112
    3eec:	49 f0       	breq	.+18     	; 0x3f00 <vfprintf+0x2ee>
    3eee:	88 37       	cpi	r24, 0x78	; 120
    3ef0:	a9 f7       	brne	.-22     	; 0x3edc <vfprintf+0x2ca>
    3ef2:	d4 fe       	sbrs	r13, 4
    3ef4:	02 c0       	rjmp	.+4      	; 0x3efa <vfprintf+0x2e8>
    3ef6:	68 94       	set
    3ef8:	d2 f8       	bld	r13, 2
    3efa:	20 e1       	ldi	r18, 0x10	; 16
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	0d c0       	rjmp	.+26     	; 0x3f1a <vfprintf+0x308>
    3f00:	68 94       	set
    3f02:	d4 f8       	bld	r13, 4
    3f04:	f6 cf       	rjmp	.-20     	; 0x3ef2 <vfprintf+0x2e0>
    3f06:	54 fe       	sbrs	r5, 4
    3f08:	03 c0       	rjmp	.+6      	; 0x3f10 <vfprintf+0x2fe>
    3f0a:	e9 2f       	mov	r30, r25
    3f0c:	e6 60       	ori	r30, 0x06	; 6
    3f0e:	de 2e       	mov	r13, r30
    3f10:	20 e1       	ldi	r18, 0x10	; 16
    3f12:	32 e0       	ldi	r19, 0x02	; 2
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <vfprintf+0x308>
    3f16:	28 e0       	ldi	r18, 0x08	; 8
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	f8 01       	movw	r30, r16
    3f1c:	d7 fe       	sbrs	r13, 7
    3f1e:	0d c0       	rjmp	.+26     	; 0x3f3a <vfprintf+0x328>
    3f20:	61 91       	ld	r22, Z+
    3f22:	71 91       	ld	r23, Z+
    3f24:	81 91       	ld	r24, Z+
    3f26:	91 91       	ld	r25, Z+
    3f28:	8f 01       	movw	r16, r30
    3f2a:	a5 01       	movw	r20, r10
    3f2c:	0e 94 2a 20 	call	0x4054	; 0x4054 <__ultoa_invert>
    3f30:	c8 2e       	mov	r12, r24
    3f32:	ca 18       	sub	r12, r10
    3f34:	e8 94       	clt
    3f36:	d7 f8       	bld	r13, 7
    3f38:	6b cf       	rjmp	.-298    	; 0x3e10 <vfprintf+0x1fe>
    3f3a:	61 91       	ld	r22, Z+
    3f3c:	71 91       	ld	r23, Z+
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	f2 cf       	rjmp	.-28     	; 0x3f28 <vfprintf+0x316>
    3f44:	52 fc       	sbrc	r5, 2
    3f46:	02 c0       	rjmp	.+4      	; 0x3f4c <vfprintf+0x33a>
    3f48:	83 94       	inc	r8
    3f4a:	7e cf       	rjmp	.-260    	; 0x3e48 <vfprintf+0x236>
    3f4c:	83 94       	inc	r8
    3f4e:	83 94       	inc	r8
    3f50:	7b cf       	rjmp	.-266    	; 0x3e48 <vfprintf+0x236>
    3f52:	85 2d       	mov	r24, r5
    3f54:	86 78       	andi	r24, 0x86	; 134
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <vfprintf+0x348>
    3f58:	77 cf       	rjmp	.-274    	; 0x3e48 <vfprintf+0x236>
    3f5a:	f6 cf       	rjmp	.-20     	; 0x3f48 <vfprintf+0x336>
    3f5c:	b7 01       	movw	r22, r14
    3f5e:	80 e2       	ldi	r24, 0x20	; 32
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3f66:	83 94       	inc	r8
    3f68:	84 14       	cp	r8, r4
    3f6a:	c0 f3       	brcs	.-16     	; 0x3f5c <vfprintf+0x34a>
    3f6c:	31 2c       	mov	r3, r1
    3f6e:	79 cf       	rjmp	.-270    	; 0x3e62 <vfprintf+0x250>
    3f70:	34 2c       	mov	r3, r4
    3f72:	38 18       	sub	r3, r8
    3f74:	84 14       	cp	r8, r4
    3f76:	08 f4       	brcc	.+2      	; 0x3f7a <vfprintf+0x368>
    3f78:	74 cf       	rjmp	.-280    	; 0x3e62 <vfprintf+0x250>
    3f7a:	f8 cf       	rjmp	.-16     	; 0x3f6c <vfprintf+0x35a>
    3f7c:	85 2d       	mov	r24, r5
    3f7e:	86 78       	andi	r24, 0x86	; 134
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <vfprintf+0x372>
    3f82:	81 cf       	rjmp	.-254    	; 0x3e86 <vfprintf+0x274>
    3f84:	8b e2       	ldi	r24, 0x2B	; 43
    3f86:	51 fe       	sbrs	r5, 1
    3f88:	80 e2       	ldi	r24, 0x20	; 32
    3f8a:	57 fc       	sbrc	r5, 7
    3f8c:	8d e2       	ldi	r24, 0x2D	; 45
    3f8e:	b7 01       	movw	r22, r14
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	77 cf       	rjmp	.-274    	; 0x3e82 <vfprintf+0x270>
    3f94:	b7 01       	movw	r22, r14
    3f96:	80 e3       	ldi	r24, 0x30	; 48
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <fputc>
    3f9e:	9a 94       	dec	r9
    3fa0:	72 cf       	rjmp	.-284    	; 0x3e86 <vfprintf+0x274>
    3fa2:	8f ef       	ldi	r24, 0xFF	; 255
    3fa4:	9f ef       	ldi	r25, 0xFF	; 255
    3fa6:	9d cf       	rjmp	.-198    	; 0x3ee2 <vfprintf+0x2d0>

00003fa8 <strnlen_P>:
    3fa8:	fc 01       	movw	r30, r24
    3faa:	05 90       	lpm	r0, Z+
    3fac:	61 50       	subi	r22, 0x01	; 1
    3fae:	70 40       	sbci	r23, 0x00	; 0
    3fb0:	01 10       	cpse	r0, r1
    3fb2:	d8 f7       	brcc	.-10     	; 0x3faa <strnlen_P+0x2>
    3fb4:	80 95       	com	r24
    3fb6:	90 95       	com	r25
    3fb8:	8e 0f       	add	r24, r30
    3fba:	9f 1f       	adc	r25, r31
    3fbc:	08 95       	ret

00003fbe <strnlen>:
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	61 50       	subi	r22, 0x01	; 1
    3fc2:	70 40       	sbci	r23, 0x00	; 0
    3fc4:	01 90       	ld	r0, Z+
    3fc6:	01 10       	cpse	r0, r1
    3fc8:	d8 f7       	brcc	.-10     	; 0x3fc0 <strnlen+0x2>
    3fca:	80 95       	com	r24
    3fcc:	90 95       	com	r25
    3fce:	8e 0f       	add	r24, r30
    3fd0:	9f 1f       	adc	r25, r31
    3fd2:	08 95       	ret

00003fd4 <strrev>:
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	67 2f       	mov	r22, r23
    3fda:	71 91       	ld	r23, Z+
    3fdc:	77 23       	and	r23, r23
    3fde:	e1 f7       	brne	.-8      	; 0x3fd8 <strrev+0x4>
    3fe0:	32 97       	sbiw	r30, 0x02	; 2
    3fe2:	04 c0       	rjmp	.+8      	; 0x3fec <strrev+0x18>
    3fe4:	7c 91       	ld	r23, X
    3fe6:	6d 93       	st	X+, r22
    3fe8:	70 83       	st	Z, r23
    3fea:	62 91       	ld	r22, -Z
    3fec:	ae 17       	cp	r26, r30
    3fee:	bf 07       	cpc	r27, r31
    3ff0:	c8 f3       	brcs	.-14     	; 0x3fe4 <strrev+0x10>
    3ff2:	08 95       	ret

00003ff4 <fputc>:
    3ff4:	0f 93       	push	r16
    3ff6:	1f 93       	push	r17
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	18 2f       	mov	r17, r24
    3ffe:	09 2f       	mov	r16, r25
    4000:	eb 01       	movw	r28, r22
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	81 fd       	sbrc	r24, 1
    4006:	09 c0       	rjmp	.+18     	; 0x401a <fputc+0x26>
    4008:	1f ef       	ldi	r17, 0xFF	; 255
    400a:	0f ef       	ldi	r16, 0xFF	; 255
    400c:	81 2f       	mov	r24, r17
    400e:	90 2f       	mov	r25, r16
    4010:	df 91       	pop	r29
    4012:	cf 91       	pop	r28
    4014:	1f 91       	pop	r17
    4016:	0f 91       	pop	r16
    4018:	08 95       	ret
    401a:	82 ff       	sbrs	r24, 2
    401c:	14 c0       	rjmp	.+40     	; 0x4046 <fputc+0x52>
    401e:	2e 81       	ldd	r18, Y+6	; 0x06
    4020:	3f 81       	ldd	r19, Y+7	; 0x07
    4022:	8c 81       	ldd	r24, Y+4	; 0x04
    4024:	9d 81       	ldd	r25, Y+5	; 0x05
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	3c f4       	brge	.+14     	; 0x403a <fputc+0x46>
    402c:	e8 81       	ld	r30, Y
    402e:	f9 81       	ldd	r31, Y+1	; 0x01
    4030:	cf 01       	movw	r24, r30
    4032:	01 96       	adiw	r24, 0x01	; 1
    4034:	99 83       	std	Y+1, r25	; 0x01
    4036:	88 83       	st	Y, r24
    4038:	10 83       	st	Z, r17
    403a:	8e 81       	ldd	r24, Y+6	; 0x06
    403c:	9f 81       	ldd	r25, Y+7	; 0x07
    403e:	01 96       	adiw	r24, 0x01	; 1
    4040:	9f 83       	std	Y+7, r25	; 0x07
    4042:	8e 83       	std	Y+6, r24	; 0x06
    4044:	e3 cf       	rjmp	.-58     	; 0x400c <fputc+0x18>
    4046:	e8 85       	ldd	r30, Y+8	; 0x08
    4048:	f9 85       	ldd	r31, Y+9	; 0x09
    404a:	81 2f       	mov	r24, r17
    404c:	09 95       	icall
    404e:	89 2b       	or	r24, r25
    4050:	a1 f3       	breq	.-24     	; 0x403a <fputc+0x46>
    4052:	da cf       	rjmp	.-76     	; 0x4008 <fputc+0x14>

00004054 <__ultoa_invert>:
    4054:	fa 01       	movw	r30, r20
    4056:	aa 27       	eor	r26, r26
    4058:	28 30       	cpi	r18, 0x08	; 8
    405a:	51 f1       	breq	.+84     	; 0x40b0 <__ultoa_invert+0x5c>
    405c:	20 31       	cpi	r18, 0x10	; 16
    405e:	81 f1       	breq	.+96     	; 0x40c0 <__ultoa_invert+0x6c>
    4060:	e8 94       	clt
    4062:	6f 93       	push	r22
    4064:	6e 7f       	andi	r22, 0xFE	; 254
    4066:	6e 5f       	subi	r22, 0xFE	; 254
    4068:	7f 4f       	sbci	r23, 0xFF	; 255
    406a:	8f 4f       	sbci	r24, 0xFF	; 255
    406c:	9f 4f       	sbci	r25, 0xFF	; 255
    406e:	af 4f       	sbci	r26, 0xFF	; 255
    4070:	b1 e0       	ldi	r27, 0x01	; 1
    4072:	3e d0       	rcall	.+124    	; 0x40f0 <__ultoa_invert+0x9c>
    4074:	b4 e0       	ldi	r27, 0x04	; 4
    4076:	3c d0       	rcall	.+120    	; 0x40f0 <__ultoa_invert+0x9c>
    4078:	67 0f       	add	r22, r23
    407a:	78 1f       	adc	r23, r24
    407c:	89 1f       	adc	r24, r25
    407e:	9a 1f       	adc	r25, r26
    4080:	a1 1d       	adc	r26, r1
    4082:	68 0f       	add	r22, r24
    4084:	79 1f       	adc	r23, r25
    4086:	8a 1f       	adc	r24, r26
    4088:	91 1d       	adc	r25, r1
    408a:	a1 1d       	adc	r26, r1
    408c:	6a 0f       	add	r22, r26
    408e:	71 1d       	adc	r23, r1
    4090:	81 1d       	adc	r24, r1
    4092:	91 1d       	adc	r25, r1
    4094:	a1 1d       	adc	r26, r1
    4096:	20 d0       	rcall	.+64     	; 0x40d8 <__ultoa_invert+0x84>
    4098:	09 f4       	brne	.+2      	; 0x409c <__ultoa_invert+0x48>
    409a:	68 94       	set
    409c:	3f 91       	pop	r19
    409e:	2a e0       	ldi	r18, 0x0A	; 10
    40a0:	26 9f       	mul	r18, r22
    40a2:	11 24       	eor	r1, r1
    40a4:	30 19       	sub	r19, r0
    40a6:	30 5d       	subi	r19, 0xD0	; 208
    40a8:	31 93       	st	Z+, r19
    40aa:	de f6       	brtc	.-74     	; 0x4062 <__ultoa_invert+0xe>
    40ac:	cf 01       	movw	r24, r30
    40ae:	08 95       	ret
    40b0:	46 2f       	mov	r20, r22
    40b2:	47 70       	andi	r20, 0x07	; 7
    40b4:	40 5d       	subi	r20, 0xD0	; 208
    40b6:	41 93       	st	Z+, r20
    40b8:	b3 e0       	ldi	r27, 0x03	; 3
    40ba:	0f d0       	rcall	.+30     	; 0x40da <__ultoa_invert+0x86>
    40bc:	c9 f7       	brne	.-14     	; 0x40b0 <__ultoa_invert+0x5c>
    40be:	f6 cf       	rjmp	.-20     	; 0x40ac <__ultoa_invert+0x58>
    40c0:	46 2f       	mov	r20, r22
    40c2:	4f 70       	andi	r20, 0x0F	; 15
    40c4:	40 5d       	subi	r20, 0xD0	; 208
    40c6:	4a 33       	cpi	r20, 0x3A	; 58
    40c8:	18 f0       	brcs	.+6      	; 0x40d0 <__ultoa_invert+0x7c>
    40ca:	49 5d       	subi	r20, 0xD9	; 217
    40cc:	31 fd       	sbrc	r19, 1
    40ce:	40 52       	subi	r20, 0x20	; 32
    40d0:	41 93       	st	Z+, r20
    40d2:	02 d0       	rcall	.+4      	; 0x40d8 <__ultoa_invert+0x84>
    40d4:	a9 f7       	brne	.-22     	; 0x40c0 <__ultoa_invert+0x6c>
    40d6:	ea cf       	rjmp	.-44     	; 0x40ac <__ultoa_invert+0x58>
    40d8:	b4 e0       	ldi	r27, 0x04	; 4
    40da:	a6 95       	lsr	r26
    40dc:	97 95       	ror	r25
    40de:	87 95       	ror	r24
    40e0:	77 95       	ror	r23
    40e2:	67 95       	ror	r22
    40e4:	ba 95       	dec	r27
    40e6:	c9 f7       	brne	.-14     	; 0x40da <__ultoa_invert+0x86>
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	61 05       	cpc	r22, r1
    40ec:	71 05       	cpc	r23, r1
    40ee:	08 95       	ret
    40f0:	9b 01       	movw	r18, r22
    40f2:	ac 01       	movw	r20, r24
    40f4:	0a 2e       	mov	r0, r26
    40f6:	06 94       	lsr	r0
    40f8:	57 95       	ror	r21
    40fa:	47 95       	ror	r20
    40fc:	37 95       	ror	r19
    40fe:	27 95       	ror	r18
    4100:	ba 95       	dec	r27
    4102:	c9 f7       	brne	.-14     	; 0x40f6 <__ultoa_invert+0xa2>
    4104:	62 0f       	add	r22, r18
    4106:	73 1f       	adc	r23, r19
    4108:	84 1f       	adc	r24, r20
    410a:	95 1f       	adc	r25, r21
    410c:	a0 1d       	adc	r26, r0
    410e:	08 95       	ret

00004110 <__prologue_saves__>:
    4110:	2f 92       	push	r2
    4112:	3f 92       	push	r3
    4114:	4f 92       	push	r4
    4116:	5f 92       	push	r5
    4118:	6f 92       	push	r6
    411a:	7f 92       	push	r7
    411c:	8f 92       	push	r8
    411e:	9f 92       	push	r9
    4120:	af 92       	push	r10
    4122:	bf 92       	push	r11
    4124:	cf 92       	push	r12
    4126:	df 92       	push	r13
    4128:	ef 92       	push	r14
    412a:	ff 92       	push	r15
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	ca 1b       	sub	r28, r26
    413a:	db 0b       	sbc	r29, r27
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	09 94       	ijmp

00004148 <__epilogue_restores__>:
    4148:	2a 88       	ldd	r2, Y+18	; 0x12
    414a:	39 88       	ldd	r3, Y+17	; 0x11
    414c:	48 88       	ldd	r4, Y+16	; 0x10
    414e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4150:	6e 84       	ldd	r6, Y+14	; 0x0e
    4152:	7d 84       	ldd	r7, Y+13	; 0x0d
    4154:	8c 84       	ldd	r8, Y+12	; 0x0c
    4156:	9b 84       	ldd	r9, Y+11	; 0x0b
    4158:	aa 84       	ldd	r10, Y+10	; 0x0a
    415a:	b9 84       	ldd	r11, Y+9	; 0x09
    415c:	c8 84       	ldd	r12, Y+8	; 0x08
    415e:	df 80       	ldd	r13, Y+7	; 0x07
    4160:	ee 80       	ldd	r14, Y+6	; 0x06
    4162:	fd 80       	ldd	r15, Y+5	; 0x05
    4164:	0c 81       	ldd	r16, Y+4	; 0x04
    4166:	1b 81       	ldd	r17, Y+3	; 0x03
    4168:	aa 81       	ldd	r26, Y+2	; 0x02
    416a:	b9 81       	ldd	r27, Y+1	; 0x01
    416c:	ce 0f       	add	r28, r30
    416e:	d1 1d       	adc	r29, r1
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	ed 01       	movw	r28, r26
    417c:	08 95       	ret

0000417e <_exit>:
    417e:	f8 94       	cli

00004180 <__stop_program>:
    4180:	ff cf       	rjmp	.-2      	; 0x4180 <__stop_program>
